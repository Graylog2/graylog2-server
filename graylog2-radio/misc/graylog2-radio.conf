# The auto-generated node ID will be stored in this file and read after restarts. It is a good idea
# to use an absolute file path here if you are starting graylog2-radio from init scripts or similar.
node_id_file = /etc/graylog/radio/node-id

# Use AMQP ("amqp") or Kafka ("kafka") as message transport?
transport_type = amqp

# Set plugin directory here (relative or absolute)
plugin_dir = plugin

# REST URI of a Graylog server node this radio will register at.
graylog2_server_uri = http://your-graylog2-server.example.org:12900/

# REST API listen URI. Must be reachable by the graylog2-web-interface and graylog2-server nodes.
rest_listen_uri = http://127.0.0.1:12950/

# REST API transport address. Defaults to the value of rest_listen_uri. Exception: If rest_listen_uri
# is set to a wildcard IP address (0.0.0.0) the first non-loopback IPv4 system address is used.
# If set, his will be promoted in the cluster discovery APIs, so other nodes may try to connect on
# this address and it is used to generate URLs addressing entities in the REST API. (see rest_listen_uri)
# You will need to define this, if your Graylog radio is running behind a HTTP proxy that is rewriting
# the scheme, host name or URI.
#rest_transport_uri = http://192.168.1.1:12950/

# Enable CORS headers for REST API. This is necessary for JS-clients accessing the server directly.
# If these are disabled, modern browsers will not be able to retrieve resources from the server.
# This is disabled by default. Uncomment the next line to enable it.
#rest_enable_cors = true

# Enable GZIP support for REST API. This compresses API responses and therefore helps to reduce
# overall round trip times. This is disabled by default. Uncomment the next line to enable it.
#rest_enable_gzip = true

# Enable HTTPS support for the REST API. This secures the communication with the REST API with
# TLS to prevent request forgery and eavesdropping. This is disabled by default. Uncomment the
# next line to enable it.
#rest_enable_tls = true

# The X.509 certificate file to use for securing the REST API.
#rest_tls_cert_file = /path/to/graylog2.crt

# The private key to use for securing the REST API.
#rest_tls_key_file = /path/to/graylog2.key

# The password to unlock the private key used for securing the REST API.
#rest_tls_key_password = secret

# The maximum size of a single HTTP chunk in bytes.
#rest_max_chunk_size = 8192

# The maximum size of the HTTP request headers in bytes.
#rest_max_header_size = 8192

# The maximal length of the initial HTTP/1.1 line in bytes.
#rest_max_initial_line_length = 4096

# The size of the thread pool used exclusively for serving the REST API.
#rest_thread_pool_size = 16

# The size of the worker thread pool used exclusively for serving the REST API.
#rest_worker_threads_max_pool_size = 16

# Maximum number of transport errors (e. g. not being able to send a message to the configured
# message broker) after which this radio node will be paused and the load balancer status will
# be set to DEAD. Default is 0 (i. e. disabled)
#radio_transport_max_errors = 0

# ONLY FOR AMQP: Hostname of the AMQP broker to connect to.
amqp_broker_hostname = localhost

# ONLY FOR AMQP: Port of the AMQP broker to connect to.
amqp_broker_port = 5672

# ONLY FOR AMQP: Timeout value for establishing a connection to the AMQP broker
# amqp_broker_connect_timeout = 5s

# ONLY FOR AMQP: Virtual host of the AMQP broker to connect to.
#amqp_broker_vhost = /

# ONLY FOR AMQP: Use a username to connect to the AMQP broker if you want.
#amqp_broker_username = user

# ONLY FOR AMQP: Use a password to connect to the AMQP broker if you want.
#amqp_broker_password = pass

# ONLY FOR AMQP: Name of the exchange to send messages to.
#amqp_broker_exchange_name = graylog2

# ONLY FOR AMQP: Name of the queue on the AMQP broker. The name might contain a single numeric
# placeholder ("%d", see http://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html) which
# is being used when amqp_broker_parallel_queues > 1.
#amqp_broker_queue_name = graylog2-radio-messages

# ONLY FOR AMQP: Type of the message exchange. Valid types are "topic", "fanout", and "direct".
# Default is "topic".
#amqp_broker_queue_type = topic

# ONLY FOR AMQP: The routing key used to send the messages.
#amqp_broker_routing_key = graylog2-radio-message

# ONLY FOR AMQP: Persist messages to disk on the AMQP broker.
#amqp_persistent_messages_enabled = false

# ONLY FOR AMQP: Number of parallel AMQP senders and queues being used. This might increase the throughput
# of the system if the AMQP broker can handle the number of queues and clients (producers and consumers).
# The default is 1.
#
# NOTE: You should set amqp_broker_queue_name accordingly, i. e. to a pattern containing a numeric placeholder
#       if more than one queue in parallel.
#amqp_broker_parallel_queues = 1

# ONLY FOR KAFKA: One or more Kafka brokers. Radio will automatically use all brokers in that Kafka cluster but
# needs at least one to connect to initially.
#kafka_brokers = broker1.example.org:9092,broker2.example.org:9092

# ONLY FOR KAFKA: Send messages asynchronously in a background thread? By setting the producer to async we allow
# batching messages (which is great for throughput) but open the possibility of a failure of the
# client machine dropping unsent data. Set to either sync or async.
#kafka_producer_type = async

# ONLY FOR KAFKA: Only accounted when running in async mode. The size of messages batches to send at once. See
# also the kafka_batch_max_wait_ms parameter.
#kafka_batch_size = 200

# ONLY FOR KAFKA: Fow how many milliseconds to wait to reach the kafka_batch_size. The batch is sent to the broker
# no matter if the kafka_batch_size is reached or not. Think of this like a timeout for local
# buffering before sending.
#kafka_batch_max_wait_ms = 250

# ONLY FOR KAFKA: How many Kafka brokers must ack a message to consider it delivered. Can be set to 0 for a
# fast fire and forget approach.
#kafka_required_acks = 0

# The number of parallel running processors. Raise this number if your buffers are filling up.
processbuffer_processors = 5

# Wait strategy describing how buffer processors wait on a cursor sequence. (default: sleeping)
# Possible types:
#  - yielding
#     Compromise between performance and CPU usage.
#  - sleeping
#     Compromise between performance and CPU usage. Latency spikes can occur after quiet periods.
#  - blocking
#     High throughput, low latency, higher CPU usage.
#  - busy_spinning
#     Avoids syscalls which could introduce latency jitter. Best when threads can be bound to specific CPU cores.
processor_wait_strategy = blocking

# Size of internal ring buffers. Raise this if raising outputbuffer_processors does not help anymore.
# For optimum performance your LogMessage objects in the ring buffer should fit in your CPU L3 cache.
# Start server with --statistics flag to see buffer utilization.
# Must be a power of 2. (512, 1024, 2048, ...)
ring_size = 65536

inputbuffer_ring_size = 65536
inputbuffer_processors = 2
inputbuffer_wait_strategy = blocking

# UDP receive buffer size for all message inputs (e. g. SyslogUDPInput).
#udp_recvbuffer_sizes = 1048576

# Number of threads used exclusively for dispatching internal events. Default is 2.
#async_eventbus_processors = 2

# https://github.com/bazhenov/groovy-shell-server
#groovy_shell_enable = false
#groovy_shell_port = 6789

# Disable the use of SIGAR for collecting system stats
#disable_sigar = false

# The default connect timeout for outgoing HTTP connections.
# Values must be a positive duration (and between 1 and 2147483647 when converted to milliseconds).
# Default: 5s
#http_connect_timeout = 5s

# The default read timeout for outgoing HTTP connections.
# Values must be a positive duration (and between 1 and 2147483647 when converted to milliseconds).
# Default: 10s
#http_read_timeout = 10s

# The default write timeout for outgoing HTTP connections.
# Values must be a positive duration (and between 1 and 2147483647 when converted to milliseconds).
# Default: 10s
#http_write_timeout = 10s

# HTTP proxy for outgoing HTTP connections
#http_proxy_uri =
