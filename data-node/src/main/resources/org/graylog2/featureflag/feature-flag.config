###########################################
# GRAYLOG FEATURE FLAG CONFIGURATION FILE #
###########################################
#
# * Entries are generally expected to be a single line of the form, one of the following:
#
# propertyName=propertyValue
# propertyName:propertyValue
#
# * White space that appears between the property name and property value is ignored,
#   so the following are equivalent:
#
# name=Stephen
# name = Stephen
#
# * White space at the beginning of the line is also ignored.
#
# * Lines that start with the comment characters ! or # are ignored. Blank lines are also ignored.
#
# * The property value is generally terminated by the end of the line. White space following the
#   property value is not ignored, and is treated as part of the property value.
#
# 'boolean' feature flags can be entered as follows: feature1=ON/on. On/on values are treated as 'true', other values
# treated as 'false'. The name of a feature flag must match the regex [a-zA-Z_][a-zA-Z0-9_]* otherwise no metrics can be
# collected.
# Feature flags in this file can be overridden or extended by a custom feature flag file, java system properties or environment variables.
# The order in which the flags are overridden is: this file <- custom file <- system properties <- environment variables.
# The access to a feature flag value is case-insensitive e.g. if a feature flag is specified as 'feature1' it can also be
# accessed with 'FEATURE1'. The override logic for the keys is also case-insensitive.
#
# Custom Feature Flag File:
# feature flags can be overridden or extended with a custom properties file in /etc/graylog/server/feature-flag.conf
# or if a file is specified on 'server' command as command line parameter e.g. server -ff feature-flag.config
#
# Java System Properties:
# To add feature flags as java system properties the key of the property requires the following prefix 'graylog.feature.',
# otherwise it is not recognized as a feature flag. If a feature flag was added as follows '-Dgraylog.feature.feature1=on' it
# can be accessed with 'feature1'/'FEATURE1', the prefix is not needed. This would override a feature flag in this file which is
# specified as follows 'feature1=on'/'FEATURE1=on'
#
# Environment Variables:
# To add feature flags as environment variable the key of the environment variable requires the following prefix 'GRAYLOG_FEATURE_',
# otherwise it is not recognized as a feature flag. If a feature flag is added as follows 'GRAYLOG_FEATURE_FEATURE1=on" it
# can be accessed with 'feature1'/'FEATURE1', the prefix is not needed. This would override a feature flag in this file which is
# specified as follows 'feature1=on'/'FEATURE1=on'
#
# After adding a feature flag it can be accessed over the FeatureFlags interface.
# The FeatureFlags interface is a protected field in the CmdLineTool class so all subclasses have access to the flags.
# It can also be injected after the dependency injection phase.
#
# All feature flags should be entered and documented in this file. If a feature is irreversible (e.g. data migration)
# then document the feature flag well enough.

# Legacy aggregation wizard flag: 
# This flag enable the usage of the legacy AggregationControls in place of the new AggregationWizard.
# It can be enabled with 'legacy-aggregation-wizard=on', the flag is disabled by default.

# Enabling search filters per default now for everybody
