// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UrlWhiteListConfig render the UrlWhiteListConfig component should create new instance 1`] = `
.c1 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c1 form {
  margin-bottom: 0;
}

.c1 .modal-dialog {
  margin-top: 55px;
}

.c1 .modal-dialog .modal-content {
  background-color: #fff;
  border-color: #a6a6a6;
}

.c1 .modal-header {
  border-bottom-color: #a6a6a6;
}

.c1 .modal-header button.close {
  color: currentColor;
}

.c1 .modal-footer {
  border-top-color: #a6a6a6;
}

.c1 .modal-title {
  font-size: 1.424rem;
}

.c1 .modal-body .form-group {
  margin-bottom: 5px;
}

.c0.table > thead > tr > th,
.c0.table > tbody > tr > th,
.c0.table > tfoot > tr > th,
.c0.table > thead > tr > td,
.c0.table > tbody > tr > td,
.c0.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c0.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c0.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c0.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c0.table .table {
  background-color: #fafafa;
}

.c0.table-bordered {
  border-color: #f0f0f0;
}

.c0.table-bordered > thead > tr > td,
.c0.table-bordered > tfoot > tr > td,
.c0.table-bordered > tbody > tr > td,
.c0.table-bordered > thead > tr > th,
.c0.table-bordered > tfoot > tr > th,
.c0.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c0.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c0.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c0.table > thead > tr > td.active,
.c0.table > tfoot > tr > td.active,
.c0.table > tbody > tr > td.active,
.c0.table > thead > tr > th.active,
.c0.table > tfoot > tr > th.active,
.c0.table > tbody > tr > th.active,
.c0.table > thead > tr.active > td,
.c0.table > tfoot > tr.active > td,
.c0.table > tbody > tr.active > td,
.c0.table > thead > tr.active > th,
.c0.table > tfoot > tr.active > th,
.c0.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c0.table-hover > tbody > tr > td.active:hover,
.c0.table-hover > tbody > tr > th.active:hover,
.c0.table-hover > tbody > tr.active:hover > td,
.c0.table-hover > tbody > tr:hover > .active,
.c0.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c0.table > thead > tr > td.success,
.c0.table > tfoot > tr > td.success,
.c0.table > tbody > tr > td.success,
.c0.table > thead > tr > th.success,
.c0.table > tfoot > tr > th.success,
.c0.table > tbody > tr > th.success,
.c0.table > thead > tr.success > td,
.c0.table > tfoot > tr.success > td,
.c0.table > tbody > tr.success > td,
.c0.table > thead > tr.success > th,
.c0.table > tfoot > tr.success > th,
.c0.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c0.table-hover > tbody > tr > td.success:hover,
.c0.table-hover > tbody > tr > th.success:hover,
.c0.table-hover > tbody > tr.success:hover > td,
.c0.table-hover > tbody > tr:hover > .success,
.c0.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c0.table > thead > tr > td.info,
.c0.table > tfoot > tr > td.info,
.c0.table > tbody > tr > td.info,
.c0.table > thead > tr > th.info,
.c0.table > tfoot > tr > th.info,
.c0.table > tbody > tr > th.info,
.c0.table > thead > tr.info > td,
.c0.table > tfoot > tr.info > td,
.c0.table > tbody > tr.info > td,
.c0.table > thead > tr.info > th,
.c0.table > tfoot > tr.info > th,
.c0.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c0.table-hover > tbody > tr > td.info:hover,
.c0.table-hover > tbody > tr > th.info:hover,
.c0.table-hover > tbody > tr.info:hover > td,
.c0.table-hover > tbody > tr:hover > .info,
.c0.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c0.table > thead > tr > td.warning,
.c0.table > tfoot > tr > td.warning,
.c0.table > tbody > tr > td.warning,
.c0.table > thead > tr > th.warning,
.c0.table > tfoot > tr > th.warning,
.c0.table > tbody > tr > th.warning,
.c0.table > thead > tr.warning > td,
.c0.table > tfoot > tr.warning > td,
.c0.table > tbody > tr.warning > td,
.c0.table > thead > tr.warning > th,
.c0.table > tfoot > tr.warning > th,
.c0.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c0.table-hover > tbody > tr > td.warning:hover,
.c0.table-hover > tbody > tr > th.warning:hover,
.c0.table-hover > tbody > tr.warning:hover > td,
.c0.table-hover > tbody > tr:hover > .warning,
.c0.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c0.table > thead > tr > td.danger,
.c0.table > tfoot > tr > td.danger,
.c0.table > tbody > tr > td.danger,
.c0.table > thead > tr > th.danger,
.c0.table > tfoot > tr > th.danger,
.c0.table > tbody > tr > th.danger,
.c0.table > thead > tr.danger > td,
.c0.table > tfoot > tr.danger > td,
.c0.table > tbody > tr.danger > td,
.c0.table > thead > tr.danger > th,
.c0.table > tfoot > tr.danger > th,
.c0.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c0.table-hover > tbody > tr > td.danger:hover,
.c0.table-hover > tbody > tr > th.danger:hover,
.c0.table-hover > tbody > tr.danger:hover > td,
.c0.table-hover > tbody > tr:hover > .danger,
.c0.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

<UrlWhiteListConfig
  config={
    Object {
      "disabled": false,
      "entries": Array [
        Object {
          "id": "f7033f1f-d50f-4323-96df-294ede41d951",
          "title": "testam",
          "type": "regex",
          "value": "http://localhost:8080/system/",
        },
        Object {
          "id": "636a2d40-c4c5-40b9-ab3a-48cf7978e9af",
          "title": "test",
          "type": "regex",
          "value": "http://localhost:8080/system/",
        },
        Object {
          "id": "f28fd891-5f2d-4128-9a94-e97c1ab07a1f",
          "title": "test",
          "type": "literal",
          "value": "http://localhost:8080/system/",
        },
      ],
    }
  }
  updateConfig={[MockFunction]}
>
  <div>
    <h2>
      URL Whitelist Configuration  
      <small>
        (Enabled)
      </small>
    </h2>
    <p>
      When enabled, outgoing HTTP requests from Graylog servers, such as event notifications or HTTP-based data adapter requests, are validated against the whitelists configured here. Because the HTTP requests are made from the Graylog servers, they might be able to reach more sensitive systems than an external user would have access to, including AWS EC2 metadata, which can contain keys and other secrets, Elasticsearch and others. Whitelist administrative access is separate from data adapters and event notification configuration.
    </p>
    <Table
      bordered={true}
      className="top-margin"
      condensed={true}
      striped={true}
    >
      <Table
        bordered={true}
        bsClass="table"
        className="c0 top-margin"
        condensed={true}
        hover={false}
        responsive={false}
        striped={true}
      >
        <table
          className="c0 top-margin table table-striped table-bordered table-condensed"
        >
          <thead>
            <tr>
              <th>
                #
              </th>
              <th>
                Title
              </th>
              <th>
                URL
              </th>
              <th>
                Type
              </th>
            </tr>
          </thead>
          <tbody>
            <tr
              key="f7033f1f-d50f-4323-96df-294ede41d951"
            >
              <td>
                1
              </td>
              <td>
                testam
              </td>
              <td>
                http://localhost:8080/system/
              </td>
              <td>
                Regex
              </td>
            </tr>
            <tr
              key="636a2d40-c4c5-40b9-ab3a-48cf7978e9af"
            >
              <td>
                2
              </td>
              <td>
                test
              </td>
              <td>
                http://localhost:8080/system/
              </td>
              <td>
                Regex
              </td>
            </tr>
            <tr
              key="f28fd891-5f2d-4128-9a94-e97c1ab07a1f"
            >
              <td>
                3
              </td>
              <td>
                test
              </td>
              <td>
                http://localhost:8080/system/
              </td>
              <td>
                Exact match
              </td>
            </tr>
          </tbody>
        </table>
      </Table>
    </Table>
    <IfPermitted
      anyPermissions={false}
      permissions="urlwhitelist:write"
    />
    <BootstrapModalForm
      bsSize="lg"
      cancelButtonText="Cancel"
      formProps={Object {}}
      onCancel={[Function]}
      onModalClose={[Function]}
      onModalOpen={[Function]}
      onSubmitForm={[Function]}
      show={false}
      submitButtonDisabled={true}
      submitButtonText="Save"
      title="Update Whitelist Configuration"
    >
      <BootstrapModalWrapper
        backdrop="static"
        bsSize="lg"
        onClose={[Function]}
        onHide={[Function]}
        onOpen={[Function]}
        showModal={false}
      >
        <Modal
          backdrop="static"
          bsSize="lg"
          onHide={[Function]}
          show={false}
        >
          <Modal
            animation={true}
            autoFocus={true}
            backdrop="static"
            bsClass="modal"
            bsSize="lg"
            className="c1"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <Modal
              autoFocus={true}
              backdrop="static"
              backdropClassName="modal-backdrop"
              backdropTransition={[Function]}
              containerClassName="modal-open"
              enforceFocus={true}
              keyboard={true}
              manager={
                ModalManager {
                  "add": [Function],
                  "containers": Array [],
                  "data": Array [],
                  "handleContainerOverflow": true,
                  "hideSiblingNodes": true,
                  "isTopModal": [Function],
                  "modals": Array [],
                  "remove": [Function],
                }
              }
              onEntering={[Function]}
              onExited={[Function]}
              onHide={[Function]}
              onMouseUp={[Function]}
              renderBackdrop={[Function]}
              restoreFocus={true}
              show={false}
              transition={[Function]}
            />
          </Modal>
        </Modal>
      </BootstrapModalWrapper>
    </BootstrapModalForm>
  </div>
</UrlWhiteListConfig>
`;
