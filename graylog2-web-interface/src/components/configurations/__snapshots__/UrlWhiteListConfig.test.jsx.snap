// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UrlWhiteListConfig render the UrlWhiteListConfig component should create new instance 1`] = `
<UrlWhiteListConfig
  config={
    Object {
      "disabled": false,
      "entries": Array [
        Object {
          "id": "f7033f1f-d50f-4323-96df-294ede41d951",
          "title": "testam",
          "type": "regex",
          "value": "http://localhost:8080/system/",
        },
        Object {
          "id": "636a2d40-c4c5-40b9-ab3a-48cf7978e9af",
          "title": "test",
          "type": "regex",
          "value": "http://localhost:8080/system/",
        },
        Object {
          "id": "f28fd891-5f2d-4128-9a94-e97c1ab07a1f",
          "title": "test",
          "type": "literal",
          "value": "http://localhost:8080/system/",
        },
      ],
    }
  }
  updateConfig={[MockFunction]}
>
  <div>
    <h2>
      URL Whitelist Configuration  
      <small>
        (Enabled)
      </small>
    </h2>
    <p>
      When enabled, outgoing HTTP requests from Graylog servers, such as event notifications or HTTP-based data adapter requests, are validated against the whitelists configured here. Because the HTTP requests are made from the Graylog servers, they might be able to reach more sensitive systems than an external user would have access to, including AWS EC2 metadata, which can contain keys and other secrets, Elasticsearch and others. Whitelist administrative access is separate from data adapters and event notification configuration.
    </p>
    <Table
      bordered={true}
      className="top-margin"
      condensed={true}
      striped={true}
    >
      <StyledComponent
        bordered={true}
        className="top-margin"
        condensed={true}
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "Table-ztr4bi-0",
              "isStatic": false,
              "lastClassName": "ZHHeb",
              "rules": Array [
                [Function],
              ],
            },
            "displayName": "Table",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "Table-ztr4bi-0",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
        striped={true}
      >
        <Table
          bordered={true}
          bsClass="table"
          className="top-margin Table-ztr4bi-0 ZHHeb"
          condensed={true}
          hover={false}
          responsive={false}
          striped={true}
        >
          <table
            className="top-margin Table-ztr4bi-0 ZHHeb table table-striped table-bordered table-condensed"
          >
            <thead>
              <tr>
                <th>
                  #
                </th>
                <th>
                  Title
                </th>
                <th>
                  URL
                </th>
                <th>
                  Type
                </th>
              </tr>
            </thead>
            <tbody>
              <tr
                key="f7033f1f-d50f-4323-96df-294ede41d951"
              >
                <td>
                  1
                </td>
                <td>
                  testam
                </td>
                <td>
                  http://localhost:8080/system/
                </td>
                <td>
                  Regex
                </td>
              </tr>
              <tr
                key="636a2d40-c4c5-40b9-ab3a-48cf7978e9af"
              >
                <td>
                  2
                </td>
                <td>
                  test
                </td>
                <td>
                  http://localhost:8080/system/
                </td>
                <td>
                  Regex
                </td>
              </tr>
              <tr
                key="f28fd891-5f2d-4128-9a94-e97c1ab07a1f"
              >
                <td>
                  3
                </td>
                <td>
                  test
                </td>
                <td>
                  http://localhost:8080/system/
                </td>
                <td>
                  Exact match
                </td>
              </tr>
            </tbody>
          </table>
        </Table>
      </StyledComponent>
    </Table>
    <ConnectStoresWrapper[IfPermitted] stores=currentUser
      permissions="urlwhitelist:write"
    >
      <IfPermitted
        anyPermissions={false}
        permissions="urlwhitelist:write"
      />
    </ConnectStoresWrapper[IfPermitted] stores=currentUser>
    <BootstrapModalForm
      bsSize="lg"
      cancelButtonText="Cancel"
      formProps={Object {}}
      onCancel={[Function]}
      onModalClose={[Function]}
      onModalOpen={[Function]}
      onSubmitForm={[Function]}
      show={false}
      submitButtonDisabled={true}
      submitButtonText="Save"
      title="Update Whitelist Configuration"
    >
      <BootstrapModalWrapper
        backdrop="static"
        bsSize="lg"
        onClose={[Function]}
        onHide={[Function]}
        onOpen={[Function]}
        showModal={false}
      >
        <Modal
          backdrop="static"
          bsSize="lg"
          onHide={[Function]}
          show={false}
        >
          <StyledComponent
            backdrop="static"
            bsSize="lg"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "BACKDROP_TRANSITION_DURATION": 150,
                "Body": [Function],
                "Dialog": [Function],
                "Footer": [Function],
                "Header": [Function],
                "SIZES": Array [
                  "large",
                  "small",
                ],
                "TRANSITION_DURATION": 300,
                "Title": [Function],
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Modal-nuree8-0",
                  "isStatic": false,
                  "lastClassName": "bmCcvm",
                  "rules": Array [
                    [Function],
                  ],
                },
                "displayName": "Modal",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Modal-nuree8-0",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onHide={[Function]}
            show={false}
          >
            <Modal
              animation={true}
              autoFocus={true}
              backdrop="static"
              bsClass="modal"
              bsSize="lg"
              className="Modal-nuree8-0 bmCcvm"
              dialogComponentClass={[Function]}
              enforceFocus={true}
              keyboard={true}
              manager={
                ModalManager {
                  "add": [Function],
                  "containers": Array [],
                  "data": Array [],
                  "handleContainerOverflow": true,
                  "hideSiblingNodes": true,
                  "isTopModal": [Function],
                  "modals": Array [],
                  "remove": [Function],
                }
              }
              onHide={[Function]}
              renderBackdrop={[Function]}
              restoreFocus={true}
              show={false}
            >
              <Modal
                autoFocus={true}
                backdrop="static"
                backdropClassName="modal-backdrop"
                backdropTransition={[Function]}
                containerClassName="modal-open"
                enforceFocus={true}
                keyboard={true}
                manager={
                  ModalManager {
                    "add": [Function],
                    "containers": Array [],
                    "data": Array [],
                    "handleContainerOverflow": true,
                    "hideSiblingNodes": true,
                    "isTopModal": [Function],
                    "modals": Array [],
                    "remove": [Function],
                  }
                }
                onEntering={[Function]}
                onExited={[Function]}
                onHide={[Function]}
                onMouseUp={[Function]}
                renderBackdrop={[Function]}
                restoreFocus={true}
                show={false}
                transition={[Function]}
              />
            </Modal>
          </StyledComponent>
        </Modal>
      </BootstrapModalWrapper>
    </BootstrapModalForm>
  </div>
</UrlWhiteListConfig>
`;
