import React from 'react';
import PropTypes from 'prop-types';
import lodash from 'lodash';
import { Button, Col, Row } from 'react-bootstrap';
import uuid from 'uuid/v4';

import FieldForm from './FieldForm';

// Import built-in Field Value Providers
import {} from './field-value-providers';

import commonStyles from '../common/commonStyles.css';

class FieldsForm extends React.Component {
  static propTypes = {
    eventDefinition: PropTypes.object.isRequired,
    onChange: PropTypes.func.isRequired,
  };

  constructor(props) {
    super(props);

    const fieldNames = Object.keys(props.eventDefinition.field_spec);
    const mapping = {};
    fieldNames.forEach((fieldName) => {
      mapping[fieldName] = uuid();
    });

    // We need to assign unique IDs to each field, since none of the data in them
    // may be unique and may change.
    this.state = {
      fieldMapping: mapping,
    };
  }

  addCustomField = () => {
    const { eventDefinition, onChange } = this.props;
    const nextFieldSpec = Object.assign({}, eventDefinition.field_spec, { '': {} });
    onChange('field_spec', nextFieldSpec);

    // Update mapping
    const { fieldMapping } = this.state;
    const addedMapping = { '': uuid() };
    const nextFieldMapping = Object.assign({}, fieldMapping, addedMapping);
    this.setState({ fieldMapping: nextFieldMapping });
  };

  removeCustomField = (fieldName) => {
    const { eventDefinition, onChange } = this.props;
    const nextFieldSpec = lodash.omit(eventDefinition.field_spec, fieldName);
    onChange('field_spec', nextFieldSpec);

    // Update mapping
    const { fieldMapping } = this.state;
    const nextFieldMapping = lodash.omit(fieldMapping, fieldName);
    this.setState({ fieldMapping: nextFieldMapping });
  };

  handleFieldChange = (fieldName, key, value) => {
    const { eventDefinition, onChange } = this.props;
    if (key === 'keys') {
      onChange('key_spec', value);
    } else {
      let nextFieldSpec;

      if (key === 'config') {
        nextFieldSpec = lodash.cloneDeep(eventDefinition.field_spec);
        nextFieldSpec[fieldName] = value;
      } else if (key === 'fieldName') {
        const config = eventDefinition.field_spec[fieldName];
        nextFieldSpec = lodash.omit(eventDefinition.field_spec, fieldName);
        nextFieldSpec[value] = config;

        // Update mapping
        const { fieldMapping } = this.state;
        const id = fieldMapping[fieldName];
        const nextFieldMapping = lodash.omit(fieldMapping, fieldName);
        nextFieldMapping[value] = id;
        this.setState({ fieldMapping: nextFieldMapping });
      }

      onChange('field_spec', nextFieldSpec);
    }
  };

  render() {
    const { eventDefinition } = this.props;
    const { fieldMapping } = this.state;

    return (
      <Row>
        <Col md={8} lg={6}>
          <h2 className={commonStyles.title}>Event Fields</h2>
          <p>
            Define Fields that will be stored in Events generated by this Event Definition. Those Fields can also be
            used in Alert Notifications.
          </p>

          {Object.entries(eventDefinition.field_spec)
            .map(([fieldName, config]) => {
              const id = fieldMapping[fieldName];
              return (
                <FieldForm key={`field-${id}-form`}
                           fieldName={fieldName}
                           config={config}
                           keys={eventDefinition.key_spec}
                           onChange={this.handleFieldChange}
                           onRemoveField={this.removeCustomField} />
              );
            })}

          <Button bsStyle="success" onClick={this.addCustomField}>Add Custom Field</Button>
        </Col>
      </Row>
    );
  }
}

export default FieldsForm;
