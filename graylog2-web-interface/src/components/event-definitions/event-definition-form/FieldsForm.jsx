import React from 'react';
import PropTypes from 'prop-types';
import lodash from 'lodash';
import { Button, Col, Row } from 'react-bootstrap';

import FieldForm from './FieldForm';

// Import built-in Field Value Providers
import {} from './field-value-providers';

import commonStyles from '../common/commonStyles.css';

class FieldsForm extends React.Component {
  static propTypes = {
    eventDefinition: PropTypes.object.isRequired,
    onChange: PropTypes.func.isRequired,
  };

  addCustomField = () => {
    const { eventDefinition, onChange } = this.props;
    const nextFieldSpec = Object.assign({}, eventDefinition.field_spec, { '': {} });
    onChange('field_spec', nextFieldSpec);
  };

  removeCustomField = (fieldName) => {
    const { eventDefinition, onChange } = this.props;
    const nextFieldSpec = lodash.omit(eventDefinition.field_spec, fieldName);
    onChange('field_spec', nextFieldSpec);
  };

  handleFieldChange = (fieldName, key, value) => {
    const { eventDefinition, onChange } = this.props;
    if (key === 'keys') {
      onChange('key_spec', value);
    } else {
      let nextFieldSpec;

      if (key === 'config') {
        nextFieldSpec = lodash.cloneDeep(eventDefinition.field_spec);
        nextFieldSpec[fieldName] = value;
      } else if (key === 'fieldName') {
        const config = eventDefinition.field_spec[fieldName];
        nextFieldSpec = lodash.omit(eventDefinition.field_spec, fieldName);
        nextFieldSpec[value] = config;
      }

      onChange('field_spec', nextFieldSpec);
    }
  };

  render() {
    const { eventDefinition } = this.props;

    return (
      <Row>
        <Col md={8} lg={6}>
          <h2 className={commonStyles.title}>Event Fields</h2>
          <p>
            Define Fields that will be stored in Events generated by this Event Definition. Those Fields can also be
            used in Alert Notifications.
          </p>

          {Object.entries(eventDefinition.field_spec)
            .map(([fieldName, config], idx) => {
              return (
                // Cannot use fieldName as key, since changing it will remove focus from the input. For now this was
                // the easiest way of working around that issue.
                // eslint-disable-next-line react/no-array-index-key
                <FieldForm key={`${eventDefinition.title}-field-${idx}`}
                           fieldName={fieldName}
                           config={config}
                           keys={eventDefinition.key_spec}
                           onChange={this.handleFieldChange}
                           onRemoveField={this.removeCustomField} />
              );
            })}

          <Button bsStyle="success" onClick={this.addCustomField}>Add Custom Field</Button>
        </Col>
      </Row>
    );
  }
}

export default FieldsForm;
