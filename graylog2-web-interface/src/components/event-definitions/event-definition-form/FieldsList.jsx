import React from 'react';
import PropTypes from 'prop-types';
import naturalSort from 'javascript-natural-sort';
import { Button } from 'react-bootstrap';
import { PluginStore } from 'graylog-web-plugin/plugin';

import { DataTable } from 'components/common';

class FieldsList extends React.Component {
  static propTypes = {
    fields: PropTypes.object.isRequired,
    keys: PropTypes.array.isRequired,
    onAddFieldClick: PropTypes.func.isRequired,
    onRemoveFieldClick: PropTypes.func.isRequired,
  };

  getFieldValueProviderPlugin = (type) => {
    if (type === undefined) {
      return {};
    }
    return PluginStore.exports('fieldValueProviders').find(p => p.type === type);
  };

  handleRemoveClick = (fieldName) => {
    return () => {
      const { onRemoveFieldClick } = this.props;
      onRemoveFieldClick(fieldName);
    };
  };

  fieldFormatter = (fieldName) => {
    const { fields, keys } = this.props;
    const config = fields[fieldName];

    const keyIndex = keys.indexOf(fieldName);
    const fieldProviderPlugin = this.getFieldValueProviderPlugin(config.providers[0].type);

    return (
      <tr key={fieldName}>
        <td>{fieldName}</td>
        <td>{keyIndex < 0 ? 'No' : `Yes, in position ${keyIndex + 1}`}</td>
        <td>{fieldProviderPlugin.displayName || config.providers[0].type}</td>
        <td>{config.data_type}</td>
        <td className="actions">
          <Button bsStyle="info" bsSize="xsmall" onClick={this.handleRemoveClick(fieldName)}>
            Remove Field
          </Button>
        </td>
      </tr>
    );
  };

  render() {
    const { fields, onAddFieldClick } = this.props;

    const fieldNames = Object.keys(fields).sort(naturalSort);

    if (fieldNames.length === 0) {
      return (
        <p>
          Define Fields that will be stored in Events generated by this Event Definition. Those Fields can also be
          used in Alert Notifications.
          {' '}
          <Button className="btn-text" bsStyle="link" bsSize="small" onClick={onAddFieldClick}>
            Add Custom Field
          </Button>.
        </p>
      );
    }
    return (
      <React.Fragment>
        <DataTable id="event-definition-fields"
                   className="table-striped table-hover"
                   headers={['Field Name', 'Is Key?', 'Value Source', 'Data Type', 'Actions']}
                   rows={fieldNames}
                   dataRowFormatter={this.fieldFormatter}
                   filterKeys={[]} />
        <Button bsStyle="success" onClick={onAddFieldClick}>
          Add Custom Field
        </Button>
      </React.Fragment>
    );
  }
}

export default FieldsList;
