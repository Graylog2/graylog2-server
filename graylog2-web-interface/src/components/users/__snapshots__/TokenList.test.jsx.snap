// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TokenList /> should render with empty tokens 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c2.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c2.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c2.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::placeholder {
  color: #9b9b9b;
}

.c2.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c2.form-control[disabled],
.c2.form-control[readonly],
fieldset[disabled] .c2.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c2.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

.c5 {
  background-color: #fff;
  border-color: #d0d0d0;
}

.c5 .list-group-item-heading {
  font-weight: bold;
}

a.c5,
button.c5 {
  color: #702785;
}

a.c5 .list-group-item-heading,
button.c5 .list-group-item-heading {
  color: #2d2d2d;
  font-weight: bold;
}

a.c5:hover:not(.disabled),
button.c5:hover:not(.disabled),
a.c5:focus:not(.disabled),
button.c5:focus:not(.disabled) {
  background-color: #f3f3f3;
  color: #410057;
}

a.c5:hover:not(.disabled).active,
button.c5:hover:not(.disabled).active,
a.c5:focus:not(.disabled).active,
button.c5:focus:not(.disabled).active {
  color: #2d2d2d;
  background-color: #f3f3f3;
  border-color: #f3f3f3;
}

a.c5:hover:not(.disabled) .list-group-item-heading,
button.c5:hover:not(.disabled) .list-group-item-heading,
a.c5:focus:not(.disabled) .list-group-item-heading,
button.c5:focus:not(.disabled) .list-group-item-heading {
  color: #1f1f1f;
}

.c5.disabled,
.c5.disabled:hover,
.c5.disabled:focus {
  color: #828282;
  background-color: #f3f3f3;
}

.c5.disabled .list-group-item-heading,
.c5.disabled:hover .list-group-item-heading,
.c5.disabled:focus .list-group-item-heading {
  color: inherit;
  font-weight: bold;
}

.c5.disabled .list-group-item-text,
.c5.disabled:hover .list-group-item-text,
.c5.disabled:focus .list-group-item-text {
  color: #828282;
}

.c5.active,
.c5.active:hover,
.c5.active:focus {
  color: #575757;
  background-color: #eff2f8;
  border-color: #eff2f8;
  z-index: auto;
}

.c5.active .list-group-item-heading,
.c5.active:hover .list-group-item-heading,
.c5.active:focus .list-group-item-heading,
.c5.active .list-group-item-heading > small,
.c5.active:hover .list-group-item-heading > small,
.c5.active:focus .list-group-item-heading > small,
.c5.active .list-group-item-heading > .small,
.c5.active:hover .list-group-item-heading > .small,
.c5.active:focus .list-group-item-heading > .small {
  color: inherit;
  font-weight: bold;
}

.c5.active .list-group-item-text,
.c5.active:hover .list-group-item-text,
.c5.active:focus .list-group-item-text {
  color: #9b7ca8;
}

.c0.content {
  background-color: #fff;
  border: 1px solid #d0d0d0;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c4 {
  background-color: #f3f3f3;
  font-size: 1rem;
  color: rgb(77,77,77);
  padding: 0 15px;
}

.c4 .form-group {
  margin: 0;
}

.c6 {
  margin: 10px 0;
  min-height: 20px;
}

<TokenList
  creatingToken={false}
  onCreate={[Function]}
  onDelete={[Function]}
  tokens={Array []}
>
  <span>
    <form
      onSubmit={[Function]}
    >
      <div
        className="form-group"
      >
        <Row>
          <Row
            bsClass="row"
            className="c0"
            componentClass="div"
          >
            <div
              className="c0 row"
            >
              <Col
                bsClass="col"
                componentClass="div"
                sm={2}
              >
                <div
                  className="col-sm-2"
                >
                  <ControlLabel
                    className="tokenNewNameLabel"
                  >
                    <ControlLabel
                      bsClass="control-label"
                      className="c1 tokenNewNameLabel"
                      srOnly={false}
                    >
                      <label
                        className="c1 tokenNewNameLabel control-label"
                      >
                        Token Name
                      </label>
                    </ControlLabel>
                  </ControlLabel>
                </div>
              </Col>
              <Col
                bsClass="col"
                componentClass="div"
                sm={4}
              >
                <div
                  className="col-sm-4"
                >
                  <FormControl
                    id="create-token-input"
                    onChange={[Function]}
                    placeholder="e.g ServiceName"
                    type="text"
                    value=""
                  >
                    <FormControl
                      bsClass="form-control"
                      className="c2"
                      componentClass="input"
                      id="create-token-input"
                      onChange={[Function]}
                      placeholder="e.g ServiceName"
                      type="text"
                      value=""
                    >
                      <input
                        className="c2 form-control"
                        id="create-token-input"
                        onChange={[Function]}
                        placeholder="e.g ServiceName"
                        type="text"
                        value=""
                      />
                    </FormControl>
                  </FormControl>
                </div>
              </Col>
              <Col
                bsClass="col"
                componentClass="div"
                sm={2}
              >
                <div
                  className="col-sm-2"
                >
                  <Button
                    bsStyle="primary"
                    disabled={true}
                    id="create-token"
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="c3"
                      disabled={true}
                      id="create-token"
                      type="submit"
                    >
                      <button
                        className="c3 btn btn-primary"
                        disabled={true}
                        id="create-token"
                        type="submit"
                      >
                        Create Token
                      </button>
                    </Button>
                  </Button>
                </div>
              </Col>
            </div>
          </Row>
        </Row>
      </div>
      <hr />
    </form>
    <TableList
      bulkActionsFactory={[Function]}
      descriptionKey="token"
      enableBulkActions={false}
      enableFilter={true}
      filterKeys={
        Array [
          "name",
          "token",
        ]
      }
      filterLabel="Filter"
      hideDescription={true}
      idKey="token"
      itemActionsFactory={[Function]}
      items={Immutable.List []}
      titleKey="name"
    >
      <div>
        <Row>
          <Row
            bsClass="row"
            className="c0"
            componentClass="div"
          >
            <div
              className="c0 row"
            >
              <Col
                bsClass="col"
                componentClass="div"
                md={12}
              >
                <div
                  className="col-md-12"
                >
                  <TypeAheadDataFilter
                    data={Array []}
                    displayKey="value"
                    filterBy=""
                    filterSuggestionAccessor=""
                    filterSuggestions={Array []}
                    id="filter-data-filter"
                    label="Filter"
                    onDataFiltered={[Function]}
                    searchInKeys={
                      Array [
                        "name",
                        "token",
                      ]
                    }
                  >
                    <div
                      className="filter"
                    >
                      <form
                        className="form-inline"
                        onSubmit={[Function]}
                        style={
                          Object {
                            "display": "inline",
                          }
                        }
                      >
                        <TypeAheadInput
                          displayKey="value"
                          id="filter-data-filter"
                          label="Filter"
                          onSuggestionSelected={[Function]}
                          suggestionText="Filter by : "
                          suggestions={Array []}
                        >
                          <Input
                            addonAfter={null}
                            bsStyle={null}
                            buttonAfter={null}
                            help=""
                            id="filter-data-filter"
                            label="Filter"
                            placeholder=""
                            type="text"
                            wrapperClassName="typeahead-wrapper"
                          >
                            <Component
                              controlId="filter-data-filter"
                              validationState={null}
                            >
                              <FormGroup__StyledFormGroup
                                controlId="filter-data-filter"
                                validationState={null}
                              >
                                <FormGroup
                                  bsClass="form-group"
                                  className=""
                                  controlId="filter-data-filter"
                                  validationState={null}
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <ControlLabel>
                                      <ControlLabel
                                        bsClass="control-label"
                                        className="c1"
                                        srOnly={false}
                                      >
                                        <label
                                          className="c1 control-label"
                                          htmlFor="filter-data-filter"
                                        >
                                          Filter
                                        </label>
                                      </ControlLabel>
                                    </ControlLabel>
                                    <InputWrapper
                                      className="typeahead-wrapper"
                                    >
                                      <div
                                        className="typeahead-wrapper"
                                      >
                                        <FormControl
                                          componentClass="input"
                                          inputRef={[Function]}
                                          label="Filter"
                                          name="filter-data-filter"
                                          placeholder=""
                                          type="text"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            className="c2"
                                            componentClass="input"
                                            inputRef={[Function]}
                                            label="Filter"
                                            name="filter-data-filter"
                                            placeholder=""
                                            type="text"
                                          >
                                            <input
                                              className="c2 form-control"
                                              id="filter-data-filter"
                                              label="Filter"
                                              name="filter-data-filter"
                                              placeholder=""
                                              type="text"
                                            />
                                          </FormControl>
                                        </FormControl>
                                      </div>
                                    </InputWrapper>
                                  </div>
                                </FormGroup>
                              </FormGroup__StyledFormGroup>
                            </Component>
                          </Input>
                        </TypeAheadInput>
                        <Button
                          style={
                            Object {
                              "marginLeft": 5,
                            }
                          }
                          type="submit"
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsStyle="default"
                            className="c3"
                            disabled={false}
                            style={
                              Object {
                                "marginLeft": 5,
                              }
                            }
                            type="submit"
                          >
                            <button
                              className="c3 btn btn-default"
                              disabled={false}
                              style={
                                Object {
                                  "marginLeft": 5,
                                }
                              }
                              type="submit"
                            >
                              Filter
                            </button>
                          </Button>
                        </Button>
                        <Button
                          disabled={true}
                          onClick={[Function]}
                          style={
                            Object {
                              "marginLeft": 5,
                            }
                          }
                          type="button"
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsStyle="default"
                            className="c3"
                            disabled={true}
                            onClick={[Function]}
                            style={
                              Object {
                                "marginLeft": 5,
                              }
                            }
                            type="button"
                          >
                            <button
                              className="c3 btn btn-default"
                              disabled={true}
                              onClick={[Function]}
                              style={
                                Object {
                                  "marginLeft": 5,
                                }
                              }
                              type="button"
                            >
                              Reset
                            </button>
                          </Button>
                        </Button>
                      </form>
                      <ul
                        className="pill-list"
                      >
                        <Component />
                      </ul>
                    </div>
                  </TypeAheadDataFilter>
                </div>
              </Col>
            </div>
          </Row>
        </Row>
        <ControlledTableList>
          <div>
            <ListGroup>
              <ListGroup
                bsClass="list-group"
              >
                <div
                  className="list-group"
                >
                  <ControlledTableListHeader>
                    <ControlledTableListHeader__StyledListGroupItem>
                      <ForwardRef
                        className="c4"
                      >
                        <ListGroupItem__StyledListGroupItem
                          className="c4"
                        >
                          <ListGroupItem
                            bsClass="list-group-item"
                            className="c5 c4"
                            listItem={false}
                          >
                            <span
                              className="c5 c4 list-group-item"
                            >
                              <ControlledTableListHeader__HeaderWrapper>
                                <div
                                  className="c6"
                                />
                              </ControlledTableListHeader__HeaderWrapper>
                            </span>
                          </ListGroupItem>
                        </ListGroupItem__StyledListGroupItem>
                      </ForwardRef>
                    </ControlledTableListHeader__StyledListGroupItem>
                  </ControlledTableListHeader>
                  <ControlledTableListItem>
                    <ForwardRef>
                      <ListGroupItem__StyledListGroupItem>
                        <ListGroupItem
                          bsClass="list-group-item"
                          className="c5"
                          listItem={false}
                        >
                          <span
                            className="c5 list-group-item"
                          >
                            No items to display
                          </span>
                        </ListGroupItem>
                      </ListGroupItem__StyledListGroupItem>
                    </ForwardRef>
                  </ControlledTableListItem>
                </div>
              </ListGroup>
            </ListGroup>
          </div>
        </ControlledTableList>
      </div>
    </TableList>
    <Checkbox
      bsClass="checkbox"
      checked={true}
      disabled={false}
      id="hide-tokens"
      inline={false}
      onChange={[Function]}
      title=""
    >
      <div
        className="checkbox"
      >
        <label
          title=""
        >
          <input
            checked={true}
            disabled={false}
            id="hide-tokens"
            onChange={[Function]}
            type="checkbox"
          />
          Hide Tokens
        </label>
      </div>
    </Checkbox>
  </span>
</TokenList>
`;

exports[`<TokenList /> should render with tokens 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c2.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c2.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c2.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::placeholder {
  color: #9b9b9b;
}

.c2.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c2.form-control[disabled],
.c2.form-control[readonly],
fieldset[disabled] .c2.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c2.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

.c5 {
  background-color: #fff;
  border-color: #d0d0d0;
}

.c5 .list-group-item-heading {
  font-weight: bold;
}

a.c5,
button.c5 {
  color: #702785;
}

a.c5 .list-group-item-heading,
button.c5 .list-group-item-heading {
  color: #2d2d2d;
  font-weight: bold;
}

a.c5:hover:not(.disabled),
button.c5:hover:not(.disabled),
a.c5:focus:not(.disabled),
button.c5:focus:not(.disabled) {
  background-color: #f3f3f3;
  color: #410057;
}

a.c5:hover:not(.disabled).active,
button.c5:hover:not(.disabled).active,
a.c5:focus:not(.disabled).active,
button.c5:focus:not(.disabled).active {
  color: #2d2d2d;
  background-color: #f3f3f3;
  border-color: #f3f3f3;
}

a.c5:hover:not(.disabled) .list-group-item-heading,
button.c5:hover:not(.disabled) .list-group-item-heading,
a.c5:focus:not(.disabled) .list-group-item-heading,
button.c5:focus:not(.disabled) .list-group-item-heading {
  color: #1f1f1f;
}

.c5.disabled,
.c5.disabled:hover,
.c5.disabled:focus {
  color: #828282;
  background-color: #f3f3f3;
}

.c5.disabled .list-group-item-heading,
.c5.disabled:hover .list-group-item-heading,
.c5.disabled:focus .list-group-item-heading {
  color: inherit;
  font-weight: bold;
}

.c5.disabled .list-group-item-text,
.c5.disabled:hover .list-group-item-text,
.c5.disabled:focus .list-group-item-text {
  color: #828282;
}

.c5.active,
.c5.active:hover,
.c5.active:focus {
  color: #575757;
  background-color: #eff2f8;
  border-color: #eff2f8;
  z-index: auto;
}

.c5.active .list-group-item-heading,
.c5.active:hover .list-group-item-heading,
.c5.active:focus .list-group-item-heading,
.c5.active .list-group-item-heading > small,
.c5.active:hover .list-group-item-heading > small,
.c5.active:focus .list-group-item-heading > small,
.c5.active .list-group-item-heading > .small,
.c5.active:hover .list-group-item-heading > .small,
.c5.active:focus .list-group-item-heading > .small {
  color: inherit;
  font-weight: bold;
}

.c5.active .list-group-item-text,
.c5.active:hover .list-group-item-text,
.c5.active:focus .list-group-item-text {
  color: #9b7ca8;
}

.c0.content {
  background-color: #fff;
  border: 1px solid #d0d0d0;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c4 {
  background-color: #f3f3f3;
  font-size: 1rem;
  color: rgb(77,77,77);
  padding: 0 15px;
}

.c4 .form-group {
  margin: 0;
}

.c6 {
  margin: 10px 0;
  min-height: 20px;
}

<TokenList
  creatingToken={false}
  onCreate={[Function]}
  onDelete={[Function]}
  tokens={
    Array [
      Object {
        "id": "abc1",
        "name": "Acme",
        "token": "beef2001",
      },
      Object {
        "id": "abc2",
        "name": "Hamfred",
        "token": "beef2002",
      },
    ]
  }
>
  <span>
    <form
      onSubmit={[Function]}
    >
      <div
        className="form-group"
      >
        <Row>
          <Row
            bsClass="row"
            className="c0"
            componentClass="div"
          >
            <div
              className="c0 row"
            >
              <Col
                bsClass="col"
                componentClass="div"
                sm={2}
              >
                <div
                  className="col-sm-2"
                >
                  <ControlLabel
                    className="tokenNewNameLabel"
                  >
                    <ControlLabel
                      bsClass="control-label"
                      className="c1 tokenNewNameLabel"
                      srOnly={false}
                    >
                      <label
                        className="c1 tokenNewNameLabel control-label"
                      >
                        Token Name
                      </label>
                    </ControlLabel>
                  </ControlLabel>
                </div>
              </Col>
              <Col
                bsClass="col"
                componentClass="div"
                sm={4}
              >
                <div
                  className="col-sm-4"
                >
                  <FormControl
                    id="create-token-input"
                    onChange={[Function]}
                    placeholder="e.g ServiceName"
                    type="text"
                    value=""
                  >
                    <FormControl
                      bsClass="form-control"
                      className="c2"
                      componentClass="input"
                      id="create-token-input"
                      onChange={[Function]}
                      placeholder="e.g ServiceName"
                      type="text"
                      value=""
                    >
                      <input
                        className="c2 form-control"
                        id="create-token-input"
                        onChange={[Function]}
                        placeholder="e.g ServiceName"
                        type="text"
                        value=""
                      />
                    </FormControl>
                  </FormControl>
                </div>
              </Col>
              <Col
                bsClass="col"
                componentClass="div"
                sm={2}
              >
                <div
                  className="col-sm-2"
                >
                  <Button
                    bsStyle="primary"
                    disabled={true}
                    id="create-token"
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="c3"
                      disabled={true}
                      id="create-token"
                      type="submit"
                    >
                      <button
                        className="c3 btn btn-primary"
                        disabled={true}
                        id="create-token"
                        type="submit"
                      >
                        Create Token
                      </button>
                    </Button>
                  </Button>
                </div>
              </Col>
            </div>
          </Row>
        </Row>
      </div>
      <hr />
    </form>
    <TableList
      bulkActionsFactory={[Function]}
      descriptionKey="token"
      enableBulkActions={false}
      enableFilter={true}
      filterKeys={
        Array [
          "name",
          "token",
        ]
      }
      filterLabel="Filter"
      hideDescription={true}
      idKey="token"
      itemActionsFactory={[Function]}
      items={
        Immutable.List [
          Object {
            "id": "abc1",
            "name": "Acme",
            "token": "beef2001",
          },
          Object {
            "id": "abc2",
            "name": "Hamfred",
            "token": "beef2002",
          },
        ]
      }
      titleKey="name"
    >
      <div>
        <Row>
          <Row
            bsClass="row"
            className="c0"
            componentClass="div"
          >
            <div
              className="c0 row"
            >
              <Col
                bsClass="col"
                componentClass="div"
                md={12}
              >
                <div
                  className="col-md-12"
                >
                  <TypeAheadDataFilter
                    data={
                      Array [
                        Object {
                          "id": "abc1",
                          "name": "Acme",
                          "token": "beef2001",
                        },
                        Object {
                          "id": "abc2",
                          "name": "Hamfred",
                          "token": "beef2002",
                        },
                      ]
                    }
                    displayKey="value"
                    filterBy=""
                    filterSuggestionAccessor=""
                    filterSuggestions={Array []}
                    id="filter-data-filter"
                    label="Filter"
                    onDataFiltered={[Function]}
                    searchInKeys={
                      Array [
                        "name",
                        "token",
                      ]
                    }
                  >
                    <div
                      className="filter"
                    >
                      <form
                        className="form-inline"
                        onSubmit={[Function]}
                        style={
                          Object {
                            "display": "inline",
                          }
                        }
                      >
                        <TypeAheadInput
                          displayKey="value"
                          id="filter-data-filter"
                          label="Filter"
                          onSuggestionSelected={[Function]}
                          suggestionText="Filter by : "
                          suggestions={Array []}
                        >
                          <Input
                            addonAfter={null}
                            bsStyle={null}
                            buttonAfter={null}
                            help=""
                            id="filter-data-filter"
                            label="Filter"
                            placeholder=""
                            type="text"
                            wrapperClassName="typeahead-wrapper"
                          >
                            <Component
                              controlId="filter-data-filter"
                              validationState={null}
                            >
                              <FormGroup__StyledFormGroup
                                controlId="filter-data-filter"
                                validationState={null}
                              >
                                <FormGroup
                                  bsClass="form-group"
                                  className=""
                                  controlId="filter-data-filter"
                                  validationState={null}
                                >
                                  <div
                                    className="form-group"
                                  >
                                    <ControlLabel>
                                      <ControlLabel
                                        bsClass="control-label"
                                        className="c1"
                                        srOnly={false}
                                      >
                                        <label
                                          className="c1 control-label"
                                          htmlFor="filter-data-filter"
                                        >
                                          Filter
                                        </label>
                                      </ControlLabel>
                                    </ControlLabel>
                                    <InputWrapper
                                      className="typeahead-wrapper"
                                    >
                                      <div
                                        className="typeahead-wrapper"
                                      >
                                        <FormControl
                                          componentClass="input"
                                          inputRef={[Function]}
                                          label="Filter"
                                          name="filter-data-filter"
                                          placeholder=""
                                          type="text"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            className="c2"
                                            componentClass="input"
                                            inputRef={[Function]}
                                            label="Filter"
                                            name="filter-data-filter"
                                            placeholder=""
                                            type="text"
                                          >
                                            <input
                                              className="c2 form-control"
                                              id="filter-data-filter"
                                              label="Filter"
                                              name="filter-data-filter"
                                              placeholder=""
                                              type="text"
                                            />
                                          </FormControl>
                                        </FormControl>
                                      </div>
                                    </InputWrapper>
                                  </div>
                                </FormGroup>
                              </FormGroup__StyledFormGroup>
                            </Component>
                          </Input>
                        </TypeAheadInput>
                        <Button
                          style={
                            Object {
                              "marginLeft": 5,
                            }
                          }
                          type="submit"
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsStyle="default"
                            className="c3"
                            disabled={false}
                            style={
                              Object {
                                "marginLeft": 5,
                              }
                            }
                            type="submit"
                          >
                            <button
                              className="c3 btn btn-default"
                              disabled={false}
                              style={
                                Object {
                                  "marginLeft": 5,
                                }
                              }
                              type="submit"
                            >
                              Filter
                            </button>
                          </Button>
                        </Button>
                        <Button
                          disabled={true}
                          onClick={[Function]}
                          style={
                            Object {
                              "marginLeft": 5,
                            }
                          }
                          type="button"
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsStyle="default"
                            className="c3"
                            disabled={true}
                            onClick={[Function]}
                            style={
                              Object {
                                "marginLeft": 5,
                              }
                            }
                            type="button"
                          >
                            <button
                              className="c3 btn btn-default"
                              disabled={true}
                              onClick={[Function]}
                              style={
                                Object {
                                  "marginLeft": 5,
                                }
                              }
                              type="button"
                            >
                              Reset
                            </button>
                          </Button>
                        </Button>
                      </form>
                      <ul
                        className="pill-list"
                      >
                        <Component />
                      </ul>
                    </div>
                  </TypeAheadDataFilter>
                </div>
              </Col>
            </div>
          </Row>
        </Row>
        <ControlledTableList>
          <div>
            <ListGroup>
              <ListGroup
                bsClass="list-group"
              >
                <div
                  className="list-group"
                >
                  <ControlledTableListHeader>
                    <ControlledTableListHeader__StyledListGroupItem>
                      <ForwardRef
                        className="c4"
                      >
                        <ListGroupItem__StyledListGroupItem
                          className="c4"
                        >
                          <ListGroupItem
                            bsClass="list-group-item"
                            className="c5 c4"
                            listItem={false}
                          >
                            <span
                              className="c5 c4 list-group-item"
                            >
                              <ControlledTableListHeader__HeaderWrapper>
                                <div
                                  className="c6"
                                />
                              </ControlledTableListHeader__HeaderWrapper>
                            </span>
                          </ListGroupItem>
                        </ListGroupItem__StyledListGroupItem>
                      </ForwardRef>
                    </ControlledTableListHeader__StyledListGroupItem>
                  </ControlledTableListHeader>
                  <ControlledTableListItem
                    key="item-beef2001"
                  >
                    <ForwardRef>
                      <ListGroupItem__StyledListGroupItem>
                        <ListGroupItem
                          bsClass="list-group-item"
                          className="c5"
                          listItem={false}
                        >
                          <span
                            className="c5 list-group-item"
                          >
                            <div
                              className="itemWrapper itemWrapperStatic"
                            >
                              <div
                                className="itemActionsWrapper"
                              >
                                <ButtonGroup
                                  block={false}
                                  bsClass="btn-group"
                                  justified={false}
                                  vertical={false}
                                >
                                  <div
                                    className="btn-group"
                                  >
                                    <clipboard-button
                                      bsSize="xsmall"
                                      text="beef2001"
                                      title="Copy to clipboard"
                                    />
                                    <Button
                                      bsSize="xsmall"
                                      bsStyle="primary"
                                      disabled={false}
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="xsmall"
                                        bsStyle="primary"
                                        className="c3"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c3 btn btn-xs btn-primary"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Delete
                                        </button>
                                      </Button>
                                    </Button>
                                  </div>
                                </ButtonGroup>
                              </div>
                              <div
                                className="header"
                                id="token-input"
                              >
                                Acme
                              </div>
                            </div>
                          </span>
                        </ListGroupItem>
                      </ListGroupItem__StyledListGroupItem>
                    </ForwardRef>
                  </ControlledTableListItem>
                  <ControlledTableListItem
                    key="item-beef2002"
                  >
                    <ForwardRef>
                      <ListGroupItem__StyledListGroupItem>
                        <ListGroupItem
                          bsClass="list-group-item"
                          className="c5"
                          listItem={false}
                        >
                          <span
                            className="c5 list-group-item"
                          >
                            <div
                              className="itemWrapper itemWrapperStatic"
                            >
                              <div
                                className="itemActionsWrapper"
                              >
                                <ButtonGroup
                                  block={false}
                                  bsClass="btn-group"
                                  justified={false}
                                  vertical={false}
                                >
                                  <div
                                    className="btn-group"
                                  >
                                    <clipboard-button
                                      bsSize="xsmall"
                                      text="beef2002"
                                      title="Copy to clipboard"
                                    />
                                    <Button
                                      bsSize="xsmall"
                                      bsStyle="primary"
                                      disabled={false}
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="xsmall"
                                        bsStyle="primary"
                                        className="c3"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c3 btn btn-xs btn-primary"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Delete
                                        </button>
                                      </Button>
                                    </Button>
                                  </div>
                                </ButtonGroup>
                              </div>
                              <div
                                className="header"
                                id="token-input"
                              >
                                Hamfred
                              </div>
                            </div>
                          </span>
                        </ListGroupItem>
                      </ListGroupItem__StyledListGroupItem>
                    </ForwardRef>
                  </ControlledTableListItem>
                </div>
              </ListGroup>
            </ListGroup>
          </div>
        </ControlledTableList>
      </div>
    </TableList>
    <Checkbox
      bsClass="checkbox"
      checked={true}
      disabled={false}
      id="hide-tokens"
      inline={false}
      onChange={[Function]}
      title=""
    >
      <div
        className="checkbox"
      >
        <label
          title=""
        >
          <input
            checked={true}
            disabled={false}
            id="hide-tokens"
            onChange={[Function]}
            type="checkbox"
          />
          Hide Tokens
        </label>
      </div>
    </Checkbox>
  </span>
</TokenList>
`;
