import React from 'react';
import PropTypes from 'prop-types';
import lodash from 'lodash';
import { Button, Col, Row } from 'react-bootstrap';

import FieldForm from './FieldForm';

import commonStyles from '../common/commonStyles.css';

class FieldsForm extends React.Component {
  static propTypes = {
    alertDefinition: PropTypes.object.isRequired,
    onChange: PropTypes.func.isRequired,
  };

  addCustomField = () => {
    const { alertDefinition, onChange } = this.props;
    const nextFieldSpec = Object.assign({}, alertDefinition.field_spec, { '': {} });
    onChange('field_spec', nextFieldSpec);
  };

  handleFieldChange = (fieldName, key, value) => {
    const { alertDefinition, onChange } = this.props;
    if (key === 'keys') {
      onChange('key_spec', value);
    } else {
      let nextFieldSpec;

      if (key === 'config') {
        nextFieldSpec = lodash.cloneDeep(alertDefinition.field_spec);
        nextFieldSpec[fieldName] = value;
      } else if (key === 'fieldName') {
        const config = alertDefinition.field_spec[fieldName];
        nextFieldSpec = lodash.omit(alertDefinition.field_spec, fieldName);
        nextFieldSpec[value] = config;
      }

      onChange('field_spec', nextFieldSpec);
    }
  };

  render() {
    const { alertDefinition } = this.props;

    return (
      <Row>
        <Col md={12}>
          <h2 className={commonStyles.title}>Event Fields</h2>
          <p>
            Define Fields that will be stored in Events generated by this Alert Definition. Those Fields can also be
            used in Alert Notifications.
          </p>

          {Object.entries(alertDefinition.field_spec).map(([fieldName, config], idx) => {
            return (
              // Cannot use fieldName as key, since changing it will remove focus from the input. For now this was
              // the easiest way of working around that issue.
              // eslint-disable-next-line react/no-array-index-key
              <FieldForm key={`${alertDefinition.title}-field-${idx}`}
                         fieldName={fieldName}
                         config={config}
                         keys={alertDefinition.key_spec}
                         onChange={this.handleFieldChange} />
            );
          })}

          <Button bsStyle="success" onClick={this.addCustomField}>Add Custom Field</Button>
        </Col>
      </Row>
    );
  }
}

export default FieldsForm;
