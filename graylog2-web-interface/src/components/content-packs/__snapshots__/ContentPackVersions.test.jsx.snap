// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackVersions /> should render with content pack versions 1`] = `
.c1.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c1.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c1.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c1.btn-danger[disabled],
.c1.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-danger[disabled]:hover,
.c1.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c1.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c1.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c1.btn-default[disabled],
.c1.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-default[disabled]:hover,
.c1.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c1.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c1.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c1.btn-info[disabled],
.c1.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-info[disabled]:hover,
.c1.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c1.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c1.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c1.btn-link[disabled],
.c1.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-link[disabled]:hover,
.c1.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c1.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c1.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c1.btn-primary[disabled],
.c1.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-primary[disabled]:hover,
.c1.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c1.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c1.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c1.btn-success[disabled],
.c1.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-success[disabled]:hover,
.c1.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c1.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c1.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c1.btn-warning[disabled],
.c1.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.btn-warning[disabled]:hover,
.c1.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c2 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c2 ~ .dropdown-menu > li > a:hover,
.c2 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c2 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c2 ~ .dropdown-menu > .active > a:hover,
.c2 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c2 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c2 ~ .dropdown-menu > .disabled > a:hover,
.c2 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c3 form {
  margin-bottom: 0;
}

.c3 .modal-dialog {
  margin-top: 55px;
}

.c3 .modal-dialog .modal-content {
  background-color: #fff;
  border-color: #a6a6a6;
}

.c3 .modal-header {
  border-bottom-color: #a6a6a6;
}

.c3 .modal-header button.close {
  color: currentColor;
}

.c3 .modal-footer {
  border-top-color: #a6a6a6;
}

.c3 .modal-title {
  font-size: 1.424rem;
}

.c3 .modal-body .form-group {
  margin-bottom: 5px;
}

.c0.table > thead > tr > th,
.c0.table > tbody > tr > th,
.c0.table > tfoot > tr > th,
.c0.table > thead > tr > td,
.c0.table > tbody > tr > td,
.c0.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c0.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c0.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c0.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c0.table .table {
  background-color: #fafafa;
}

.c0.table-bordered {
  border-color: #f0f0f0;
}

.c0.table-bordered > thead > tr > td,
.c0.table-bordered > tfoot > tr > td,
.c0.table-bordered > tbody > tr > td,
.c0.table-bordered > thead > tr > th,
.c0.table-bordered > tfoot > tr > th,
.c0.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c0.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c0.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c0.table > thead > tr > td.active,
.c0.table > tfoot > tr > td.active,
.c0.table > tbody > tr > td.active,
.c0.table > thead > tr > th.active,
.c0.table > tfoot > tr > th.active,
.c0.table > tbody > tr > th.active,
.c0.table > thead > tr.active > td,
.c0.table > tfoot > tr.active > td,
.c0.table > tbody > tr.active > td,
.c0.table > thead > tr.active > th,
.c0.table > tfoot > tr.active > th,
.c0.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c0.table-hover > tbody > tr > td.active:hover,
.c0.table-hover > tbody > tr > th.active:hover,
.c0.table-hover > tbody > tr.active:hover > td,
.c0.table-hover > tbody > tr:hover > .active,
.c0.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c0.table > thead > tr > td.success,
.c0.table > tfoot > tr > td.success,
.c0.table > tbody > tr > td.success,
.c0.table > thead > tr > th.success,
.c0.table > tfoot > tr > th.success,
.c0.table > tbody > tr > th.success,
.c0.table > thead > tr.success > td,
.c0.table > tfoot > tr.success > td,
.c0.table > tbody > tr.success > td,
.c0.table > thead > tr.success > th,
.c0.table > tfoot > tr.success > th,
.c0.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c0.table-hover > tbody > tr > td.success:hover,
.c0.table-hover > tbody > tr > th.success:hover,
.c0.table-hover > tbody > tr.success:hover > td,
.c0.table-hover > tbody > tr:hover > .success,
.c0.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c0.table > thead > tr > td.info,
.c0.table > tfoot > tr > td.info,
.c0.table > tbody > tr > td.info,
.c0.table > thead > tr > th.info,
.c0.table > tfoot > tr > th.info,
.c0.table > tbody > tr > th.info,
.c0.table > thead > tr.info > td,
.c0.table > tfoot > tr.info > td,
.c0.table > tbody > tr.info > td,
.c0.table > thead > tr.info > th,
.c0.table > tfoot > tr.info > th,
.c0.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c0.table-hover > tbody > tr > td.info:hover,
.c0.table-hover > tbody > tr > th.info:hover,
.c0.table-hover > tbody > tr.info:hover > td,
.c0.table-hover > tbody > tr:hover > .info,
.c0.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c0.table > thead > tr > td.warning,
.c0.table > tfoot > tr > td.warning,
.c0.table > tbody > tr > td.warning,
.c0.table > thead > tr > th.warning,
.c0.table > tfoot > tr > th.warning,
.c0.table > tbody > tr > th.warning,
.c0.table > thead > tr.warning > td,
.c0.table > tfoot > tr.warning > td,
.c0.table > tbody > tr.warning > td,
.c0.table > thead > tr.warning > th,
.c0.table > tfoot > tr.warning > th,
.c0.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c0.table-hover > tbody > tr > td.warning:hover,
.c0.table-hover > tbody > tr > th.warning:hover,
.c0.table-hover > tbody > tr.warning:hover > td,
.c0.table-hover > tbody > tr:hover > .warning,
.c0.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c0.table > thead > tr > td.danger,
.c0.table > tfoot > tr > td.danger,
.c0.table > tbody > tr > td.danger,
.c0.table > thead > tr > th.danger,
.c0.table > tfoot > tr > th.danger,
.c0.table > tbody > tr > th.danger,
.c0.table > thead > tr.danger > td,
.c0.table > tfoot > tr.danger > td,
.c0.table > tbody > tr.danger > td,
.c0.table > thead > tr.danger > th,
.c0.table > tfoot > tr.danger > th,
.c0.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c0.table-hover > tbody > tr > td.danger:hover,
.c0.table-hover > tbody > tr > th.danger:hover,
.c0.table-hover > tbody > tr.danger:hover > td,
.c0.table-hover > tbody > tr:hover > .danger,
.c0.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

<ContentPackVersions
  contentPackRevisions={
    ContentPackRevisions {
      "_value": Object {
        "1": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 1,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        "2": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 2,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        "3": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 3,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        "4": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 4,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
      },
    }
  }
  onChange={[Function]}
  onDeletePack={[Function]}
  onInstall={[Function]}
>
  <DataTable
    className=""
    dataRowFormatter={[Function]}
    displayKey="value"
    filterBy=""
    filterKeys={Array []}
    filterLabel="Filter"
    filterSuggestions={Array []}
    headerCellFormatter={[Function]}
    headers={
      Array [
        "Select",
        "Revision",
        "Action",
      ]
    }
    id="content-packs-versions"
    noDataText="No data available."
    rowClassName=""
    rows={
      Array [
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 1,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 2,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 3,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 4,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
      ]
    }
    sortBy={[Function]}
    useResponsiveTable={true}
  >
    <div>
      <div
        className="row "
      >
        <div
          className="col-md-12"
        >
          <div
            className="data-table table-responsive"
            id="content-packs-versions"
          >
            <DataTable__StyledTable
              className="table "
            >
              <table
                className="c0 table "
              >
                <thead>
                  <tr>
                    <DataTableElement
                      element="Select"
                      formatter={[Function]}
                      index={0}
                      key="header-0"
                    >
                      <th>
                        Select
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Revision"
                      formatter={[Function]}
                      index={1}
                      key="header-1"
                    >
                      <th>
                        Revision
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Action"
                      formatter={[Function]}
                      index={2}
                      key="header-2"
                    >
                      <th
                        className="text-right"
                      >
                        Action
                      </th>
                    </DataTableElement>
                  </tr>
                </thead>
                <tbody>
                  <DataTableElement
                    element={
                      Object {
                        "description": "Grok Patterns to extract informations from UFW logfiles",
                        "entities": Array [],
                        "id": "1",
                        "name": "UFW Grok Patterns",
                        "parameters": Array [],
                        "rev": 1,
                        "summary": "This is a summary",
                        "url": "www.graylog.com",
                        "v": 1,
                        "vendor": "graylog.com",
                      }
                    }
                    formatter={[Function]}
                    index={0}
                    key="row-0"
                  >
                    <tr
                      key="11"
                    >
                      <td>
                        <input
                          checked={false}
                          onChange={[Function]}
                          type="radio"
                          value={1}
                        />
                      </td>
                      <td>
                        1
                      </td>
                      <td
                        className="text-right"
                      >
                        <ButtonToolbar
                          bsClass="btn-toolbar"
                          className="pull-right"
                        >
                          <div
                            className="pull-right btn-toolbar"
                            role="toolbar"
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsSize="small"
                                bsStyle="success"
                                className="c1"
                                disabled={false}
                                onClick={[Function]}
                              >
                                <button
                                  className="c1 btn btn-sm btn-success"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Download
                                </button>
                              </Button>
                            </Button>
                            <DropdownButton
                              bsSize="small"
                              bsStyle="info"
                              id="action-1"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="c2"
                                id="action-1"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-1"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-1"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-1"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="c2"
                                            id="action-1"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="c2 dropdown-toggle"
                                              disabled={false}
                                              id="action-1"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="c2 dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-1"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-1"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-1"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/1/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <Modal
                                                      animation={true}
                                                      autoFocus={true}
                                                      backdrop="static"
                                                      bsClass="modal"
                                                      bsSize="large"
                                                      className="c3"
                                                      dialogComponentClass={[Function]}
                                                      enforceFocus={true}
                                                      keyboard={true}
                                                      manager={
                                                        ModalManager {
                                                          "add": [Function],
                                                          "containers": Array [],
                                                          "data": Array [],
                                                          "handleContainerOverflow": true,
                                                          "hideSiblingNodes": true,
                                                          "isTopModal": [Function],
                                                          "modals": Array [],
                                                          "remove": [Function],
                                                        }
                                                      }
                                                      onHide={[Function]}
                                                      renderBackdrop={[Function]}
                                                      restoreFocus={true}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        backdropClassName="modal-backdrop"
                                                        backdropTransition={[Function]}
                                                        containerClassName="modal-open"
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onEntering={[Function]}
                                                        onExited={[Function]}
                                                        onHide={[Function]}
                                                        onMouseUp={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                        transition={[Function]}
                                                      />
                                                    </Modal>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </DropdownButton>
                          </div>
                        </ButtonToolbar>
                      </td>
                      <ContentPackDownloadControl
                        contentPackId="1"
                        revision={1}
                      >
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c3"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                      </ContentPackDownloadControl>
                    </tr>
                  </DataTableElement>
                  <DataTableElement
                    element={
                      Object {
                        "description": "Grok Patterns to extract informations from UFW logfiles",
                        "entities": Array [],
                        "id": "1",
                        "name": "UFW Grok Patterns",
                        "parameters": Array [],
                        "rev": 2,
                        "summary": "This is a summary",
                        "url": "www.graylog.com",
                        "v": 1,
                        "vendor": "graylog.com",
                      }
                    }
                    formatter={[Function]}
                    index={1}
                    key="row-1"
                  >
                    <tr
                      key="12"
                    >
                      <td>
                        <input
                          checked={false}
                          onChange={[Function]}
                          type="radio"
                          value={2}
                        />
                      </td>
                      <td>
                        2
                      </td>
                      <td
                        className="text-right"
                      >
                        <ButtonToolbar
                          bsClass="btn-toolbar"
                          className="pull-right"
                        >
                          <div
                            className="pull-right btn-toolbar"
                            role="toolbar"
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsSize="small"
                                bsStyle="success"
                                className="c1"
                                disabled={false}
                                onClick={[Function]}
                              >
                                <button
                                  className="c1 btn btn-sm btn-success"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Download
                                </button>
                              </Button>
                            </Button>
                            <DropdownButton
                              bsSize="small"
                              bsStyle="info"
                              id="action-2"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="c2"
                                id="action-2"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-2"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-2"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-2"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="c2"
                                            id="action-2"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="c2 dropdown-toggle"
                                              disabled={false}
                                              id="action-2"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="c2 dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-2"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-2"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-2"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/2/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <Modal
                                                      animation={true}
                                                      autoFocus={true}
                                                      backdrop="static"
                                                      bsClass="modal"
                                                      bsSize="large"
                                                      className="c3"
                                                      dialogComponentClass={[Function]}
                                                      enforceFocus={true}
                                                      keyboard={true}
                                                      manager={
                                                        ModalManager {
                                                          "add": [Function],
                                                          "containers": Array [],
                                                          "data": Array [],
                                                          "handleContainerOverflow": true,
                                                          "hideSiblingNodes": true,
                                                          "isTopModal": [Function],
                                                          "modals": Array [],
                                                          "remove": [Function],
                                                        }
                                                      }
                                                      onHide={[Function]}
                                                      renderBackdrop={[Function]}
                                                      restoreFocus={true}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        backdropClassName="modal-backdrop"
                                                        backdropTransition={[Function]}
                                                        containerClassName="modal-open"
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onEntering={[Function]}
                                                        onExited={[Function]}
                                                        onHide={[Function]}
                                                        onMouseUp={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                        transition={[Function]}
                                                      />
                                                    </Modal>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </DropdownButton>
                          </div>
                        </ButtonToolbar>
                      </td>
                      <ContentPackDownloadControl
                        contentPackId="1"
                        revision={2}
                      >
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c3"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                      </ContentPackDownloadControl>
                    </tr>
                  </DataTableElement>
                  <DataTableElement
                    element={
                      Object {
                        "description": "Grok Patterns to extract informations from UFW logfiles",
                        "entities": Array [],
                        "id": "1",
                        "name": "UFW Grok Patterns",
                        "parameters": Array [],
                        "rev": 3,
                        "summary": "This is a summary",
                        "url": "www.graylog.com",
                        "v": 1,
                        "vendor": "graylog.com",
                      }
                    }
                    formatter={[Function]}
                    index={2}
                    key="row-2"
                  >
                    <tr
                      key="13"
                    >
                      <td>
                        <input
                          checked={false}
                          onChange={[Function]}
                          type="radio"
                          value={3}
                        />
                      </td>
                      <td>
                        3
                      </td>
                      <td
                        className="text-right"
                      >
                        <ButtonToolbar
                          bsClass="btn-toolbar"
                          className="pull-right"
                        >
                          <div
                            className="pull-right btn-toolbar"
                            role="toolbar"
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsSize="small"
                                bsStyle="success"
                                className="c1"
                                disabled={false}
                                onClick={[Function]}
                              >
                                <button
                                  className="c1 btn btn-sm btn-success"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Download
                                </button>
                              </Button>
                            </Button>
                            <DropdownButton
                              bsSize="small"
                              bsStyle="info"
                              id="action-3"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="c2"
                                id="action-3"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-3"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-3"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-3"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="c2"
                                            id="action-3"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="c2 dropdown-toggle"
                                              disabled={false}
                                              id="action-3"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="c2 dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-3"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-3"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-3"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/3/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <Modal
                                                      animation={true}
                                                      autoFocus={true}
                                                      backdrop="static"
                                                      bsClass="modal"
                                                      bsSize="large"
                                                      className="c3"
                                                      dialogComponentClass={[Function]}
                                                      enforceFocus={true}
                                                      keyboard={true}
                                                      manager={
                                                        ModalManager {
                                                          "add": [Function],
                                                          "containers": Array [],
                                                          "data": Array [],
                                                          "handleContainerOverflow": true,
                                                          "hideSiblingNodes": true,
                                                          "isTopModal": [Function],
                                                          "modals": Array [],
                                                          "remove": [Function],
                                                        }
                                                      }
                                                      onHide={[Function]}
                                                      renderBackdrop={[Function]}
                                                      restoreFocus={true}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        backdropClassName="modal-backdrop"
                                                        backdropTransition={[Function]}
                                                        containerClassName="modal-open"
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onEntering={[Function]}
                                                        onExited={[Function]}
                                                        onHide={[Function]}
                                                        onMouseUp={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                        transition={[Function]}
                                                      />
                                                    </Modal>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </DropdownButton>
                          </div>
                        </ButtonToolbar>
                      </td>
                      <ContentPackDownloadControl
                        contentPackId="1"
                        revision={3}
                      >
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c3"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                      </ContentPackDownloadControl>
                    </tr>
                  </DataTableElement>
                  <DataTableElement
                    element={
                      Object {
                        "description": "Grok Patterns to extract informations from UFW logfiles",
                        "entities": Array [],
                        "id": "1",
                        "name": "UFW Grok Patterns",
                        "parameters": Array [],
                        "rev": 4,
                        "summary": "This is a summary",
                        "url": "www.graylog.com",
                        "v": 1,
                        "vendor": "graylog.com",
                      }
                    }
                    formatter={[Function]}
                    index={3}
                    key="row-3"
                  >
                    <tr
                      key="14"
                    >
                      <td>
                        <input
                          checked={true}
                          onChange={[Function]}
                          type="radio"
                          value={4}
                        />
                      </td>
                      <td>
                        4
                      </td>
                      <td
                        className="text-right"
                      >
                        <ButtonToolbar
                          bsClass="btn-toolbar"
                          className="pull-right"
                        >
                          <div
                            className="pull-right btn-toolbar"
                            role="toolbar"
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsSize="small"
                                bsStyle="success"
                                className="c1"
                                disabled={false}
                                onClick={[Function]}
                              >
                                <button
                                  className="c1 btn btn-sm btn-success"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Download
                                </button>
                              </Button>
                            </Button>
                            <DropdownButton
                              bsSize="small"
                              bsStyle="info"
                              id="action-4"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="c2"
                                id="action-4"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-4"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-4"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-4"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="c2"
                                            id="action-4"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="c2 dropdown-toggle"
                                              disabled={false}
                                              id="action-4"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="c2 dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-4"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-4"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-4"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/4/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <Modal
                                                      animation={true}
                                                      autoFocus={true}
                                                      backdrop="static"
                                                      bsClass="modal"
                                                      bsSize="large"
                                                      className="c3"
                                                      dialogComponentClass={[Function]}
                                                      enforceFocus={true}
                                                      keyboard={true}
                                                      manager={
                                                        ModalManager {
                                                          "add": [Function],
                                                          "containers": Array [],
                                                          "data": Array [],
                                                          "handleContainerOverflow": true,
                                                          "hideSiblingNodes": true,
                                                          "isTopModal": [Function],
                                                          "modals": Array [],
                                                          "remove": [Function],
                                                        }
                                                      }
                                                      onHide={[Function]}
                                                      renderBackdrop={[Function]}
                                                      restoreFocus={true}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        backdropClassName="modal-backdrop"
                                                        backdropTransition={[Function]}
                                                        containerClassName="modal-open"
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onEntering={[Function]}
                                                        onExited={[Function]}
                                                        onHide={[Function]}
                                                        onMouseUp={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                        transition={[Function]}
                                                      />
                                                    </Modal>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </DropdownButton>
                          </div>
                        </ButtonToolbar>
                      </td>
                      <ContentPackDownloadControl
                        contentPackId="1"
                        revision={4}
                      >
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c3"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                      </ContentPackDownloadControl>
                    </tr>
                  </DataTableElement>
                </tbody>
              </table>
            </DataTable__StyledTable>
          </div>
        </div>
      </div>
    </div>
  </DataTable>
</ContentPackVersions>
`;
