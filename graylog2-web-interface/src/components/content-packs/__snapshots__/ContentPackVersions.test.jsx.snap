// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackVersions /> should render with content pack versions 1`] = `
<ContentPackVersions
  contentPackRevisions={
    ContentPackRevisions {
      "_value": Object {
        "1": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 1,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        "2": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 2,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        "3": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 3,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        "4": Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 4,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
      },
    }
  }
  onChange={[Function]}
  onDeletePack={[Function]}
  onInstall={[Function]}
>
  <DataTable
    className=""
    dataRowFormatter={[Function]}
    displayKey="value"
    filterBy=""
    filterKeys={Array []}
    filterLabel="Filter"
    filterSuggestions={Array []}
    headerCellFormatter={[Function]}
    headers={
      Array [
        "Select",
        "Revision",
        "Action",
      ]
    }
    id="content-packs-versions"
    noDataText="No data available."
    rowClassName=""
    rows={
      Array [
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 1,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 2,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 3,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
        Object {
          "description": "Grok Patterns to extract informations from UFW logfiles",
          "entities": Array [],
          "id": "1",
          "name": "UFW Grok Patterns",
          "parameters": Array [],
          "rev": 4,
          "summary": "This is a summary",
          "url": "www.graylog.com",
          "v": 1,
          "vendor": "graylog.com",
        },
      ]
    }
    sortBy={[Function]}
    useResponsiveTable={true}
  >
    <div>
      <div
        className="row "
      >
        <div
          className="col-md-12"
        >
          <div
            className="data-table table-responsive"
            id="content-packs-versions"
          >
            <table
              className="table "
            >
              <thead>
                <tr>
                  <DataTableElement
                    element="Select"
                    formatter={[Function]}
                    index={0}
                    key="header-0"
                  >
                    <th>
                      Select
                    </th>
                  </DataTableElement>
                  <DataTableElement
                    element="Revision"
                    formatter={[Function]}
                    index={1}
                    key="header-1"
                  >
                    <th>
                      Revision
                    </th>
                  </DataTableElement>
                  <DataTableElement
                    element="Action"
                    formatter={[Function]}
                    index={2}
                    key="header-2"
                  >
                    <th
                      className="text-right"
                    >
                      Action
                    </th>
                  </DataTableElement>
                </tr>
              </thead>
              <tbody>
                <DataTableElement
                  element={
                    Object {
                      "description": "Grok Patterns to extract informations from UFW logfiles",
                      "entities": Array [],
                      "id": "1",
                      "name": "UFW Grok Patterns",
                      "parameters": Array [],
                      "rev": 1,
                      "summary": "This is a summary",
                      "url": "www.graylog.com",
                      "v": 1,
                      "vendor": "graylog.com",
                    }
                  }
                  formatter={[Function]}
                  index={0}
                  key="row-0"
                >
                  <tr
                    key="11"
                  >
                    <td>
                      <input
                        checked={false}
                        onChange={[Function]}
                        type="radio"
                        value={1}
                      />
                    </td>
                    <td>
                      1
                    </td>
                    <td
                      className="text-right"
                    >
                      <ButtonToolbar
                        bsClass="btn-toolbar"
                        className="pull-right"
                      >
                        <div
                          className="pull-right btn-toolbar"
                          role="toolbar"
                        >
                          <ForwardRef
                            bsSize="small"
                            bsStyle="success"
                            onClick={[Function]}
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <StyledComponent
                                bsSize="small"
                                bsStyle="success"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "SIZES": Array [
                                      "large",
                                      "small",
                                      "xsmall",
                                    ],
                                    "STYLES": Array [
                                      "success",
                                      "warning",
                                      "danger",
                                      "info",
                                      "default",
                                      "primary",
                                      "link",
                                    ],
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Button-c9cbmb-0",
                                      "isStatic": false,
                                      "lastClassName": "jKsGyd",
                                      "rules": Array [
                                        [Function],
                                      ],
                                    },
                                    "displayName": "Button",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Button-c9cbmb-0",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="small"
                                  bsStyle="success"
                                  className="Button-c9cbmb-0 jKsGyd"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="Button-c9cbmb-0 jKsGyd btn btn-sm btn-success"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Download
                                  </button>
                                </Button>
                              </StyledComponent>
                            </Button>
                          </ForwardRef>
                          <DropdownButton
                            bsSize="small"
                            bsStyle="info"
                            id="action-1"
                            title="Actions"
                          >
                            <StyledComponent
                              bsSize="small"
                              bsStyle="info"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "DropdownButton-sc-1343dcx-0",
                                    "isStatic": false,
                                    "lastClassName": "iVkpkU",
                                    "rules": Array [
                                      [Function],
                                      ";",
                                      "& ~",
                                      " .dropdown-menu{> li > a{color:",
                                      "#1F1F1F",
                                      ";:hover,:focus{color:",
                                      "#484848",
                                      ";background-color:",
                                      "#F1F2F2",
                                      ";}}> .active > a{background-color:",
                                      "#6DC6E7",
                                      ";color:",
                                      "#f7fcfd",
                                      ";:hover,:focus{background-color:",
                                      "#16ACE3",
                                      ";color:",
                                      "#f3fafd",
                                      ";}}> .disabled > a{color:",
                                      "#8f8f8f",
                                      ";:hover,:focus{background-color:",
                                      "#F1F2F2",
                                      ";color:",
                                      "#b0b0b0",
                                      ";}}}",
                                      ";",
                                    ],
                                  },
                                  "displayName": "DropdownButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "DropdownButton-sc-1343dcx-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="action-1"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                id="action-1"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-1"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-1"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-1"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                            id="action-1"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle"
                                              disabled={false}
                                              id="action-1"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-1"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-1"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-1"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/1/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <StyledComponent
                                                      backdrop="static"
                                                      bsSize="large"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "BACKDROP_TRANSITION_DURATION": 150,
                                                          "Body": [Function],
                                                          "Dialog": [Function],
                                                          "Footer": [Function],
                                                          "Header": [Function],
                                                          "SIZES": Array [
                                                            "large",
                                                            "small",
                                                          ],
                                                          "TRANSITION_DURATION": 300,
                                                          "Title": [Function],
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Modal-nuree8-0",
                                                            "isStatic": true,
                                                            "lastClassName": "cHlGak",
                                                            "rules": Array [
                                                              ".modal-content{background-color:",
                                                              "#FFF",
                                                              ";border-color:",
                                                              "rgba(31,31,31,0.2)",
                                                              ";.modal-header{border-bottom-color:",
                                                              "#DCE1E5",
                                                              ";}.modal-footer{border-top-color:",
                                                              "#DCE1E5",
                                                              ";}}",
                                                            ],
                                                          },
                                                          "displayName": "Modal",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Modal-nuree8-0",
                                                          "target": [Function],
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onHide={[Function]}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        animation={true}
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        bsClass="modal"
                                                        bsSize="large"
                                                        className="Modal-nuree8-0 cHlGak"
                                                        dialogComponentClass={[Function]}
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onHide={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                      >
                                                        <Modal
                                                          autoFocus={true}
                                                          backdrop="static"
                                                          backdropClassName="modal-backdrop"
                                                          backdropTransition={[Function]}
                                                          containerClassName="modal-open"
                                                          enforceFocus={true}
                                                          keyboard={true}
                                                          manager={
                                                            ModalManager {
                                                              "add": [Function],
                                                              "containers": Array [],
                                                              "data": Array [],
                                                              "handleContainerOverflow": true,
                                                              "hideSiblingNodes": true,
                                                              "isTopModal": [Function],
                                                              "modals": Array [],
                                                              "remove": [Function],
                                                            }
                                                          }
                                                          onEntering={[Function]}
                                                          onExited={[Function]}
                                                          onHide={[Function]}
                                                          onMouseUp={[Function]}
                                                          renderBackdrop={[Function]}
                                                          restoreFocus={true}
                                                          show={false}
                                                          transition={[Function]}
                                                        />
                                                      </Modal>
                                                    </StyledComponent>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </StyledComponent>
                          </DropdownButton>
                        </div>
                      </ButtonToolbar>
                    </td>
                    <ContentPackDownloadControl
                      contentPackId="1"
                      revision={1}
                    >
                      <BootstrapModalWrapper
                        backdrop="static"
                        bsSize="large"
                        onClose={[Function]}
                        onHide={[Function]}
                        onOpen={[Function]}
                        showModal={false}
                      >
                        <Modal
                          backdrop="static"
                          bsSize="large"
                          onHide={[Function]}
                          show={false}
                        >
                          <StyledComponent
                            backdrop="static"
                            bsSize="large"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "BACKDROP_TRANSITION_DURATION": 150,
                                "Body": [Function],
                                "Dialog": [Function],
                                "Footer": [Function],
                                "Header": [Function],
                                "SIZES": Array [
                                  "large",
                                  "small",
                                ],
                                "TRANSITION_DURATION": 300,
                                "Title": [Function],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Modal-nuree8-0",
                                  "isStatic": true,
                                  "lastClassName": "cHlGak",
                                  "rules": Array [
                                    ".modal-content{background-color:",
                                    "#FFF",
                                    ";border-color:",
                                    "rgba(31,31,31,0.2)",
                                    ";.modal-header{border-bottom-color:",
                                    "#DCE1E5",
                                    ";}.modal-footer{border-top-color:",
                                    "#DCE1E5",
                                    ";}}",
                                  ],
                                },
                                "displayName": "Modal",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Modal-nuree8-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="Modal-nuree8-0 cHlGak"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </StyledComponent>
                        </Modal>
                      </BootstrapModalWrapper>
                    </ContentPackDownloadControl>
                  </tr>
                </DataTableElement>
                <DataTableElement
                  element={
                    Object {
                      "description": "Grok Patterns to extract informations from UFW logfiles",
                      "entities": Array [],
                      "id": "1",
                      "name": "UFW Grok Patterns",
                      "parameters": Array [],
                      "rev": 2,
                      "summary": "This is a summary",
                      "url": "www.graylog.com",
                      "v": 1,
                      "vendor": "graylog.com",
                    }
                  }
                  formatter={[Function]}
                  index={1}
                  key="row-1"
                >
                  <tr
                    key="12"
                  >
                    <td>
                      <input
                        checked={false}
                        onChange={[Function]}
                        type="radio"
                        value={2}
                      />
                    </td>
                    <td>
                      2
                    </td>
                    <td
                      className="text-right"
                    >
                      <ButtonToolbar
                        bsClass="btn-toolbar"
                        className="pull-right"
                      >
                        <div
                          className="pull-right btn-toolbar"
                          role="toolbar"
                        >
                          <ForwardRef
                            bsSize="small"
                            bsStyle="success"
                            onClick={[Function]}
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <StyledComponent
                                bsSize="small"
                                bsStyle="success"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "SIZES": Array [
                                      "large",
                                      "small",
                                      "xsmall",
                                    ],
                                    "STYLES": Array [
                                      "success",
                                      "warning",
                                      "danger",
                                      "info",
                                      "default",
                                      "primary",
                                      "link",
                                    ],
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Button-c9cbmb-0",
                                      "isStatic": false,
                                      "lastClassName": "jKsGyd",
                                      "rules": Array [
                                        [Function],
                                      ],
                                    },
                                    "displayName": "Button",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Button-c9cbmb-0",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="small"
                                  bsStyle="success"
                                  className="Button-c9cbmb-0 jKsGyd"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="Button-c9cbmb-0 jKsGyd btn btn-sm btn-success"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Download
                                  </button>
                                </Button>
                              </StyledComponent>
                            </Button>
                          </ForwardRef>
                          <DropdownButton
                            bsSize="small"
                            bsStyle="info"
                            id="action-2"
                            title="Actions"
                          >
                            <StyledComponent
                              bsSize="small"
                              bsStyle="info"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "DropdownButton-sc-1343dcx-0",
                                    "isStatic": false,
                                    "lastClassName": "iVkpkU",
                                    "rules": Array [
                                      [Function],
                                      ";",
                                      "& ~",
                                      " .dropdown-menu{> li > a{color:",
                                      "#1F1F1F",
                                      ";:hover,:focus{color:",
                                      "#484848",
                                      ";background-color:",
                                      "#F1F2F2",
                                      ";}}> .active > a{background-color:",
                                      "#6DC6E7",
                                      ";color:",
                                      "#f7fcfd",
                                      ";:hover,:focus{background-color:",
                                      "#16ACE3",
                                      ";color:",
                                      "#f3fafd",
                                      ";}}> .disabled > a{color:",
                                      "#8f8f8f",
                                      ";:hover,:focus{background-color:",
                                      "#F1F2F2",
                                      ";color:",
                                      "#b0b0b0",
                                      ";}}}",
                                      ";",
                                    ],
                                  },
                                  "displayName": "DropdownButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "DropdownButton-sc-1343dcx-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="action-2"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                id="action-2"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-2"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-2"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-2"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                            id="action-2"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle"
                                              disabled={false}
                                              id="action-2"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-2"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-2"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-2"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/2/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <StyledComponent
                                                      backdrop="static"
                                                      bsSize="large"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "BACKDROP_TRANSITION_DURATION": 150,
                                                          "Body": [Function],
                                                          "Dialog": [Function],
                                                          "Footer": [Function],
                                                          "Header": [Function],
                                                          "SIZES": Array [
                                                            "large",
                                                            "small",
                                                          ],
                                                          "TRANSITION_DURATION": 300,
                                                          "Title": [Function],
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Modal-nuree8-0",
                                                            "isStatic": true,
                                                            "lastClassName": "cHlGak",
                                                            "rules": Array [
                                                              ".modal-content{background-color:",
                                                              "#FFF",
                                                              ";border-color:",
                                                              "rgba(31,31,31,0.2)",
                                                              ";.modal-header{border-bottom-color:",
                                                              "#DCE1E5",
                                                              ";}.modal-footer{border-top-color:",
                                                              "#DCE1E5",
                                                              ";}}",
                                                            ],
                                                          },
                                                          "displayName": "Modal",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Modal-nuree8-0",
                                                          "target": [Function],
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onHide={[Function]}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        animation={true}
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        bsClass="modal"
                                                        bsSize="large"
                                                        className="Modal-nuree8-0 cHlGak"
                                                        dialogComponentClass={[Function]}
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onHide={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                      >
                                                        <Modal
                                                          autoFocus={true}
                                                          backdrop="static"
                                                          backdropClassName="modal-backdrop"
                                                          backdropTransition={[Function]}
                                                          containerClassName="modal-open"
                                                          enforceFocus={true}
                                                          keyboard={true}
                                                          manager={
                                                            ModalManager {
                                                              "add": [Function],
                                                              "containers": Array [],
                                                              "data": Array [],
                                                              "handleContainerOverflow": true,
                                                              "hideSiblingNodes": true,
                                                              "isTopModal": [Function],
                                                              "modals": Array [],
                                                              "remove": [Function],
                                                            }
                                                          }
                                                          onEntering={[Function]}
                                                          onExited={[Function]}
                                                          onHide={[Function]}
                                                          onMouseUp={[Function]}
                                                          renderBackdrop={[Function]}
                                                          restoreFocus={true}
                                                          show={false}
                                                          transition={[Function]}
                                                        />
                                                      </Modal>
                                                    </StyledComponent>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </StyledComponent>
                          </DropdownButton>
                        </div>
                      </ButtonToolbar>
                    </td>
                    <ContentPackDownloadControl
                      contentPackId="1"
                      revision={2}
                    >
                      <BootstrapModalWrapper
                        backdrop="static"
                        bsSize="large"
                        onClose={[Function]}
                        onHide={[Function]}
                        onOpen={[Function]}
                        showModal={false}
                      >
                        <Modal
                          backdrop="static"
                          bsSize="large"
                          onHide={[Function]}
                          show={false}
                        >
                          <StyledComponent
                            backdrop="static"
                            bsSize="large"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "BACKDROP_TRANSITION_DURATION": 150,
                                "Body": [Function],
                                "Dialog": [Function],
                                "Footer": [Function],
                                "Header": [Function],
                                "SIZES": Array [
                                  "large",
                                  "small",
                                ],
                                "TRANSITION_DURATION": 300,
                                "Title": [Function],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Modal-nuree8-0",
                                  "isStatic": true,
                                  "lastClassName": "cHlGak",
                                  "rules": Array [
                                    ".modal-content{background-color:",
                                    "#FFF",
                                    ";border-color:",
                                    "rgba(31,31,31,0.2)",
                                    ";.modal-header{border-bottom-color:",
                                    "#DCE1E5",
                                    ";}.modal-footer{border-top-color:",
                                    "#DCE1E5",
                                    ";}}",
                                  ],
                                },
                                "displayName": "Modal",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Modal-nuree8-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="Modal-nuree8-0 cHlGak"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </StyledComponent>
                        </Modal>
                      </BootstrapModalWrapper>
                    </ContentPackDownloadControl>
                  </tr>
                </DataTableElement>
                <DataTableElement
                  element={
                    Object {
                      "description": "Grok Patterns to extract informations from UFW logfiles",
                      "entities": Array [],
                      "id": "1",
                      "name": "UFW Grok Patterns",
                      "parameters": Array [],
                      "rev": 3,
                      "summary": "This is a summary",
                      "url": "www.graylog.com",
                      "v": 1,
                      "vendor": "graylog.com",
                    }
                  }
                  formatter={[Function]}
                  index={2}
                  key="row-2"
                >
                  <tr
                    key="13"
                  >
                    <td>
                      <input
                        checked={false}
                        onChange={[Function]}
                        type="radio"
                        value={3}
                      />
                    </td>
                    <td>
                      3
                    </td>
                    <td
                      className="text-right"
                    >
                      <ButtonToolbar
                        bsClass="btn-toolbar"
                        className="pull-right"
                      >
                        <div
                          className="pull-right btn-toolbar"
                          role="toolbar"
                        >
                          <ForwardRef
                            bsSize="small"
                            bsStyle="success"
                            onClick={[Function]}
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <StyledComponent
                                bsSize="small"
                                bsStyle="success"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "SIZES": Array [
                                      "large",
                                      "small",
                                      "xsmall",
                                    ],
                                    "STYLES": Array [
                                      "success",
                                      "warning",
                                      "danger",
                                      "info",
                                      "default",
                                      "primary",
                                      "link",
                                    ],
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Button-c9cbmb-0",
                                      "isStatic": false,
                                      "lastClassName": "jKsGyd",
                                      "rules": Array [
                                        [Function],
                                      ],
                                    },
                                    "displayName": "Button",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Button-c9cbmb-0",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="small"
                                  bsStyle="success"
                                  className="Button-c9cbmb-0 jKsGyd"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="Button-c9cbmb-0 jKsGyd btn btn-sm btn-success"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Download
                                  </button>
                                </Button>
                              </StyledComponent>
                            </Button>
                          </ForwardRef>
                          <DropdownButton
                            bsSize="small"
                            bsStyle="info"
                            id="action-3"
                            title="Actions"
                          >
                            <StyledComponent
                              bsSize="small"
                              bsStyle="info"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "DropdownButton-sc-1343dcx-0",
                                    "isStatic": false,
                                    "lastClassName": "iVkpkU",
                                    "rules": Array [
                                      [Function],
                                      ";",
                                      "& ~",
                                      " .dropdown-menu{> li > a{color:",
                                      "#1F1F1F",
                                      ";:hover,:focus{color:",
                                      "#484848",
                                      ";background-color:",
                                      "#F1F2F2",
                                      ";}}> .active > a{background-color:",
                                      "#6DC6E7",
                                      ";color:",
                                      "#f7fcfd",
                                      ";:hover,:focus{background-color:",
                                      "#16ACE3",
                                      ";color:",
                                      "#f3fafd",
                                      ";}}> .disabled > a{color:",
                                      "#8f8f8f",
                                      ";:hover,:focus{background-color:",
                                      "#F1F2F2",
                                      ";color:",
                                      "#b0b0b0",
                                      ";}}}",
                                      ";",
                                    ],
                                  },
                                  "displayName": "DropdownButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "DropdownButton-sc-1343dcx-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="action-3"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                id="action-3"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-3"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-3"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-3"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                            id="action-3"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle"
                                              disabled={false}
                                              id="action-3"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-3"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-3"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-3"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/3/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <StyledComponent
                                                      backdrop="static"
                                                      bsSize="large"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "BACKDROP_TRANSITION_DURATION": 150,
                                                          "Body": [Function],
                                                          "Dialog": [Function],
                                                          "Footer": [Function],
                                                          "Header": [Function],
                                                          "SIZES": Array [
                                                            "large",
                                                            "small",
                                                          ],
                                                          "TRANSITION_DURATION": 300,
                                                          "Title": [Function],
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Modal-nuree8-0",
                                                            "isStatic": true,
                                                            "lastClassName": "cHlGak",
                                                            "rules": Array [
                                                              ".modal-content{background-color:",
                                                              "#FFF",
                                                              ";border-color:",
                                                              "rgba(31,31,31,0.2)",
                                                              ";.modal-header{border-bottom-color:",
                                                              "#DCE1E5",
                                                              ";}.modal-footer{border-top-color:",
                                                              "#DCE1E5",
                                                              ";}}",
                                                            ],
                                                          },
                                                          "displayName": "Modal",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Modal-nuree8-0",
                                                          "target": [Function],
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onHide={[Function]}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        animation={true}
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        bsClass="modal"
                                                        bsSize="large"
                                                        className="Modal-nuree8-0 cHlGak"
                                                        dialogComponentClass={[Function]}
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onHide={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                      >
                                                        <Modal
                                                          autoFocus={true}
                                                          backdrop="static"
                                                          backdropClassName="modal-backdrop"
                                                          backdropTransition={[Function]}
                                                          containerClassName="modal-open"
                                                          enforceFocus={true}
                                                          keyboard={true}
                                                          manager={
                                                            ModalManager {
                                                              "add": [Function],
                                                              "containers": Array [],
                                                              "data": Array [],
                                                              "handleContainerOverflow": true,
                                                              "hideSiblingNodes": true,
                                                              "isTopModal": [Function],
                                                              "modals": Array [],
                                                              "remove": [Function],
                                                            }
                                                          }
                                                          onEntering={[Function]}
                                                          onExited={[Function]}
                                                          onHide={[Function]}
                                                          onMouseUp={[Function]}
                                                          renderBackdrop={[Function]}
                                                          restoreFocus={true}
                                                          show={false}
                                                          transition={[Function]}
                                                        />
                                                      </Modal>
                                                    </StyledComponent>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </StyledComponent>
                          </DropdownButton>
                        </div>
                      </ButtonToolbar>
                    </td>
                    <ContentPackDownloadControl
                      contentPackId="1"
                      revision={3}
                    >
                      <BootstrapModalWrapper
                        backdrop="static"
                        bsSize="large"
                        onClose={[Function]}
                        onHide={[Function]}
                        onOpen={[Function]}
                        showModal={false}
                      >
                        <Modal
                          backdrop="static"
                          bsSize="large"
                          onHide={[Function]}
                          show={false}
                        >
                          <StyledComponent
                            backdrop="static"
                            bsSize="large"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "BACKDROP_TRANSITION_DURATION": 150,
                                "Body": [Function],
                                "Dialog": [Function],
                                "Footer": [Function],
                                "Header": [Function],
                                "SIZES": Array [
                                  "large",
                                  "small",
                                ],
                                "TRANSITION_DURATION": 300,
                                "Title": [Function],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Modal-nuree8-0",
                                  "isStatic": true,
                                  "lastClassName": "cHlGak",
                                  "rules": Array [
                                    ".modal-content{background-color:",
                                    "#FFF",
                                    ";border-color:",
                                    "rgba(31,31,31,0.2)",
                                    ";.modal-header{border-bottom-color:",
                                    "#DCE1E5",
                                    ";}.modal-footer{border-top-color:",
                                    "#DCE1E5",
                                    ";}}",
                                  ],
                                },
                                "displayName": "Modal",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Modal-nuree8-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="Modal-nuree8-0 cHlGak"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </StyledComponent>
                        </Modal>
                      </BootstrapModalWrapper>
                    </ContentPackDownloadControl>
                  </tr>
                </DataTableElement>
                <DataTableElement
                  element={
                    Object {
                      "description": "Grok Patterns to extract informations from UFW logfiles",
                      "entities": Array [],
                      "id": "1",
                      "name": "UFW Grok Patterns",
                      "parameters": Array [],
                      "rev": 4,
                      "summary": "This is a summary",
                      "url": "www.graylog.com",
                      "v": 1,
                      "vendor": "graylog.com",
                    }
                  }
                  formatter={[Function]}
                  index={3}
                  key="row-3"
                >
                  <tr
                    key="14"
                  >
                    <td>
                      <input
                        checked={true}
                        onChange={[Function]}
                        type="radio"
                        value={4}
                      />
                    </td>
                    <td>
                      4
                    </td>
                    <td
                      className="text-right"
                    >
                      <ButtonToolbar
                        bsClass="btn-toolbar"
                        className="pull-right"
                      >
                        <div
                          className="pull-right btn-toolbar"
                          role="toolbar"
                        >
                          <ForwardRef
                            bsSize="small"
                            bsStyle="success"
                            onClick={[Function]}
                          >
                            <Button
                              bsSize="small"
                              bsStyle="success"
                              onClick={[Function]}
                            >
                              <StyledComponent
                                bsSize="small"
                                bsStyle="success"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "SIZES": Array [
                                      "large",
                                      "small",
                                      "xsmall",
                                    ],
                                    "STYLES": Array [
                                      "success",
                                      "warning",
                                      "danger",
                                      "info",
                                      "default",
                                      "primary",
                                      "link",
                                    ],
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "Button-c9cbmb-0",
                                      "isStatic": false,
                                      "lastClassName": "jKsGyd",
                                      "rules": Array [
                                        [Function],
                                      ],
                                    },
                                    "displayName": "Button",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "Button-c9cbmb-0",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="small"
                                  bsStyle="success"
                                  className="Button-c9cbmb-0 jKsGyd"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="Button-c9cbmb-0 jKsGyd btn btn-sm btn-success"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Download
                                  </button>
                                </Button>
                              </StyledComponent>
                            </Button>
                          </ForwardRef>
                          <DropdownButton
                            bsSize="small"
                            bsStyle="info"
                            id="action-4"
                            title="Actions"
                          >
                            <StyledComponent
                              bsSize="small"
                              bsStyle="info"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "DropdownButton-sc-1343dcx-0",
                                    "isStatic": false,
                                    "lastClassName": "iVkpkU",
                                    "rules": Array [
                                      [Function],
                                      ";",
                                      "& ~",
                                      " .dropdown-menu{> li > a{color:",
                                      "#1F1F1F",
                                      ";:hover,:focus{color:",
                                      "#484848",
                                      ";background-color:",
                                      "#F1F2F2",
                                      ";}}> .active > a{background-color:",
                                      "#6DC6E7",
                                      ";color:",
                                      "#f7fcfd",
                                      ";:hover,:focus{background-color:",
                                      "#16ACE3",
                                      ";color:",
                                      "#f3fafd",
                                      ";}}> .disabled > a{color:",
                                      "#8f8f8f",
                                      ";:hover,:focus{background-color:",
                                      "#F1F2F2",
                                      ";color:",
                                      "#b0b0b0",
                                      ";}}}",
                                      ";",
                                    ],
                                  },
                                  "displayName": "DropdownButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "DropdownButton-sc-1343dcx-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="action-4"
                              title="Actions"
                            >
                              <DropdownButton
                                bsSize="small"
                                bsStyle="info"
                                className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                id="action-4"
                                title="Actions"
                              >
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  id="action-4"
                                >
                                  <Uncontrolled(Dropdown)
                                    bsSize="small"
                                    bsStyle="info"
                                    id="action-4"
                                    innerRef={null}
                                  >
                                    <Dropdown
                                      bsClass="dropdown"
                                      bsSize="small"
                                      bsStyle="info"
                                      componentClass={[Function]}
                                      id="action-4"
                                      onToggle={[Function]}
                                    >
                                      <ButtonGroup
                                        block={false}
                                        bsClass="btn-group"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="dropdown"
                                        justified={false}
                                        vertical={false}
                                      >
                                        <div
                                          className="dropdown btn-group btn-group-sm btn-group-info"
                                        >
                                          <DropdownToggle
                                            bsClass="dropdown-toggle"
                                            bsRole="toggle"
                                            bsSize="small"
                                            bsStyle="info"
                                            className="DropdownButton-sc-1343dcx-0 iVkpkU"
                                            id="action-4"
                                            key=".0"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            open={false}
                                            useAnchor={false}
                                          >
                                            <Button
                                              active={false}
                                              aria-expanded={false}
                                              aria-haspopup={true}
                                              block={false}
                                              bsClass="btn"
                                              bsSize="small"
                                              bsStyle="info"
                                              className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle"
                                              disabled={false}
                                              id="action-4"
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              role="button"
                                            >
                                              <button
                                                aria-expanded={false}
                                                aria-haspopup={true}
                                                className="DropdownButton-sc-1343dcx-0 iVkpkU dropdown-toggle btn btn-sm btn-info"
                                                disabled={false}
                                                id="action-4"
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                role="button"
                                                type="button"
                                              >
                                                Actions
                                                 
                                                <span
                                                  className="caret"
                                                />
                                              </button>
                                            </Button>
                                          </DropdownToggle>
                                          <DropdownMenu
                                            bsClass="dropdown-menu"
                                            bsRole="menu"
                                            key=".1"
                                            labelledBy="action-4"
                                            onClose={[Function]}
                                            onSelect={[Function]}
                                            pullRight={false}
                                          >
                                            <RootCloseWrapper
                                              disabled={true}
                                              event="click"
                                              onRootClose={[Function]}
                                            >
                                              <ul
                                                aria-labelledby="action-4"
                                                className="dropdown-menu"
                                                role="menu"
                                              >
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".0"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Install
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <LinkContainer
                                                  action="push"
                                                  key=".1"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                  onlyActiveOnIndex={false}
                                                  to="/system/contentpacks/1/4/edit"
                                                >
                                                  <MenuItem
                                                    action="push"
                                                    bsClass="dropdown"
                                                    disabled={false}
                                                    divider={false}
                                                    header={false}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onSelect={[Function]}
                                                  >
                                                    <li
                                                      className=""
                                                      role="presentation"
                                                    >
                                                      <SafeAnchor
                                                        action="push"
                                                        componentClass="a"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        <a
                                                          action="push"
                                                          href="#"
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="menuitem"
                                                          tabIndex="-1"
                                                        >
                                                          Create New From Revision
                                                        </a>
                                                      </SafeAnchor>
                                                    </li>
                                                  </MenuItem>
                                                </LinkContainer>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={true}
                                                  header={false}
                                                  key=".2"
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className="divider"
                                                    onKeyDown={[Function]}
                                                    role="separator"
                                                  />
                                                </MenuItem>
                                                <MenuItem
                                                  bsClass="dropdown"
                                                  disabled={false}
                                                  divider={false}
                                                  header={false}
                                                  key=".3"
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelect={[Function]}
                                                >
                                                  <li
                                                    className=""
                                                    role="presentation"
                                                  >
                                                    <SafeAnchor
                                                      componentClass="a"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="menuitem"
                                                      tabIndex="-1"
                                                    >
                                                      <a
                                                        href="#"
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        role="menuitem"
                                                        tabIndex="-1"
                                                      >
                                                        Delete
                                                      </a>
                                                    </SafeAnchor>
                                                  </li>
                                                </MenuItem>
                                                <BootstrapModalWrapper
                                                  backdrop="static"
                                                  bsSize="large"
                                                  key=".4"
                                                  onClose={[Function]}
                                                  onHide={[Function]}
                                                  onKeyDown={[Function]}
                                                  onOpen={[Function]}
                                                  onSelect={[Function]}
                                                  showModal={false}
                                                >
                                                  <Modal
                                                    backdrop="static"
                                                    bsSize="large"
                                                    onHide={[Function]}
                                                    show={false}
                                                  >
                                                    <StyledComponent
                                                      backdrop="static"
                                                      bsSize="large"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "BACKDROP_TRANSITION_DURATION": 150,
                                                          "Body": [Function],
                                                          "Dialog": [Function],
                                                          "Footer": [Function],
                                                          "Header": [Function],
                                                          "SIZES": Array [
                                                            "large",
                                                            "small",
                                                          ],
                                                          "TRANSITION_DURATION": 300,
                                                          "Title": [Function],
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "Modal-nuree8-0",
                                                            "isStatic": true,
                                                            "lastClassName": "cHlGak",
                                                            "rules": Array [
                                                              ".modal-content{background-color:",
                                                              "#FFF",
                                                              ";border-color:",
                                                              "rgba(31,31,31,0.2)",
                                                              ";.modal-header{border-bottom-color:",
                                                              "#DCE1E5",
                                                              ";}.modal-footer{border-top-color:",
                                                              "#DCE1E5",
                                                              ";}}",
                                                            ],
                                                          },
                                                          "displayName": "Modal",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "Modal-nuree8-0",
                                                          "target": [Function],
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                      onHide={[Function]}
                                                      show={false}
                                                    >
                                                      <Modal
                                                        animation={true}
                                                        autoFocus={true}
                                                        backdrop="static"
                                                        bsClass="modal"
                                                        bsSize="large"
                                                        className="Modal-nuree8-0 cHlGak"
                                                        dialogComponentClass={[Function]}
                                                        enforceFocus={true}
                                                        keyboard={true}
                                                        manager={
                                                          ModalManager {
                                                            "add": [Function],
                                                            "containers": Array [],
                                                            "data": Array [],
                                                            "handleContainerOverflow": true,
                                                            "hideSiblingNodes": true,
                                                            "isTopModal": [Function],
                                                            "modals": Array [],
                                                            "remove": [Function],
                                                          }
                                                        }
                                                        onHide={[Function]}
                                                        renderBackdrop={[Function]}
                                                        restoreFocus={true}
                                                        show={false}
                                                      >
                                                        <Modal
                                                          autoFocus={true}
                                                          backdrop="static"
                                                          backdropClassName="modal-backdrop"
                                                          backdropTransition={[Function]}
                                                          containerClassName="modal-open"
                                                          enforceFocus={true}
                                                          keyboard={true}
                                                          manager={
                                                            ModalManager {
                                                              "add": [Function],
                                                              "containers": Array [],
                                                              "data": Array [],
                                                              "handleContainerOverflow": true,
                                                              "hideSiblingNodes": true,
                                                              "isTopModal": [Function],
                                                              "modals": Array [],
                                                              "remove": [Function],
                                                            }
                                                          }
                                                          onEntering={[Function]}
                                                          onExited={[Function]}
                                                          onHide={[Function]}
                                                          onMouseUp={[Function]}
                                                          renderBackdrop={[Function]}
                                                          restoreFocus={true}
                                                          show={false}
                                                          transition={[Function]}
                                                        />
                                                      </Modal>
                                                    </StyledComponent>
                                                  </Modal>
                                                </BootstrapModalWrapper>
                                              </ul>
                                            </RootCloseWrapper>
                                          </DropdownMenu>
                                        </div>
                                      </ButtonGroup>
                                    </Dropdown>
                                  </Uncontrolled(Dropdown)>
                                </ForwardRef>
                              </DropdownButton>
                            </StyledComponent>
                          </DropdownButton>
                        </div>
                      </ButtonToolbar>
                    </td>
                    <ContentPackDownloadControl
                      contentPackId="1"
                      revision={4}
                    >
                      <BootstrapModalWrapper
                        backdrop="static"
                        bsSize="large"
                        onClose={[Function]}
                        onHide={[Function]}
                        onOpen={[Function]}
                        showModal={false}
                      >
                        <Modal
                          backdrop="static"
                          bsSize="large"
                          onHide={[Function]}
                          show={false}
                        >
                          <StyledComponent
                            backdrop="static"
                            bsSize="large"
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "BACKDROP_TRANSITION_DURATION": 150,
                                "Body": [Function],
                                "Dialog": [Function],
                                "Footer": [Function],
                                "Header": [Function],
                                "SIZES": Array [
                                  "large",
                                  "small",
                                ],
                                "TRANSITION_DURATION": 300,
                                "Title": [Function],
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "Modal-nuree8-0",
                                  "isStatic": true,
                                  "lastClassName": "cHlGak",
                                  "rules": Array [
                                    ".modal-content{background-color:",
                                    "#FFF",
                                    ";border-color:",
                                    "rgba(31,31,31,0.2)",
                                    ";.modal-header{border-bottom-color:",
                                    "#DCE1E5",
                                    ";}.modal-footer{border-top-color:",
                                    "#DCE1E5",
                                    ";}}",
                                  ],
                                },
                                "displayName": "Modal",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "Modal-nuree8-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="Modal-nuree8-0 cHlGak"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </StyledComponent>
                        </Modal>
                      </BootstrapModalWrapper>
                    </ContentPackDownloadControl>
                  </tr>
                </DataTableElement>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </DataTable>
</ContentPackVersions>
`;
