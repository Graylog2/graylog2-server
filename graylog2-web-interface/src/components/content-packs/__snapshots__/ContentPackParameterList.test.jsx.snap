// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackParameterList /> should render with empty parameters with readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={true}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <SearchForm
      buttonLeftMargin={5}
      focusAfterMount={false}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              autoFocus={false}
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button__StyledButton
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button"
                  disabled={false}
                  type="submit"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button btn btn-default"
                    disabled={false}
                    type="submit"
                  >
                    Filter
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button__StyledButton
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button"
                  disabled={false}
                  onClick={[Function]}
                  type="reset"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    Reset
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={Array []}
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <p>
                To use parameters for content packs, at first a parameter must be created and can then be applied to a entity.
              </p>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;

exports[`<ContentPackParameterList /> should render with empty parameters without readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={false}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <ForwardRef
      bsSize="small"
      bsStyle="info"
      onClick={[Function]}
      title="Edit Modal"
    >
      <Button__StyledButton
        bsSize="small"
        bsStyle="info"
        onClick={[Function]}
        title="Edit Modal"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsSize="small"
          bsStyle="info"
          className="Button__StyledButton-c9cbmb-0 jHWfTP"
          disabled={false}
          onClick={[Function]}
          title="Edit Modal"
        >
          <button
            className="Button__StyledButton-c9cbmb-0 jHWfTP btn btn-sm btn-info"
            disabled={false}
            onClick={[Function]}
            title="Edit Modal"
            type="button"
          >
            Create parameter
          </button>
        </Button>
      </Button__StyledButton>
    </ForwardRef>
    <BootstrapModalWrapper
      backdrop="static"
      bsSize="large"
      onClose={[Function]}
      onHide={[Function]}
      onOpen={[Function]}
      showModal={false}
    >
      <Modal
        backdrop="static"
        bsSize="large"
        onHide={[Function]}
        show={false}
      >
        <Modal
          animation={true}
          autoFocus={true}
          backdrop="static"
          bsClass="modal"
          bsSize="large"
          className="Modal-nuree8-0 hMPgsT"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        >
          <Modal
            autoFocus={true}
            backdrop="static"
            backdropClassName="modal-backdrop"
            backdropTransition={[Function]}
            containerClassName="modal-open"
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            onMouseUp={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
            transition={[Function]}
          />
        </Modal>
      </Modal>
    </BootstrapModalWrapper>
    <span>
      <br />
      <br />
    </span>
    <SearchForm
      buttonLeftMargin={5}
      focusAfterMount={false}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              autoFocus={false}
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button__StyledButton
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button"
                  disabled={false}
                  type="submit"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button btn btn-default"
                    disabled={false}
                    type="submit"
                  >
                    Filter
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button__StyledButton
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button"
                  disabled={false}
                  onClick={[Function]}
                  type="reset"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    Reset
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
          "Action",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={Array []}
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <p>
                To use parameters for content packs, at first a parameter must be created and can then be applied to a entity.
              </p>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;

exports[`<ContentPackParameterList /> should render with parameters with readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [
        Object {
          "default_value": "test",
          "description": "A parameter descriptions",
          "name": "PARAM",
          "title": "A parameter title",
          "type": "string",
        },
      ],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={true}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <SearchForm
      buttonLeftMargin={5}
      focusAfterMount={false}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              autoFocus={false}
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button__StyledButton
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button"
                  disabled={false}
                  type="submit"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button btn btn-default"
                    disabled={false}
                    type="submit"
                  >
                    Filter
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button__StyledButton
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button"
                  disabled={false}
                  onClick={[Function]}
                  type="reset"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    Reset
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={
        Array [
          Object {
            "default_value": "test",
            "description": "A parameter descriptions",
            "name": "PARAM",
            "title": "A parameter title",
            "type": "string",
          },
        ]
      }
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <DataTable__StyledTable
                className="table scrollable"
              >
                <table
                  className="DataTable__StyledTable-sc-1c22x1c-0 hEWaaO table scrollable"
                >
                  <thead>
                    <tr>
                      <DataTableElement
                        element="Title"
                        formatter={[Function]}
                        index={0}
                        key="header-0"
                      >
                        <th>
                          Title
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Name"
                        formatter={[Function]}
                        index={1}
                        key="header-1"
                      >
                        <th>
                          Name
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Description"
                        formatter={[Function]}
                        index={2}
                        key="header-2"
                      >
                        <th>
                          Description
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Value Type"
                        formatter={[Function]}
                        index={3}
                        key="header-3"
                      >
                        <th>
                          Value Type
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Default Value"
                        formatter={[Function]}
                        index={4}
                        key="header-4"
                      >
                        <th>
                          Default Value
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Used"
                        formatter={[Function]}
                        index={5}
                        key="header-5"
                      >
                        <th>
                          Used
                        </th>
                      </DataTableElement>
                    </tr>
                  </thead>
                  <tbody>
                    <DataTableElement
                      element={
                        Object {
                          "default_value": "test",
                          "description": "A parameter descriptions",
                          "name": "PARAM",
                          "title": "A parameter title",
                          "type": "string",
                        }
                      }
                      formatter={[Function]}
                      index={0}
                      key="row-0"
                    >
                      <tr
                        key="A parameter title"
                      >
                        <td
                          className="bigColumns"
                        >
                          A parameter title
                        </td>
                        <td>
                          PARAM
                        </td>
                        <td
                          className="bigColumns"
                        >
                          A parameter descriptions
                        </td>
                        <td>
                          string
                        </td>
                        <td>
                          test
                        </td>
                        <td>
                          <ForwardRef
                            className="failure"
                          >
                            <Badge__StyledBadge
                              className="failure"
                            >
                              <Badge
                                bsClass="badge"
                                className="Badge__StyledBadge-sc-4gzqz0-0 fLCUuP failure"
                                pullRight={false}
                              >
                                <span
                                  className="Badge__StyledBadge-sc-4gzqz0-0 fLCUuP failure badge"
                                >
                                  <Icon
                                    name="times"
                                    type="solid"
                                  >
                                    <FontAwesomeIcon
                                      icon={
                                        Object {
                                          "iconName": "times",
                                          "prefix": "fas",
                                        }
                                      }
                                    >
                                      <svg
                                        className="svg-inline--fa fa-times"
                                      />
                                    </FontAwesomeIcon>
                                  </Icon>
                                </span>
                              </Badge>
                            </Badge__StyledBadge>
                          </ForwardRef>
                        </td>
                      </tr>
                    </DataTableElement>
                  </tbody>
                </table>
              </DataTable__StyledTable>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;

exports[`<ContentPackParameterList /> should render with parameters without readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [
        Object {
          "default_value": "test",
          "description": "A parameter descriptions",
          "name": "PARAM",
          "title": "A parameter title",
          "type": "string",
        },
      ],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={false}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <ForwardRef
      bsSize="small"
      bsStyle="info"
      onClick={[Function]}
      title="Edit Modal"
    >
      <Button__StyledButton
        bsSize="small"
        bsStyle="info"
        onClick={[Function]}
        title="Edit Modal"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsSize="small"
          bsStyle="info"
          className="Button__StyledButton-c9cbmb-0 jHWfTP"
          disabled={false}
          onClick={[Function]}
          title="Edit Modal"
        >
          <button
            className="Button__StyledButton-c9cbmb-0 jHWfTP btn btn-sm btn-info"
            disabled={false}
            onClick={[Function]}
            title="Edit Modal"
            type="button"
          >
            Create parameter
          </button>
        </Button>
      </Button__StyledButton>
    </ForwardRef>
    <BootstrapModalWrapper
      backdrop="static"
      bsSize="large"
      onClose={[Function]}
      onHide={[Function]}
      onOpen={[Function]}
      showModal={false}
    >
      <Modal
        backdrop="static"
        bsSize="large"
        onHide={[Function]}
        show={false}
      >
        <Modal
          animation={true}
          autoFocus={true}
          backdrop="static"
          bsClass="modal"
          bsSize="large"
          className="Modal-nuree8-0 hMPgsT"
          dialogComponentClass={[Function]}
          enforceFocus={true}
          keyboard={true}
          manager={
            ModalManager {
              "add": [Function],
              "containers": Array [],
              "data": Array [],
              "handleContainerOverflow": true,
              "hideSiblingNodes": true,
              "isTopModal": [Function],
              "modals": Array [],
              "remove": [Function],
            }
          }
          onHide={[Function]}
          renderBackdrop={[Function]}
          restoreFocus={true}
          show={false}
        >
          <Modal
            autoFocus={true}
            backdrop="static"
            backdropClassName="modal-backdrop"
            backdropTransition={[Function]}
            containerClassName="modal-open"
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onEntering={[Function]}
            onExited={[Function]}
            onHide={[Function]}
            onMouseUp={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
            transition={[Function]}
          />
        </Modal>
      </Modal>
    </BootstrapModalWrapper>
    <span>
      <br />
      <br />
    </span>
    <SearchForm
      buttonLeftMargin={5}
      focusAfterMount={false}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              autoFocus={false}
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button__StyledButton
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button"
                  disabled={false}
                  type="submit"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP submit-button btn btn-default"
                    disabled={false}
                    type="submit"
                  >
                    Filter
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button__StyledButton
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button"
                  disabled={false}
                  onClick={[Function]}
                  type="reset"
                >
                  <button
                    className="Button__StyledButton-c9cbmb-0 jHWfTP reset-button btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    Reset
                  </button>
                </Button>
              </Button__StyledButton>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
          "Action",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={
        Array [
          Object {
            "default_value": "test",
            "description": "A parameter descriptions",
            "name": "PARAM",
            "title": "A parameter title",
            "type": "string",
          },
        ]
      }
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <DataTable__StyledTable
                className="table scrollable"
              >
                <table
                  className="DataTable__StyledTable-sc-1c22x1c-0 hEWaaO table scrollable"
                >
                  <thead>
                    <tr>
                      <DataTableElement
                        element="Title"
                        formatter={[Function]}
                        index={0}
                        key="header-0"
                      >
                        <th>
                          Title
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Name"
                        formatter={[Function]}
                        index={1}
                        key="header-1"
                      >
                        <th>
                          Name
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Description"
                        formatter={[Function]}
                        index={2}
                        key="header-2"
                      >
                        <th>
                          Description
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Value Type"
                        formatter={[Function]}
                        index={3}
                        key="header-3"
                      >
                        <th>
                          Value Type
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Default Value"
                        formatter={[Function]}
                        index={4}
                        key="header-4"
                      >
                        <th>
                          Default Value
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Used"
                        formatter={[Function]}
                        index={5}
                        key="header-5"
                      >
                        <th>
                          Used
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Action"
                        formatter={[Function]}
                        index={6}
                        key="header-6"
                      >
                        <th>
                          Action
                        </th>
                      </DataTableElement>
                    </tr>
                  </thead>
                  <tbody>
                    <DataTableElement
                      element={
                        Object {
                          "default_value": "test",
                          "description": "A parameter descriptions",
                          "name": "PARAM",
                          "title": "A parameter title",
                          "type": "string",
                        }
                      }
                      formatter={[Function]}
                      index={0}
                      key="row-0"
                    >
                      <tr
                        key="A parameter title"
                      >
                        <td
                          className="bigColumns"
                        >
                          A parameter title
                        </td>
                        <td>
                          PARAM
                        </td>
                        <td
                          className="bigColumns"
                        >
                          A parameter descriptions
                        </td>
                        <td>
                          string
                        </td>
                        <td>
                          test
                        </td>
                        <td>
                          <ForwardRef
                            className="failure"
                          >
                            <Badge__StyledBadge
                              className="failure"
                            >
                              <Badge
                                bsClass="badge"
                                className="Badge__StyledBadge-sc-4gzqz0-0 fLCUuP failure"
                                pullRight={false}
                              >
                                <span
                                  className="Badge__StyledBadge-sc-4gzqz0-0 fLCUuP failure badge"
                                >
                                  <Icon
                                    name="times"
                                    type="solid"
                                  >
                                    <FontAwesomeIcon
                                      icon={
                                        Object {
                                          "iconName": "times",
                                          "prefix": "fas",
                                        }
                                      }
                                    >
                                      <svg
                                        className="svg-inline--fa fa-times"
                                      />
                                    </FontAwesomeIcon>
                                  </Icon>
                                </span>
                              </Badge>
                            </Badge__StyledBadge>
                          </ForwardRef>
                        </td>
                        <td>
                          <ButtonToolbar
                            bsClass="btn-toolbar"
                          >
                            <div
                              className="btn-toolbar"
                              role="toolbar"
                            >
                              <ForwardRef
                                bsSize="xs"
                                bsStyle="primary"
                                disabled={false}
                                onClick={[Function]}
                                title="Delete Parameter"
                              >
                                <Button__StyledButton
                                  bsSize="xs"
                                  bsStyle="primary"
                                  disabled={false}
                                  onClick={[Function]}
                                  title="Delete Parameter"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsSize="xs"
                                    bsStyle="primary"
                                    className="Button__StyledButton-c9cbmb-0 jHWfTP"
                                    disabled={false}
                                    onClick={[Function]}
                                    title="Delete Parameter"
                                  >
                                    <button
                                      className="Button__StyledButton-c9cbmb-0 jHWfTP btn btn-xs btn-primary"
                                      disabled={false}
                                      onClick={[Function]}
                                      title="Delete Parameter"
                                      type="button"
                                    >
                                      Delete
                                    </button>
                                  </Button>
                                </Button__StyledButton>
                              </ForwardRef>
                              <ForwardRef
                                bsSize="xsmall"
                                bsStyle="info"
                                onClick={[Function]}
                                title="Edit Modal"
                              >
                                <Button__StyledButton
                                  bsSize="xsmall"
                                  bsStyle="info"
                                  onClick={[Function]}
                                  title="Edit Modal"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsSize="xsmall"
                                    bsStyle="info"
                                    className="Button__StyledButton-c9cbmb-0 jHWfTP"
                                    disabled={false}
                                    onClick={[Function]}
                                    title="Edit Modal"
                                  >
                                    <button
                                      className="Button__StyledButton-c9cbmb-0 jHWfTP btn btn-xs btn-info"
                                      disabled={false}
                                      onClick={[Function]}
                                      title="Edit Modal"
                                      type="button"
                                    >
                                      Edit
                                    </button>
                                  </Button>
                                </Button__StyledButton>
                              </ForwardRef>
                              <BootstrapModalWrapper
                                backdrop="static"
                                bsSize="large"
                                onClose={[Function]}
                                onHide={[Function]}
                                onOpen={[Function]}
                                showModal={false}
                              >
                                <Modal
                                  backdrop="static"
                                  bsSize="large"
                                  onHide={[Function]}
                                  show={false}
                                >
                                  <Modal
                                    animation={true}
                                    autoFocus={true}
                                    backdrop="static"
                                    bsClass="modal"
                                    bsSize="large"
                                    className="Modal-nuree8-0 hMPgsT"
                                    dialogComponentClass={[Function]}
                                    enforceFocus={true}
                                    keyboard={true}
                                    manager={
                                      ModalManager {
                                        "add": [Function],
                                        "containers": Array [],
                                        "data": Array [],
                                        "handleContainerOverflow": true,
                                        "hideSiblingNodes": true,
                                        "isTopModal": [Function],
                                        "modals": Array [],
                                        "remove": [Function],
                                      }
                                    }
                                    onHide={[Function]}
                                    renderBackdrop={[Function]}
                                    restoreFocus={true}
                                    show={false}
                                  >
                                    <Modal
                                      autoFocus={true}
                                      backdrop="static"
                                      backdropClassName="modal-backdrop"
                                      backdropTransition={[Function]}
                                      containerClassName="modal-open"
                                      enforceFocus={true}
                                      keyboard={true}
                                      manager={
                                        ModalManager {
                                          "add": [Function],
                                          "containers": Array [],
                                          "data": Array [],
                                          "handleContainerOverflow": true,
                                          "hideSiblingNodes": true,
                                          "isTopModal": [Function],
                                          "modals": Array [],
                                          "remove": [Function],
                                        }
                                      }
                                      onEntering={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      onMouseUp={[Function]}
                                      renderBackdrop={[Function]}
                                      restoreFocus={true}
                                      show={false}
                                      transition={[Function]}
                                    />
                                  </Modal>
                                </Modal>
                              </BootstrapModalWrapper>
                            </div>
                          </ButtonToolbar>
                        </td>
                      </tr>
                    </DataTableElement>
                  </tbody>
                </table>
              </DataTable__StyledTable>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;
