// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackParameterList /> should render with empty parameters with readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={true}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <SearchForm
      buttonLeftMargin={5}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <StyledComponent
                  bsStyle="default"
                  className="submit-button"
                  disabled={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  type="submit"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="submit-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    type="submit"
                  >
                    <button
                      className="submit-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      type="submit"
                    >
                      Filter
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button
                bsStyle="default"
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <StyledComponent
                  bsStyle="default"
                  className="reset-button"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[Function]}
                  type="reset"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="reset-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    <button
                      className="reset-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      onClick={[Function]}
                      type="reset"
                    >
                      Reset
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={Array []}
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <p>
                To use parameters for content packs, at first a parameter must be created and can then be applied to a entity.
              </p>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;

exports[`<ContentPackParameterList /> should render with empty parameters without readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={false}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <ForwardRef
      bsSize="small"
      bsStyle="info"
      onClick={[Function]}
      title="Edit Modal"
    >
      <Button
        bsSize="small"
        bsStyle="info"
        onClick={[Function]}
        title="Edit Modal"
      >
        <StyledComponent
          bsSize="small"
          bsStyle="info"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "SIZES": Array [
                "large",
                "small",
                "xsmall",
              ],
              "STYLES": Array [
                "success",
                "warning",
                "danger",
                "info",
                "default",
                "primary",
                "link",
              ],
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Button-c9cbmb-0",
                "isStatic": false,
                "lastClassName": "gZfKUo",
                "rules": Array [
                  [Function],
                ],
              },
              "displayName": "Button",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Button-c9cbmb-0",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[Function]}
          title="Edit Modal"
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsSize="small"
            bsStyle="info"
            className="Button-c9cbmb-0 gZfKUo"
            disabled={false}
            onClick={[Function]}
            title="Edit Modal"
          >
            <button
              className="Button-c9cbmb-0 gZfKUo btn btn-sm btn-info"
              disabled={false}
              onClick={[Function]}
              title="Edit Modal"
              type="button"
            >
              Create parameter
            </button>
          </Button>
        </StyledComponent>
      </Button>
    </ForwardRef>
    <BootstrapModalWrapper
      backdrop="static"
      bsSize="large"
      onClose={[Function]}
      onHide={[Function]}
      onOpen={[Function]}
      showModal={false}
    >
      <Modal
        backdrop="static"
        bsSize="large"
        onHide={[Function]}
        show={false}
      >
        <StyledComponent
          backdrop="static"
          bsSize="large"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "BACKDROP_TRANSITION_DURATION": 150,
              "Body": [Function],
              "Dialog": [Function],
              "Footer": [Function],
              "Header": [Function],
              "SIZES": Array [
                "large",
                "small",
              ],
              "TRANSITION_DURATION": 300,
              "Title": [Function],
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Modal-nuree8-0",
                "isStatic": true,
                "lastClassName": "cHlGak",
                "rules": Array [
                  ".modal-content{background-color:",
                  "#FFF",
                  ";border-color:",
                  "rgba(31,31,31,0.2)",
                  ";.modal-header{border-bottom-color:",
                  "#DCE1E5",
                  ";}.modal-footer{border-top-color:",
                  "#DCE1E5",
                  ";}}",
                ],
              },
              "displayName": "Modal",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Modal-nuree8-0",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onHide={[Function]}
          show={false}
        >
          <Modal
            animation={true}
            autoFocus={true}
            backdrop="static"
            bsClass="modal"
            bsSize="large"
            className="Modal-nuree8-0 cHlGak"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <Modal
              autoFocus={true}
              backdrop="static"
              backdropClassName="modal-backdrop"
              backdropTransition={[Function]}
              containerClassName="modal-open"
              enforceFocus={true}
              keyboard={true}
              manager={
                ModalManager {
                  "add": [Function],
                  "containers": Array [],
                  "data": Array [],
                  "handleContainerOverflow": true,
                  "hideSiblingNodes": true,
                  "isTopModal": [Function],
                  "modals": Array [],
                  "remove": [Function],
                }
              }
              onEntering={[Function]}
              onExited={[Function]}
              onHide={[Function]}
              onMouseUp={[Function]}
              renderBackdrop={[Function]}
              restoreFocus={true}
              show={false}
              transition={[Function]}
            />
          </Modal>
        </StyledComponent>
      </Modal>
    </BootstrapModalWrapper>
    <span>
      <br />
      <br />
    </span>
    <SearchForm
      buttonLeftMargin={5}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <StyledComponent
                  bsStyle="default"
                  className="submit-button"
                  disabled={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  type="submit"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="submit-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    type="submit"
                  >
                    <button
                      className="submit-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      type="submit"
                    >
                      Filter
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button
                bsStyle="default"
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <StyledComponent
                  bsStyle="default"
                  className="reset-button"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[Function]}
                  type="reset"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="reset-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    <button
                      className="reset-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      onClick={[Function]}
                      type="reset"
                    >
                      Reset
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
          "Action",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={Array []}
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <p>
                To use parameters for content packs, at first a parameter must be created and can then be applied to a entity.
              </p>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;

exports[`<ContentPackParameterList /> should render with parameters with readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [
        Object {
          "default_value": "test",
          "description": "A parameter descriptions",
          "name": "PARAM",
          "title": "A parameter title",
          "type": "string",
        },
      ],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={true}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <SearchForm
      buttonLeftMargin={5}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <StyledComponent
                  bsStyle="default"
                  className="submit-button"
                  disabled={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  type="submit"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="submit-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    type="submit"
                  >
                    <button
                      className="submit-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      type="submit"
                    >
                      Filter
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button
                bsStyle="default"
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <StyledComponent
                  bsStyle="default"
                  className="reset-button"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[Function]}
                  type="reset"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="reset-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    <button
                      className="reset-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      onClick={[Function]}
                      type="reset"
                    >
                      Reset
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={
        Array [
          Object {
            "default_value": "test",
            "description": "A parameter descriptions",
            "name": "PARAM",
            "title": "A parameter title",
            "type": "string",
          },
        ]
      }
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <table
                className="table scrollable"
              >
                <thead>
                  <tr>
                    <DataTableElement
                      element="Title"
                      formatter={[Function]}
                      index={0}
                      key="header-0"
                    >
                      <th>
                        Title
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Name"
                      formatter={[Function]}
                      index={1}
                      key="header-1"
                    >
                      <th>
                        Name
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Description"
                      formatter={[Function]}
                      index={2}
                      key="header-2"
                    >
                      <th>
                        Description
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Value Type"
                      formatter={[Function]}
                      index={3}
                      key="header-3"
                    >
                      <th>
                        Value Type
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Default Value"
                      formatter={[Function]}
                      index={4}
                      key="header-4"
                    >
                      <th>
                        Default Value
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Used"
                      formatter={[Function]}
                      index={5}
                      key="header-5"
                    >
                      <th>
                        Used
                      </th>
                    </DataTableElement>
                  </tr>
                </thead>
                <tbody>
                  <DataTableElement
                    element={
                      Object {
                        "default_value": "test",
                        "description": "A parameter descriptions",
                        "name": "PARAM",
                        "title": "A parameter title",
                        "type": "string",
                      }
                    }
                    formatter={[Function]}
                    index={0}
                    key="row-0"
                  >
                    <tr
                      key="A parameter title"
                    >
                      <td
                        className="bigColumns"
                      >
                        A parameter title
                      </td>
                      <td>
                        PARAM
                      </td>
                      <td
                        className="bigColumns"
                      >
                        A parameter descriptions
                      </td>
                      <td>
                        string
                      </td>
                      <td>
                        test
                      </td>
                      <td>
                        <ForwardRef
                          bsStyle="default"
                          className="failure"
                        >
                          <Badge
                            bsStyle="default"
                            className="failure"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="failure"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Badge-sc-4gzqz0-0",
                                    "isStatic": false,
                                    "lastClassName": "cwxrQE",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Badge",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Badge-sc-4gzqz0-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <Badge
                                bsClass="badge"
                                bsStyle="default"
                                className="failure Badge-sc-4gzqz0-0 cwxrQE"
                                pullRight={false}
                              >
                                <span
                                  className="failure Badge-sc-4gzqz0-0 cwxrQE badge badge-default"
                                >
                                  <ForwardRef
                                    fixedWidth={false}
                                    inverse={false}
                                    name="times"
                                    pulse={false}
                                    spin={false}
                                  >
                                    <i
                                      className="fa fa-times"
                                    />
                                  </ForwardRef>
                                </span>
                              </Badge>
                            </StyledComponent>
                          </Badge>
                        </ForwardRef>
                      </td>
                    </tr>
                  </DataTableElement>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;

exports[`<ContentPackParameterList /> should render with parameters without readOnly 1`] = `
<ContentPackParameterList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [
        Object {
          "default_value": "test",
          "description": "A parameter descriptions",
          "name": "PARAM",
          "title": "A parameter title",
          "type": "string",
        },
      ],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onAddParameter={[Function]}
  onDeleteParameter={[Function]}
  readOnly={false}
>
  <div>
    <h2>
      Parameters list
    </h2>
    <br />
    <ForwardRef
      bsSize="small"
      bsStyle="info"
      onClick={[Function]}
      title="Edit Modal"
    >
      <Button
        bsSize="small"
        bsStyle="info"
        onClick={[Function]}
        title="Edit Modal"
      >
        <StyledComponent
          bsSize="small"
          bsStyle="info"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "SIZES": Array [
                "large",
                "small",
                "xsmall",
              ],
              "STYLES": Array [
                "success",
                "warning",
                "danger",
                "info",
                "default",
                "primary",
                "link",
              ],
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Button-c9cbmb-0",
                "isStatic": false,
                "lastClassName": "gZfKUo",
                "rules": Array [
                  [Function],
                ],
              },
              "displayName": "Button",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Button-c9cbmb-0",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onClick={[Function]}
          title="Edit Modal"
        >
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsSize="small"
            bsStyle="info"
            className="Button-c9cbmb-0 gZfKUo"
            disabled={false}
            onClick={[Function]}
            title="Edit Modal"
          >
            <button
              className="Button-c9cbmb-0 gZfKUo btn btn-sm btn-info"
              disabled={false}
              onClick={[Function]}
              title="Edit Modal"
              type="button"
            >
              Create parameter
            </button>
          </Button>
        </StyledComponent>
      </Button>
    </ForwardRef>
    <BootstrapModalWrapper
      backdrop="static"
      bsSize="large"
      onClose={[Function]}
      onHide={[Function]}
      onOpen={[Function]}
      showModal={false}
    >
      <Modal
        backdrop="static"
        bsSize="large"
        onHide={[Function]}
        show={false}
      >
        <StyledComponent
          backdrop="static"
          bsSize="large"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "BACKDROP_TRANSITION_DURATION": 150,
              "Body": [Function],
              "Dialog": [Function],
              "Footer": [Function],
              "Header": [Function],
              "SIZES": Array [
                "large",
                "small",
              ],
              "TRANSITION_DURATION": 300,
              "Title": [Function],
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Modal-nuree8-0",
                "isStatic": true,
                "lastClassName": "cHlGak",
                "rules": Array [
                  ".modal-content{background-color:",
                  "#FFF",
                  ";border-color:",
                  "rgba(31,31,31,0.2)",
                  ";.modal-header{border-bottom-color:",
                  "#DCE1E5",
                  ";}.modal-footer{border-top-color:",
                  "#DCE1E5",
                  ";}}",
                ],
              },
              "displayName": "Modal",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Modal-nuree8-0",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          onHide={[Function]}
          show={false}
        >
          <Modal
            animation={true}
            autoFocus={true}
            backdrop="static"
            bsClass="modal"
            bsSize="large"
            className="Modal-nuree8-0 cHlGak"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <Modal
              autoFocus={true}
              backdrop="static"
              backdropClassName="modal-backdrop"
              backdropTransition={[Function]}
              containerClassName="modal-open"
              enforceFocus={true}
              keyboard={true}
              manager={
                ModalManager {
                  "add": [Function],
                  "containers": Array [],
                  "data": Array [],
                  "handleContainerOverflow": true,
                  "hideSiblingNodes": true,
                  "isTopModal": [Function],
                  "modals": Array [],
                  "remove": [Function],
                }
              }
              onEntering={[Function]}
              onExited={[Function]}
              onHide={[Function]}
              onMouseUp={[Function]}
              renderBackdrop={[Function]}
              restoreFocus={true}
              show={false}
              transition={[Function]}
            />
          </Modal>
        </StyledComponent>
      </Modal>
    </BootstrapModalWrapper>
    <span>
      <br />
      <br />
    </span>
    <SearchForm
      buttonLeftMargin={5}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button
                bsStyle="default"
                className="submit-button"
                disabled={false}
                type="submit"
              >
                <StyledComponent
                  bsStyle="default"
                  className="submit-button"
                  disabled={false}
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  type="submit"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="submit-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    type="submit"
                  >
                    <button
                      className="submit-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      type="submit"
                    >
                      Filter
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <ForwardRef
              bsStyle="default"
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button
                bsStyle="default"
                className="reset-button"
                onClick={[Function]}
                type="reset"
              >
                <StyledComponent
                  bsStyle="default"
                  className="reset-button"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                        "xsmall",
                      ],
                      "STYLES": Array [
                        "success",
                        "warning",
                        "danger",
                        "info",
                        "default",
                        "primary",
                        "link",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Button-c9cbmb-0",
                        "isStatic": false,
                        "lastClassName": "iKWoaE",
                        "rules": Array [
                          [Function],
                        ],
                      },
                      "displayName": "Button",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Button-c9cbmb-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  onClick={[Function]}
                  type="reset"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="default"
                    className="reset-button Button-c9cbmb-0 iKWoaE"
                    disabled={false}
                    onClick={[Function]}
                    type="reset"
                  >
                    <button
                      className="reset-button Button-c9cbmb-0 iKWoaE btn btn-default"
                      disabled={false}
                      onClick={[Function]}
                      type="reset"
                    >
                      Reset
                    </button>
                  </Button>
                </StyledComponent>
              </Button>
            </ForwardRef>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Name",
          "Description",
          "Value Type",
          "Default Value",
          "Used",
          "Action",
        ]
      }
      id="parameter-list"
      noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
      rowClassName=""
      rows={
        Array [
          Object {
            "default_value": "test",
            "description": "A parameter descriptions",
            "name": "PARAM",
            "title": "A parameter title",
            "type": "string",
          },
        ]
      }
      sortByKey="title"
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="parameter-list"
            >
              <table
                className="table scrollable"
              >
                <thead>
                  <tr>
                    <DataTableElement
                      element="Title"
                      formatter={[Function]}
                      index={0}
                      key="header-0"
                    >
                      <th>
                        Title
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Name"
                      formatter={[Function]}
                      index={1}
                      key="header-1"
                    >
                      <th>
                        Name
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Description"
                      formatter={[Function]}
                      index={2}
                      key="header-2"
                    >
                      <th>
                        Description
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Value Type"
                      formatter={[Function]}
                      index={3}
                      key="header-3"
                    >
                      <th>
                        Value Type
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Default Value"
                      formatter={[Function]}
                      index={4}
                      key="header-4"
                    >
                      <th>
                        Default Value
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Used"
                      formatter={[Function]}
                      index={5}
                      key="header-5"
                    >
                      <th>
                        Used
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Action"
                      formatter={[Function]}
                      index={6}
                      key="header-6"
                    >
                      <th>
                        Action
                      </th>
                    </DataTableElement>
                  </tr>
                </thead>
                <tbody>
                  <DataTableElement
                    element={
                      Object {
                        "default_value": "test",
                        "description": "A parameter descriptions",
                        "name": "PARAM",
                        "title": "A parameter title",
                        "type": "string",
                      }
                    }
                    formatter={[Function]}
                    index={0}
                    key="row-0"
                  >
                    <tr
                      key="A parameter title"
                    >
                      <td
                        className="bigColumns"
                      >
                        A parameter title
                      </td>
                      <td>
                        PARAM
                      </td>
                      <td
                        className="bigColumns"
                      >
                        A parameter descriptions
                      </td>
                      <td>
                        string
                      </td>
                      <td>
                        test
                      </td>
                      <td>
                        <ForwardRef
                          bsStyle="default"
                          className="failure"
                        >
                          <Badge
                            bsStyle="default"
                            className="failure"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="failure"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Badge-sc-4gzqz0-0",
                                    "isStatic": false,
                                    "lastClassName": "cwxrQE",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Badge",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Badge-sc-4gzqz0-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <Badge
                                bsClass="badge"
                                bsStyle="default"
                                className="failure Badge-sc-4gzqz0-0 cwxrQE"
                                pullRight={false}
                              >
                                <span
                                  className="failure Badge-sc-4gzqz0-0 cwxrQE badge badge-default"
                                >
                                  <ForwardRef
                                    fixedWidth={false}
                                    inverse={false}
                                    name="times"
                                    pulse={false}
                                    spin={false}
                                  >
                                    <i
                                      className="fa fa-times"
                                    />
                                  </ForwardRef>
                                </span>
                              </Badge>
                            </StyledComponent>
                          </Badge>
                        </ForwardRef>
                      </td>
                      <td>
                        <ButtonToolbar
                          bsClass="btn-toolbar"
                        >
                          <div
                            className="btn-toolbar"
                            role="toolbar"
                          >
                            <ForwardRef
                              bsSize="xs"
                              bsStyle="primary"
                              disabled={false}
                              onClick={[Function]}
                              title="Delete Parameter"
                            >
                              <Button
                                bsSize="xs"
                                bsStyle="primary"
                                disabled={false}
                                onClick={[Function]}
                                title="Delete Parameter"
                              >
                                <StyledComponent
                                  bsSize="xs"
                                  bsStyle="primary"
                                  disabled={false}
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "SIZES": Array [
                                        "large",
                                        "small",
                                        "xsmall",
                                      ],
                                      "STYLES": Array [
                                        "success",
                                        "warning",
                                        "danger",
                                        "info",
                                        "default",
                                        "primary",
                                        "link",
                                      ],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "Button-c9cbmb-0",
                                        "isStatic": false,
                                        "lastClassName": "ghlLDE",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "Button",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "Button-c9cbmb-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  onClick={[Function]}
                                  title="Delete Parameter"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsSize="xs"
                                    bsStyle="primary"
                                    className="Button-c9cbmb-0 ghlLDE"
                                    disabled={false}
                                    onClick={[Function]}
                                    title="Delete Parameter"
                                  >
                                    <button
                                      className="Button-c9cbmb-0 ghlLDE btn btn-xs btn-primary"
                                      disabled={false}
                                      onClick={[Function]}
                                      title="Delete Parameter"
                                      type="button"
                                    >
                                      Delete
                                    </button>
                                  </Button>
                                </StyledComponent>
                              </Button>
                            </ForwardRef>
                            <ForwardRef
                              bsSize="xsmall"
                              bsStyle="info"
                              onClick={[Function]}
                              title="Edit Modal"
                            >
                              <Button
                                bsSize="xsmall"
                                bsStyle="info"
                                onClick={[Function]}
                                title="Edit Modal"
                              >
                                <StyledComponent
                                  bsSize="xsmall"
                                  bsStyle="info"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "SIZES": Array [
                                        "large",
                                        "small",
                                        "xsmall",
                                      ],
                                      "STYLES": Array [
                                        "success",
                                        "warning",
                                        "danger",
                                        "info",
                                        "default",
                                        "primary",
                                        "link",
                                      ],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "Button-c9cbmb-0",
                                        "isStatic": false,
                                        "lastClassName": "gZfKUo",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "Button",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "Button-c9cbmb-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  onClick={[Function]}
                                  title="Edit Modal"
                                >
                                  <Button
                                    active={false}
                                    block={false}
                                    bsClass="btn"
                                    bsSize="xsmall"
                                    bsStyle="info"
                                    className="Button-c9cbmb-0 gZfKUo"
                                    disabled={false}
                                    onClick={[Function]}
                                    title="Edit Modal"
                                  >
                                    <button
                                      className="Button-c9cbmb-0 gZfKUo btn btn-xs btn-info"
                                      disabled={false}
                                      onClick={[Function]}
                                      title="Edit Modal"
                                      type="button"
                                    >
                                      Edit
                                    </button>
                                  </Button>
                                </StyledComponent>
                              </Button>
                            </ForwardRef>
                            <BootstrapModalWrapper
                              backdrop="static"
                              bsSize="large"
                              onClose={[Function]}
                              onHide={[Function]}
                              onOpen={[Function]}
                              showModal={false}
                            >
                              <Modal
                                backdrop="static"
                                bsSize="large"
                                onHide={[Function]}
                                show={false}
                              >
                                <StyledComponent
                                  backdrop="static"
                                  bsSize="large"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "BACKDROP_TRANSITION_DURATION": 150,
                                      "Body": [Function],
                                      "Dialog": [Function],
                                      "Footer": [Function],
                                      "Header": [Function],
                                      "SIZES": Array [
                                        "large",
                                        "small",
                                      ],
                                      "TRANSITION_DURATION": 300,
                                      "Title": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "Modal-nuree8-0",
                                        "isStatic": true,
                                        "lastClassName": "cHlGak",
                                        "rules": Array [
                                          ".modal-content{background-color:",
                                          "#FFF",
                                          ";border-color:",
                                          "rgba(31,31,31,0.2)",
                                          ";.modal-header{border-bottom-color:",
                                          "#DCE1E5",
                                          ";}.modal-footer{border-top-color:",
                                          "#DCE1E5",
                                          ";}}",
                                        ],
                                      },
                                      "displayName": "Modal",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "Modal-nuree8-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  onHide={[Function]}
                                  show={false}
                                >
                                  <Modal
                                    animation={true}
                                    autoFocus={true}
                                    backdrop="static"
                                    bsClass="modal"
                                    bsSize="large"
                                    className="Modal-nuree8-0 cHlGak"
                                    dialogComponentClass={[Function]}
                                    enforceFocus={true}
                                    keyboard={true}
                                    manager={
                                      ModalManager {
                                        "add": [Function],
                                        "containers": Array [],
                                        "data": Array [],
                                        "handleContainerOverflow": true,
                                        "hideSiblingNodes": true,
                                        "isTopModal": [Function],
                                        "modals": Array [],
                                        "remove": [Function],
                                      }
                                    }
                                    onHide={[Function]}
                                    renderBackdrop={[Function]}
                                    restoreFocus={true}
                                    show={false}
                                  >
                                    <Modal
                                      autoFocus={true}
                                      backdrop="static"
                                      backdropClassName="modal-backdrop"
                                      backdropTransition={[Function]}
                                      containerClassName="modal-open"
                                      enforceFocus={true}
                                      keyboard={true}
                                      manager={
                                        ModalManager {
                                          "add": [Function],
                                          "containers": Array [],
                                          "data": Array [],
                                          "handleContainerOverflow": true,
                                          "hideSiblingNodes": true,
                                          "isTopModal": [Function],
                                          "modals": Array [],
                                          "remove": [Function],
                                        }
                                      }
                                      onEntering={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      onMouseUp={[Function]}
                                      renderBackdrop={[Function]}
                                      restoreFocus={true}
                                      show={false}
                                      transition={[Function]}
                                    />
                                  </Modal>
                                </StyledComponent>
                              </Modal>
                            </BootstrapModalWrapper>
                          </div>
                        </ButtonToolbar>
                      </td>
                    </tr>
                  </DataTableElement>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackParameterList>
`;
