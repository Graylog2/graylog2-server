// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackApplyParameter /> should render with full props 1`] = `
<ContentPackApplyParameter
  appliedParameter={
    Array [
      Object {
        "configKey": "configuration.port",
        "paramName": "PORT",
      },
    ]
  }
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={
    Array [
      Object {
        "default_value": "23",
        "name": "PORT",
        "title": "Port",
        "type": "integer",
      },
    ]
  }
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        bsClass="row"
        className="applyParameter"
        componentClass="div"
      >
        <div
          className="applyParameter row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
            smOffset={1}
          >
            <div
              className="col-sm-5 col-sm-offset-1"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="config_key"
                label="Config Key"
                name="config_key"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="config_key"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="config_key"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="config_key"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr"
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": true,
                                    "lastClassName": "iZJNbd",
                                    "rules": Array [
                                      "color:",
                                      "#1F1F1F",
                                      ";font-weight:bold;margin-bottom:5px;display:inline-block;",
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="ControlLabel-sc-1edmum5-0 iZJNbd"
                                srOnly={false}
                              >
                                <label
                                  className="ControlLabel-sc-1edmum5-0 iZJNbd control-label"
                                  htmlFor="config_key"
                                >
                                  Config Key
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": true,
                                        "lastClassName": "hdNTyr",
                                        "rules": Array [
                                          "color:",
                                          "#1F1F1F",
                                          ";background-color:",
                                          "#FFF",
                                          ";border-color:",
                                          "#DCE1E5",
                                          ";&:focus{border-color:",
                                          "#6DC6E7",
                                          ";box-shadow(inset 0 1px 1px rgba(0,0,0,.075),0 0 8px ",
                                          "rgba(109,198,231,0.4)",
                                          ");}&::-moz-placeholder,&:-ms-input-placeholder,&::-webkit-input-placeholder{color:",
                                          "#b8b8b8",
                                          ";}&[disabled],&[readonly],fieldset[disabled] &{background-color:",
                                          "#DCE1E5",
                                          ";}~ .form-control-feedback.glyphicon{display:none;}",
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="FormControl-sc-1amoaox-0 hdNTyr"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="FormControl-sc-1amoaox-0 hdNTyr form-control"
                                      id="config_key"
                                      label="Config Key"
                                      name="config_key"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose Config Key
                                      </option>
                                      <option
                                        key="configuration.listen_address"
                                        value="configuration.listen_address"
                                      >
                                        configuration.listen_address
                                      </option>
                                      <option
                                        key="name"
                                        value="name"
                                      >
                                        name
                                      </option>
                                      <option
                                        key="title"
                                        value="title"
                                      >
                                        title
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <div
              className="col-sm-5"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="parameter"
                label="Parameter"
                name="parameter"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="parameter"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="parameter"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="parameter"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr"
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": true,
                                    "lastClassName": "iZJNbd",
                                    "rules": Array [
                                      "color:",
                                      "#1F1F1F",
                                      ";font-weight:bold;margin-bottom:5px;display:inline-block;",
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="ControlLabel-sc-1edmum5-0 iZJNbd"
                                srOnly={false}
                              >
                                <label
                                  className="ControlLabel-sc-1edmum5-0 iZJNbd control-label"
                                  htmlFor="parameter"
                                >
                                  Parameter
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": true,
                                        "lastClassName": "hdNTyr",
                                        "rules": Array [
                                          "color:",
                                          "#1F1F1F",
                                          ";background-color:",
                                          "#FFF",
                                          ";border-color:",
                                          "#DCE1E5",
                                          ";&:focus{border-color:",
                                          "#6DC6E7",
                                          ";box-shadow(inset 0 1px 1px rgba(0,0,0,.075),0 0 8px ",
                                          "rgba(109,198,231,0.4)",
                                          ");}&::-moz-placeholder,&:-ms-input-placeholder,&::-webkit-input-placeholder{color:",
                                          "#b8b8b8",
                                          ";}&[disabled],&[readonly],fieldset[disabled] &{background-color:",
                                          "#DCE1E5",
                                          ";}~ .form-control-feedback.glyphicon{display:none;}",
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="FormControl-sc-1amoaox-0 hdNTyr"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="FormControl-sc-1amoaox-0 hdNTyr form-control"
                                      id="parameter"
                                      label="Parameter"
                                      name="parameter"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose...
                                      </option>
                                      <option
                                        key="PORT"
                                        value="PORT"
                                      >
                                        Port
                                         (
                                        PORT
                                        )
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={1}
          >
            <div
              className="col-sm-1"
            />
          </Col>
        </div>
      </Row>
      <Row
        bsClass="row"
        componentClass="div"
      >
        <div
          className="row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={2}
            smOffset={10}
          >
            <div
              className="col-sm-2 col-sm-offset-10"
            >
              <ForwardRef
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                <Button
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <StyledComponent
                    bsStyle="primary"
                    disabled={true}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                          "xsmall",
                        ],
                        "STYLES": Array [
                          "success",
                          "warning",
                          "danger",
                          "info",
                          "default",
                          "primary",
                          "link",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Button-c9cbmb-0",
                          "isStatic": false,
                          "lastClassName": "ghlLDE",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Button-c9cbmb-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="Button-c9cbmb-0 ghlLDE"
                      disabled={true}
                      type="submit"
                    >
                      <button
                        className="Button-c9cbmb-0 ghlLDE btn btn-primary"
                        disabled={true}
                        type="submit"
                      >
                        Apply
                      </button>
                    </Button>
                  </StyledComponent>
                </Button>
              </ForwardRef>
            </div>
          </Col>
        </div>
      </Row>
    </form>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={10}
          smOffset={1}
        >
          <div
            className="col-sm-10 col-sm-offset-1"
          >
            <DataTable
              className=""
              dataRowFormatter={[Function]}
              displayKey="value"
              filterBy=""
              filterKeys={Array []}
              filterLabel="Filter"
              filterSuggestions={Array []}
              headerCellFormatter={[Function]}
              headers={
                Array [
                  "Config Key",
                  "Parameter",
                  "Action",
                ]
              }
              id="config-key-list"
              noDataText="No data available."
              rowClassName=""
              rows={
                Array [
                  Object {
                    "configKey": "configuration.port",
                    "paramName": "PORT",
                  },
                ]
              }
              useResponsiveTable={true}
            >
              <div>
                <div
                  className="row "
                >
                  <div
                    className="col-md-12"
                  >
                    <div
                      className="data-table table-responsive"
                      id="config-key-list"
                    >
                      <table
                        className="table "
                      >
                        <thead>
                          <tr>
                            <DataTableElement
                              element="Config Key"
                              formatter={[Function]}
                              index={0}
                              key="header-0"
                            >
                              <th>
                                Config Key
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Parameter"
                              formatter={[Function]}
                              index={1}
                              key="header-1"
                            >
                              <th>
                                Parameter
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Action"
                              formatter={[Function]}
                              index={2}
                              key="header-2"
                            >
                              <th>
                                Action
                              </th>
                            </DataTableElement>
                          </tr>
                        </thead>
                        <tbody>
                          <DataTableElement
                            element={
                              Object {
                                "configKey": "configuration.port",
                                "paramName": "PORT",
                              }
                            }
                            formatter={[Function]}
                            index={0}
                            key="row-0"
                          >
                            <tr
                              key="configuration.port"
                            >
                              <td>
                                configuration.port
                              </td>
                              <td>
                                PORT
                              </td>
                              <td>
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  onClick={[Function]}
                                >
                                  <Button
                                    bsSize="small"
                                    bsStyle="info"
                                    onClick={[Function]}
                                  >
                                    <StyledComponent
                                      bsSize="small"
                                      bsStyle="info"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                            "xsmall",
                                          ],
                                          "STYLES": Array [
                                            "success",
                                            "warning",
                                            "danger",
                                            "info",
                                            "default",
                                            "primary",
                                            "link",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Button-c9cbmb-0",
                                            "isStatic": false,
                                            "lastClassName": "gZfKUo",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Button",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Button-c9cbmb-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="Button-c9cbmb-0 gZfKUo"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="Button-c9cbmb-0 gZfKUo btn btn-sm btn-info"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Clear
                                        </button>
                                      </Button>
                                    </StyledComponent>
                                  </Button>
                                </ForwardRef>
                              </td>
                            </tr>
                          </DataTableElement>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </DataTable>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackApplyParameter>
`;

exports[`<ContentPackApplyParameter /> should render with minimal props 1`] = `
<ContentPackApplyParameter
  appliedParameter={Array []}
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={Array []}
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        bsClass="row"
        className="applyParameter"
        componentClass="div"
      >
        <div
          className="applyParameter row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
            smOffset={1}
          >
            <div
              className="col-sm-5 col-sm-offset-1"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="config_key"
                label="Config Key"
                name="config_key"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="config_key"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="config_key"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="config_key"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr"
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": true,
                                    "lastClassName": "iZJNbd",
                                    "rules": Array [
                                      "color:",
                                      "#1F1F1F",
                                      ";font-weight:bold;margin-bottom:5px;display:inline-block;",
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="ControlLabel-sc-1edmum5-0 iZJNbd"
                                srOnly={false}
                              >
                                <label
                                  className="ControlLabel-sc-1edmum5-0 iZJNbd control-label"
                                  htmlFor="config_key"
                                >
                                  Config Key
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": true,
                                        "lastClassName": "hdNTyr",
                                        "rules": Array [
                                          "color:",
                                          "#1F1F1F",
                                          ";background-color:",
                                          "#FFF",
                                          ";border-color:",
                                          "#DCE1E5",
                                          ";&:focus{border-color:",
                                          "#6DC6E7",
                                          ";box-shadow(inset 0 1px 1px rgba(0,0,0,.075),0 0 8px ",
                                          "rgba(109,198,231,0.4)",
                                          ");}&::-moz-placeholder,&:-ms-input-placeholder,&::-webkit-input-placeholder{color:",
                                          "#b8b8b8",
                                          ";}&[disabled],&[readonly],fieldset[disabled] &{background-color:",
                                          "#DCE1E5",
                                          ";}~ .form-control-feedback.glyphicon{display:none;}",
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="FormControl-sc-1amoaox-0 hdNTyr"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="FormControl-sc-1amoaox-0 hdNTyr form-control"
                                      id="config_key"
                                      label="Config Key"
                                      name="config_key"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose Config Key
                                      </option>
                                      <option
                                        key="configuration.listen_address"
                                        value="configuration.listen_address"
                                      >
                                        configuration.listen_address
                                      </option>
                                      <option
                                        key="configuration.port"
                                        value="configuration.port"
                                      >
                                        configuration.port
                                      </option>
                                      <option
                                        key="name"
                                        value="name"
                                      >
                                        name
                                      </option>
                                      <option
                                        key="title"
                                        value="title"
                                      >
                                        title
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <div
              className="col-sm-5"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="parameter"
                label="Parameter"
                name="parameter"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="parameter"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="parameter"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="parameter"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr"
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": true,
                                    "lastClassName": "iZJNbd",
                                    "rules": Array [
                                      "color:",
                                      "#1F1F1F",
                                      ";font-weight:bold;margin-bottom:5px;display:inline-block;",
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="ControlLabel-sc-1edmum5-0 iZJNbd"
                                srOnly={false}
                              >
                                <label
                                  className="ControlLabel-sc-1edmum5-0 iZJNbd control-label"
                                  htmlFor="parameter"
                                >
                                  Parameter
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": true,
                                        "lastClassName": "hdNTyr",
                                        "rules": Array [
                                          "color:",
                                          "#1F1F1F",
                                          ";background-color:",
                                          "#FFF",
                                          ";border-color:",
                                          "#DCE1E5",
                                          ";&:focus{border-color:",
                                          "#6DC6E7",
                                          ";box-shadow(inset 0 1px 1px rgba(0,0,0,.075),0 0 8px ",
                                          "rgba(109,198,231,0.4)",
                                          ");}&::-moz-placeholder,&:-ms-input-placeholder,&::-webkit-input-placeholder{color:",
                                          "#b8b8b8",
                                          ";}&[disabled],&[readonly],fieldset[disabled] &{background-color:",
                                          "#DCE1E5",
                                          ";}~ .form-control-feedback.glyphicon{display:none;}",
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="FormControl-sc-1amoaox-0 hdNTyr"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="FormControl-sc-1amoaox-0 hdNTyr form-control"
                                      id="parameter"
                                      label="Parameter"
                                      name="parameter"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Create a parameter first
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={1}
          >
            <div
              className="col-sm-1"
            />
          </Col>
        </div>
      </Row>
      <Row
        bsClass="row"
        componentClass="div"
      >
        <div
          className="row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={2}
            smOffset={10}
          >
            <div
              className="col-sm-2 col-sm-offset-10"
            >
              <ForwardRef
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                <Button
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <StyledComponent
                    bsStyle="primary"
                    disabled={true}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                          "xsmall",
                        ],
                        "STYLES": Array [
                          "success",
                          "warning",
                          "danger",
                          "info",
                          "default",
                          "primary",
                          "link",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Button-c9cbmb-0",
                          "isStatic": false,
                          "lastClassName": "ghlLDE",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Button-c9cbmb-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="Button-c9cbmb-0 ghlLDE"
                      disabled={true}
                      type="submit"
                    >
                      <button
                        className="Button-c9cbmb-0 ghlLDE btn btn-primary"
                        disabled={true}
                        type="submit"
                      >
                        Apply
                      </button>
                    </Button>
                  </StyledComponent>
                </Button>
              </ForwardRef>
            </div>
          </Col>
        </div>
      </Row>
    </form>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={10}
          smOffset={1}
        >
          <div
            className="col-sm-10 col-sm-offset-1"
          >
            <DataTable
              className=""
              dataRowFormatter={[Function]}
              displayKey="value"
              filterBy=""
              filterKeys={Array []}
              filterLabel="Filter"
              filterSuggestions={Array []}
              headerCellFormatter={[Function]}
              headers={
                Array [
                  "Config Key",
                  "Parameter",
                  "Action",
                ]
              }
              id="config-key-list"
              noDataText="No data available."
              rowClassName=""
              rows={Array []}
              useResponsiveTable={true}
            >
              <div>
                <div
                  className="row "
                >
                  <div
                    className="col-md-12"
                  >
                    <div
                      className="data-table table-responsive"
                      id="config-key-list"
                    >
                      <p>
                        No data available.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </DataTable>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackApplyParameter>
`;

exports[`<ContentPackApplyParameter /> should render with readOnly 1`] = `
<ContentPackApplyParameter
  appliedParameter={
    Array [
      Object {
        "configKey": "configuration.port",
        "paramName": "PORT",
        "readOnly": true,
      },
    ]
  }
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={
    Array [
      Object {
        "default_value": "23",
        "name": "PORT",
        "title": "Port",
        "type": "integer",
      },
    ]
  }
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        bsClass="row"
        className="applyParameter"
        componentClass="div"
      >
        <div
          className="applyParameter row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
            smOffset={1}
          >
            <div
              className="col-sm-5 col-sm-offset-1"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="config_key"
                label="Config Key"
                name="config_key"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="config_key"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="config_key"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="config_key"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr"
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": true,
                                    "lastClassName": "iZJNbd",
                                    "rules": Array [
                                      "color:",
                                      "#1F1F1F",
                                      ";font-weight:bold;margin-bottom:5px;display:inline-block;",
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="ControlLabel-sc-1edmum5-0 iZJNbd"
                                srOnly={false}
                              >
                                <label
                                  className="ControlLabel-sc-1edmum5-0 iZJNbd control-label"
                                  htmlFor="config_key"
                                >
                                  Config Key
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": true,
                                        "lastClassName": "hdNTyr",
                                        "rules": Array [
                                          "color:",
                                          "#1F1F1F",
                                          ";background-color:",
                                          "#FFF",
                                          ";border-color:",
                                          "#DCE1E5",
                                          ";&:focus{border-color:",
                                          "#6DC6E7",
                                          ";box-shadow(inset 0 1px 1px rgba(0,0,0,.075),0 0 8px ",
                                          "rgba(109,198,231,0.4)",
                                          ");}&::-moz-placeholder,&:-ms-input-placeholder,&::-webkit-input-placeholder{color:",
                                          "#b8b8b8",
                                          ";}&[disabled],&[readonly],fieldset[disabled] &{background-color:",
                                          "#DCE1E5",
                                          ";}~ .form-control-feedback.glyphicon{display:none;}",
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="FormControl-sc-1amoaox-0 hdNTyr"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="FormControl-sc-1amoaox-0 hdNTyr form-control"
                                      id="config_key"
                                      label="Config Key"
                                      name="config_key"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose Config Key
                                      </option>
                                      <option
                                        key="configuration.listen_address"
                                        value="configuration.listen_address"
                                      >
                                        configuration.listen_address
                                      </option>
                                      <option
                                        key="name"
                                        value="name"
                                      >
                                        name
                                      </option>
                                      <option
                                        key="title"
                                        value="title"
                                      >
                                        title
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <div
              className="col-sm-5"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="parameter"
                label="Parameter"
                name="parameter"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="parameter"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="parameter"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="parameter"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr"
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="FormGroup__StyledFormGroup-sc-1wv4cm9-0 ekazNr form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": true,
                                    "lastClassName": "iZJNbd",
                                    "rules": Array [
                                      "color:",
                                      "#1F1F1F",
                                      ";font-weight:bold;margin-bottom:5px;display:inline-block;",
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="ControlLabel-sc-1edmum5-0 iZJNbd"
                                srOnly={false}
                              >
                                <label
                                  className="ControlLabel-sc-1edmum5-0 iZJNbd control-label"
                                  htmlFor="parameter"
                                >
                                  Parameter
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": true,
                                        "lastClassName": "hdNTyr",
                                        "rules": Array [
                                          "color:",
                                          "#1F1F1F",
                                          ";background-color:",
                                          "#FFF",
                                          ";border-color:",
                                          "#DCE1E5",
                                          ";&:focus{border-color:",
                                          "#6DC6E7",
                                          ";box-shadow(inset 0 1px 1px rgba(0,0,0,.075),0 0 8px ",
                                          "rgba(109,198,231,0.4)",
                                          ");}&::-moz-placeholder,&:-ms-input-placeholder,&::-webkit-input-placeholder{color:",
                                          "#b8b8b8",
                                          ";}&[disabled],&[readonly],fieldset[disabled] &{background-color:",
                                          "#DCE1E5",
                                          ";}~ .form-control-feedback.glyphicon{display:none;}",
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="FormControl-sc-1amoaox-0 hdNTyr"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="FormControl-sc-1amoaox-0 hdNTyr form-control"
                                      id="parameter"
                                      label="Parameter"
                                      name="parameter"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose...
                                      </option>
                                      <option
                                        key="PORT"
                                        value="PORT"
                                      >
                                        Port
                                         (
                                        PORT
                                        )
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={1}
          >
            <div
              className="col-sm-1"
            />
          </Col>
        </div>
      </Row>
      <Row
        bsClass="row"
        componentClass="div"
      >
        <div
          className="row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={2}
            smOffset={10}
          >
            <div
              className="col-sm-2 col-sm-offset-10"
            >
              <ForwardRef
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                <Button
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <StyledComponent
                    bsStyle="primary"
                    disabled={true}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                          "xsmall",
                        ],
                        "STYLES": Array [
                          "success",
                          "warning",
                          "danger",
                          "info",
                          "default",
                          "primary",
                          "link",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Button-c9cbmb-0",
                          "isStatic": false,
                          "lastClassName": "ghlLDE",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Button-c9cbmb-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="Button-c9cbmb-0 ghlLDE"
                      disabled={true}
                      type="submit"
                    >
                      <button
                        className="Button-c9cbmb-0 ghlLDE btn btn-primary"
                        disabled={true}
                        type="submit"
                      >
                        Apply
                      </button>
                    </Button>
                  </StyledComponent>
                </Button>
              </ForwardRef>
            </div>
          </Col>
        </div>
      </Row>
    </form>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={10}
          smOffset={1}
        >
          <div
            className="col-sm-10 col-sm-offset-1"
          >
            <DataTable
              className=""
              dataRowFormatter={[Function]}
              displayKey="value"
              filterBy=""
              filterKeys={Array []}
              filterLabel="Filter"
              filterSuggestions={Array []}
              headerCellFormatter={[Function]}
              headers={
                Array [
                  "Config Key",
                  "Parameter",
                  "Action",
                ]
              }
              id="config-key-list"
              noDataText="No data available."
              rowClassName=""
              rows={
                Array [
                  Object {
                    "configKey": "configuration.port",
                    "paramName": "PORT",
                    "readOnly": true,
                  },
                ]
              }
              useResponsiveTable={true}
            >
              <div>
                <div
                  className="row "
                >
                  <div
                    className="col-md-12"
                  >
                    <div
                      className="data-table table-responsive"
                      id="config-key-list"
                    >
                      <table
                        className="table "
                      >
                        <thead>
                          <tr>
                            <DataTableElement
                              element="Config Key"
                              formatter={[Function]}
                              index={0}
                              key="header-0"
                            >
                              <th>
                                Config Key
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Parameter"
                              formatter={[Function]}
                              index={1}
                              key="header-1"
                            >
                              <th>
                                Parameter
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Action"
                              formatter={[Function]}
                              index={2}
                              key="header-2"
                            >
                              <th>
                                Action
                              </th>
                            </DataTableElement>
                          </tr>
                        </thead>
                        <tbody>
                          <DataTableElement
                            element={
                              Object {
                                "configKey": "configuration.port",
                                "paramName": "PORT",
                                "readOnly": true,
                              }
                            }
                            formatter={[Function]}
                            index={0}
                            key="row-0"
                          >
                            <tr
                              key="configuration.port"
                            >
                              <td>
                                configuration.port
                              </td>
                              <td>
                                PORT
                              </td>
                              <td />
                            </tr>
                          </DataTableElement>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </DataTable>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackApplyParameter>
`;
