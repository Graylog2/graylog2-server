// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackApplyParameter /> should render with full props 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c1 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #cdcdcd;
}

.c1::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c1::-moz-placeholder {
  color: #9b9b9b;
}

.c1:-ms-input-placeholder {
  color: #9b9b9b;
}

.c1::placeholder {
  color: #9b9b9b;
}

.c1:focus {
  border-color: #6386c9;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(99,134,201,0.4);
}

.c1[disabled],
.c1[readonly],
fieldset[disabled] .c1 {
  background-color: #cdcdcd;
}

.c1 ~ .form-control-feedback.glyphicon {
  display: none;
}

<ContentPackApplyParameter
  appliedParameter={
    Array [
      Object {
        "configKey": "configuration.port",
        "paramName": "PORT",
      },
    ]
  }
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={
    Array [
      Object {
        "default_value": "23",
        "name": "PORT",
        "title": "Port",
        "type": "integer",
      },
    ]
  }
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        bsClass="row"
        className="applyParameter"
        componentClass="div"
      >
        <div
          className="applyParameter row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
            smOffset={1}
          >
            <div
              className="col-sm-5 col-sm-offset-1"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="config_key"
                label="Config Key"
                name="config_key"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="config_key"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="config_key"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="config_key"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="c0"
                                srOnly={false}
                              >
                                <label
                                  className="c0 control-label"
                                  htmlFor="config_key"
                                >
                                  Config Key
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="c1"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="c1 form-control"
                                      id="config_key"
                                      label="Config Key"
                                      name="config_key"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose Config Key
                                      </option>
                                      <option
                                        key="configuration.listen_address"
                                        value="configuration.listen_address"
                                      >
                                        configuration.listen_address
                                      </option>
                                      <option
                                        key="name"
                                        value="name"
                                      >
                                        name
                                      </option>
                                      <option
                                        key="title"
                                        value="title"
                                      >
                                        title
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <div
              className="col-sm-5"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="parameter"
                label="Parameter"
                name="parameter"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="parameter"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="parameter"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="parameter"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="c0"
                                srOnly={false}
                              >
                                <label
                                  className="c0 control-label"
                                  htmlFor="parameter"
                                >
                                  Parameter
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="c1"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="c1 form-control"
                                      id="parameter"
                                      label="Parameter"
                                      name="parameter"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose...
                                      </option>
                                      <option
                                        key="PORT"
                                        value="PORT"
                                      >
                                        Port
                                         (
                                        PORT
                                        )
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={1}
          >
            <div
              className="col-sm-1"
            />
          </Col>
        </div>
      </Row>
      <Row
        bsClass="row"
        componentClass="div"
      >
        <div
          className="row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={2}
            smOffset={10}
          >
            <div
              className="col-sm-2 col-sm-offset-10"
            >
              <ForwardRef
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                <Button__StyledButton
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <StyledComponent
                    bsStyle="primary"
                    disabled={true}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                          "xsmall",
                        ],
                        "STYLES": Array [
                          "success",
                          "warning",
                          "danger",
                          "info",
                          "default",
                          "primary",
                          "link",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Button__StyledButton-c9cbmb-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Button__StyledButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Button__StyledButton-c9cbmb-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="c2"
                      disabled={true}
                      type="submit"
                    >
                      <button
                        className="c2 btn btn-primary"
                        disabled={true}
                        type="submit"
                      >
                        Apply
                      </button>
                    </Button>
                  </StyledComponent>
                </Button__StyledButton>
              </ForwardRef>
            </div>
          </Col>
        </div>
      </Row>
    </form>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={10}
          smOffset={1}
        >
          <div
            className="col-sm-10 col-sm-offset-1"
          >
            <DataTable
              className=""
              dataRowFormatter={[Function]}
              displayKey="value"
              filterBy=""
              filterKeys={Array []}
              filterLabel="Filter"
              filterSuggestions={Array []}
              headerCellFormatter={[Function]}
              headers={
                Array [
                  "Config Key",
                  "Parameter",
                  "Action",
                ]
              }
              id="config-key-list"
              noDataText="No data available."
              rowClassName=""
              rows={
                Array [
                  Object {
                    "configKey": "configuration.port",
                    "paramName": "PORT",
                  },
                ]
              }
              useResponsiveTable={true}
            >
              <div>
                <div
                  className="row "
                >
                  <div
                    className="col-md-12"
                  >
                    <div
                      className="data-table table-responsive"
                      id="config-key-list"
                    >
                      <table
                        className="table "
                      >
                        <thead>
                          <tr>
                            <DataTableElement
                              element="Config Key"
                              formatter={[Function]}
                              index={0}
                              key="header-0"
                            >
                              <th>
                                Config Key
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Parameter"
                              formatter={[Function]}
                              index={1}
                              key="header-1"
                            >
                              <th>
                                Parameter
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Action"
                              formatter={[Function]}
                              index={2}
                              key="header-2"
                            >
                              <th>
                                Action
                              </th>
                            </DataTableElement>
                          </tr>
                        </thead>
                        <tbody>
                          <DataTableElement
                            element={
                              Object {
                                "configKey": "configuration.port",
                                "paramName": "PORT",
                              }
                            }
                            formatter={[Function]}
                            index={0}
                            key="row-0"
                          >
                            <tr
                              key="configuration.port"
                            >
                              <td>
                                configuration.port
                              </td>
                              <td>
                                PORT
                              </td>
                              <td>
                                <ForwardRef
                                  bsSize="small"
                                  bsStyle="info"
                                  onClick={[Function]}
                                >
                                  <Button__StyledButton
                                    bsSize="small"
                                    bsStyle="info"
                                    onClick={[Function]}
                                  >
                                    <StyledComponent
                                      bsSize="small"
                                      bsStyle="info"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                            "xsmall",
                                          ],
                                          "STYLES": Array [
                                            "success",
                                            "warning",
                                            "danger",
                                            "info",
                                            "default",
                                            "primary",
                                            "link",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Button__StyledButton-c9cbmb-0",
                                            "isStatic": false,
                                            "lastClassName": "c2",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Button__StyledButton",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="c2"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c2 btn btn-sm btn-info"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Clear
                                        </button>
                                      </Button>
                                    </StyledComponent>
                                  </Button__StyledButton>
                                </ForwardRef>
                              </td>
                            </tr>
                          </DataTableElement>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </DataTable>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackApplyParameter>
`;

exports[`<ContentPackApplyParameter /> should render with minimal props 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c1 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #cdcdcd;
}

.c1::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c1::-moz-placeholder {
  color: #9b9b9b;
}

.c1:-ms-input-placeholder {
  color: #9b9b9b;
}

.c1::placeholder {
  color: #9b9b9b;
}

.c1:focus {
  border-color: #6386c9;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(99,134,201,0.4);
}

.c1[disabled],
.c1[readonly],
fieldset[disabled] .c1 {
  background-color: #cdcdcd;
}

.c1 ~ .form-control-feedback.glyphicon {
  display: none;
}

<ContentPackApplyParameter
  appliedParameter={Array []}
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={Array []}
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        bsClass="row"
        className="applyParameter"
        componentClass="div"
      >
        <div
          className="applyParameter row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
            smOffset={1}
          >
            <div
              className="col-sm-5 col-sm-offset-1"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="config_key"
                label="Config Key"
                name="config_key"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="config_key"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="config_key"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="config_key"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="c0"
                                srOnly={false}
                              >
                                <label
                                  className="c0 control-label"
                                  htmlFor="config_key"
                                >
                                  Config Key
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="c1"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="c1 form-control"
                                      id="config_key"
                                      label="Config Key"
                                      name="config_key"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose Config Key
                                      </option>
                                      <option
                                        key="configuration.listen_address"
                                        value="configuration.listen_address"
                                      >
                                        configuration.listen_address
                                      </option>
                                      <option
                                        key="configuration.port"
                                        value="configuration.port"
                                      >
                                        configuration.port
                                      </option>
                                      <option
                                        key="name"
                                        value="name"
                                      >
                                        name
                                      </option>
                                      <option
                                        key="title"
                                        value="title"
                                      >
                                        title
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <div
              className="col-sm-5"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="parameter"
                label="Parameter"
                name="parameter"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="parameter"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="parameter"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="parameter"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="c0"
                                srOnly={false}
                              >
                                <label
                                  className="c0 control-label"
                                  htmlFor="parameter"
                                >
                                  Parameter
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="c1"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="c1 form-control"
                                      id="parameter"
                                      label="Parameter"
                                      name="parameter"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Create a parameter first
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={1}
          >
            <div
              className="col-sm-1"
            />
          </Col>
        </div>
      </Row>
      <Row
        bsClass="row"
        componentClass="div"
      >
        <div
          className="row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={2}
            smOffset={10}
          >
            <div
              className="col-sm-2 col-sm-offset-10"
            >
              <ForwardRef
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                <Button__StyledButton
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <StyledComponent
                    bsStyle="primary"
                    disabled={true}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                          "xsmall",
                        ],
                        "STYLES": Array [
                          "success",
                          "warning",
                          "danger",
                          "info",
                          "default",
                          "primary",
                          "link",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Button__StyledButton-c9cbmb-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Button__StyledButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Button__StyledButton-c9cbmb-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="c2"
                      disabled={true}
                      type="submit"
                    >
                      <button
                        className="c2 btn btn-primary"
                        disabled={true}
                        type="submit"
                      >
                        Apply
                      </button>
                    </Button>
                  </StyledComponent>
                </Button__StyledButton>
              </ForwardRef>
            </div>
          </Col>
        </div>
      </Row>
    </form>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={10}
          smOffset={1}
        >
          <div
            className="col-sm-10 col-sm-offset-1"
          >
            <DataTable
              className=""
              dataRowFormatter={[Function]}
              displayKey="value"
              filterBy=""
              filterKeys={Array []}
              filterLabel="Filter"
              filterSuggestions={Array []}
              headerCellFormatter={[Function]}
              headers={
                Array [
                  "Config Key",
                  "Parameter",
                  "Action",
                ]
              }
              id="config-key-list"
              noDataText="No data available."
              rowClassName=""
              rows={Array []}
              useResponsiveTable={true}
            >
              <div>
                <div
                  className="row "
                >
                  <div
                    className="col-md-12"
                  >
                    <div
                      className="data-table table-responsive"
                      id="config-key-list"
                    >
                      <p>
                        No data available.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </DataTable>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackApplyParameter>
`;

exports[`<ContentPackApplyParameter /> should render with readOnly 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c1 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #cdcdcd;
}

.c1::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c1::-moz-placeholder {
  color: #9b9b9b;
}

.c1:-ms-input-placeholder {
  color: #9b9b9b;
}

.c1::placeholder {
  color: #9b9b9b;
}

.c1:focus {
  border-color: #6386c9;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(99,134,201,0.4);
}

.c1[disabled],
.c1[readonly],
fieldset[disabled] .c1 {
  background-color: #cdcdcd;
}

.c1 ~ .form-control-feedback.glyphicon {
  display: none;
}

<ContentPackApplyParameter
  appliedParameter={
    Array [
      Object {
        "configKey": "configuration.port",
        "paramName": "PORT",
        "readOnly": true,
      },
    ]
  }
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={
    Array [
      Object {
        "default_value": "23",
        "name": "PORT",
        "title": "Port",
        "type": "integer",
      },
    ]
  }
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        bsClass="row"
        className="applyParameter"
        componentClass="div"
      >
        <div
          className="applyParameter row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
            smOffset={1}
          >
            <div
              className="col-sm-5 col-sm-offset-1"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="config_key"
                label="Config Key"
                name="config_key"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="config_key"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="config_key"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="config_key"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="c0"
                                srOnly={false}
                              >
                                <label
                                  className="c0 control-label"
                                  htmlFor="config_key"
                                >
                                  Config Key
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="c1"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="c1 form-control"
                                      id="config_key"
                                      label="Config Key"
                                      name="config_key"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose Config Key
                                      </option>
                                      <option
                                        key="configuration.listen_address"
                                        value="configuration.listen_address"
                                      >
                                        configuration.listen_address
                                      </option>
                                      <option
                                        key="name"
                                        value="name"
                                      >
                                        name
                                      </option>
                                      <option
                                        key="title"
                                        value="title"
                                      >
                                        title
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <div
              className="col-sm-5"
            >
              <Input
                addonAfter={null}
                bsStyle={null}
                buttonAfter={null}
                help=""
                id="parameter"
                label="Parameter"
                name="parameter"
                onChange={[Function]}
                placeholder=""
                required={true}
                type="select"
                value=""
              >
                <Component
                  controlId="parameter"
                  validationState={null}
                >
                  <FormGroup__StyledFormGroup
                    controlId="parameter"
                    validationState={null}
                  >
                    <StyledComponent
                      controlId="parameter"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                            "isStatic": false,
                            "lastClassName": "ekazNr",
                            "rules": Array [
                              [Function],
                              ";",
                            ],
                          },
                          "displayName": "FormGroup__StyledFormGroup",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "ControlLabel-sc-1edmum5-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "ControlLabel",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <ControlLabel
                                bsClass="control-label"
                                className="c0"
                                srOnly={false}
                              >
                                <label
                                  className="c0 control-label"
                                  htmlFor="parameter"
                                >
                                  Parameter
                                </label>
                              </ControlLabel>
                            </StyledComponent>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <StyledComponent
                                  componentClass="select"
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "Feedback": [Function],
                                      "SIZES": Array [
                                        "small",
                                        "large",
                                      ],
                                      "Static": [Function],
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "FormControl-sc-1amoaox-0",
                                        "isStatic": false,
                                        "lastClassName": "c1",
                                        "rules": Array [
                                          [Function],
                                        ],
                                      },
                                      "displayName": "FormControl",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "FormControl-sc-1amoaox-0",
                                      "target": [Function],
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <FormControl
                                    bsClass="form-control"
                                    className="c1"
                                    componentClass="select"
                                    inputRef={[Function]}
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <select
                                      className="c1 form-control"
                                      id="parameter"
                                      label="Parameter"
                                      name="parameter"
                                      onChange={[Function]}
                                      placeholder=""
                                      required={true}
                                      type="select"
                                      value=""
                                    >
                                      <option
                                        key="EMPTY"
                                        value=""
                                      >
                                        Choose...
                                      </option>
                                      <option
                                        key="PORT"
                                        value="PORT"
                                      >
                                        Port
                                         (
                                        PORT
                                        )
                                      </option>
                                    </select>
                                  </FormControl>
                                </StyledComponent>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </StyledComponent>
                  </FormGroup__StyledFormGroup>
                </Component>
              </Input>
            </div>
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={1}
          >
            <div
              className="col-sm-1"
            />
          </Col>
        </div>
      </Row>
      <Row
        bsClass="row"
        componentClass="div"
      >
        <div
          className="row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={2}
            smOffset={10}
          >
            <div
              className="col-sm-2 col-sm-offset-10"
            >
              <ForwardRef
                bsStyle="primary"
                disabled={true}
                type="submit"
              >
                <Button__StyledButton
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <StyledComponent
                    bsStyle="primary"
                    disabled={true}
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                          "xsmall",
                        ],
                        "STYLES": Array [
                          "success",
                          "warning",
                          "danger",
                          "info",
                          "default",
                          "primary",
                          "link",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Button__StyledButton-c9cbmb-0",
                          "isStatic": false,
                          "lastClassName": "c2",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Button__StyledButton",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Button__StyledButton-c9cbmb-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    type="submit"
                  >
                    <Button
                      active={false}
                      block={false}
                      bsClass="btn"
                      bsStyle="primary"
                      className="c2"
                      disabled={true}
                      type="submit"
                    >
                      <button
                        className="c2 btn btn-primary"
                        disabled={true}
                        type="submit"
                      >
                        Apply
                      </button>
                    </Button>
                  </StyledComponent>
                </Button__StyledButton>
              </ForwardRef>
            </div>
          </Col>
        </div>
      </Row>
    </form>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={10}
          smOffset={1}
        >
          <div
            className="col-sm-10 col-sm-offset-1"
          >
            <DataTable
              className=""
              dataRowFormatter={[Function]}
              displayKey="value"
              filterBy=""
              filterKeys={Array []}
              filterLabel="Filter"
              filterSuggestions={Array []}
              headerCellFormatter={[Function]}
              headers={
                Array [
                  "Config Key",
                  "Parameter",
                  "Action",
                ]
              }
              id="config-key-list"
              noDataText="No data available."
              rowClassName=""
              rows={
                Array [
                  Object {
                    "configKey": "configuration.port",
                    "paramName": "PORT",
                    "readOnly": true,
                  },
                ]
              }
              useResponsiveTable={true}
            >
              <div>
                <div
                  className="row "
                >
                  <div
                    className="col-md-12"
                  >
                    <div
                      className="data-table table-responsive"
                      id="config-key-list"
                    >
                      <table
                        className="table "
                      >
                        <thead>
                          <tr>
                            <DataTableElement
                              element="Config Key"
                              formatter={[Function]}
                              index={0}
                              key="header-0"
                            >
                              <th>
                                Config Key
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Parameter"
                              formatter={[Function]}
                              index={1}
                              key="header-1"
                            >
                              <th>
                                Parameter
                              </th>
                            </DataTableElement>
                            <DataTableElement
                              element="Action"
                              formatter={[Function]}
                              index={2}
                              key="header-2"
                            >
                              <th>
                                Action
                              </th>
                            </DataTableElement>
                          </tr>
                        </thead>
                        <tbody>
                          <DataTableElement
                            element={
                              Object {
                                "configKey": "configuration.port",
                                "paramName": "PORT",
                                "readOnly": true,
                              }
                            }
                            formatter={[Function]}
                            index={0}
                            key="row-0"
                          >
                            <tr
                              key="configuration.port"
                            >
                              <td>
                                configuration.port
                              </td>
                              <td>
                                PORT
                              </td>
                              <td />
                            </tr>
                          </DataTableElement>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              </div>
            </DataTable>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackApplyParameter>
`;
