// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackApplyParameter /> should render with full props 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c2.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c2.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c2.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::placeholder {
  color: #9b9b9b;
}

.c2.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c2.form-control[disabled],
.c2.form-control[readonly],
fieldset[disabled] .c2.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c2.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

.c0.content {
  background-color: #fff;
  border: 1px solid #d0d0d0;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c4.table > thead > tr > th,
.c4.table > tbody > tr > th,
.c4.table > tfoot > tr > th,
.c4.table > thead > tr > td,
.c4.table > tbody > tr > td,
.c4.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c4.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c4.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c4.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c4.table .table {
  background-color: #fafafa;
}

.c4.table-bordered {
  border-color: #f0f0f0;
}

.c4.table-bordered > thead > tr > td,
.c4.table-bordered > tfoot > tr > td,
.c4.table-bordered > tbody > tr > td,
.c4.table-bordered > thead > tr > th,
.c4.table-bordered > tfoot > tr > th,
.c4.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c4.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c4.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c4.table > thead > tr > td.active,
.c4.table > tfoot > tr > td.active,
.c4.table > tbody > tr > td.active,
.c4.table > thead > tr > th.active,
.c4.table > tfoot > tr > th.active,
.c4.table > tbody > tr > th.active,
.c4.table > thead > tr.active > td,
.c4.table > tfoot > tr.active > td,
.c4.table > tbody > tr.active > td,
.c4.table > thead > tr.active > th,
.c4.table > tfoot > tr.active > th,
.c4.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c4.table-hover > tbody > tr > td.active:hover,
.c4.table-hover > tbody > tr > th.active:hover,
.c4.table-hover > tbody > tr.active:hover > td,
.c4.table-hover > tbody > tr:hover > .active,
.c4.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c4.table > thead > tr > td.success,
.c4.table > tfoot > tr > td.success,
.c4.table > tbody > tr > td.success,
.c4.table > thead > tr > th.success,
.c4.table > tfoot > tr > th.success,
.c4.table > tbody > tr > th.success,
.c4.table > thead > tr.success > td,
.c4.table > tfoot > tr.success > td,
.c4.table > tbody > tr.success > td,
.c4.table > thead > tr.success > th,
.c4.table > tfoot > tr.success > th,
.c4.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c4.table-hover > tbody > tr > td.success:hover,
.c4.table-hover > tbody > tr > th.success:hover,
.c4.table-hover > tbody > tr.success:hover > td,
.c4.table-hover > tbody > tr:hover > .success,
.c4.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c4.table > thead > tr > td.info,
.c4.table > tfoot > tr > td.info,
.c4.table > tbody > tr > td.info,
.c4.table > thead > tr > th.info,
.c4.table > tfoot > tr > th.info,
.c4.table > tbody > tr > th.info,
.c4.table > thead > tr.info > td,
.c4.table > tfoot > tr.info > td,
.c4.table > tbody > tr.info > td,
.c4.table > thead > tr.info > th,
.c4.table > tfoot > tr.info > th,
.c4.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c4.table-hover > tbody > tr > td.info:hover,
.c4.table-hover > tbody > tr > th.info:hover,
.c4.table-hover > tbody > tr.info:hover > td,
.c4.table-hover > tbody > tr:hover > .info,
.c4.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c4.table > thead > tr > td.warning,
.c4.table > tfoot > tr > td.warning,
.c4.table > tbody > tr > td.warning,
.c4.table > thead > tr > th.warning,
.c4.table > tfoot > tr > th.warning,
.c4.table > tbody > tr > th.warning,
.c4.table > thead > tr.warning > td,
.c4.table > tfoot > tr.warning > td,
.c4.table > tbody > tr.warning > td,
.c4.table > thead > tr.warning > th,
.c4.table > tfoot > tr.warning > th,
.c4.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c4.table-hover > tbody > tr > td.warning:hover,
.c4.table-hover > tbody > tr > th.warning:hover,
.c4.table-hover > tbody > tr.warning:hover > td,
.c4.table-hover > tbody > tr:hover > .warning,
.c4.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c4.table > thead > tr > td.danger,
.c4.table > tfoot > tr > td.danger,
.c4.table > tbody > tr > td.danger,
.c4.table > thead > tr > th.danger,
.c4.table > tfoot > tr > th.danger,
.c4.table > tbody > tr > th.danger,
.c4.table > thead > tr.danger > td,
.c4.table > tfoot > tr.danger > td,
.c4.table > tbody > tr.danger > td,
.c4.table > thead > tr.danger > th,
.c4.table > tfoot > tr.danger > th,
.c4.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c4.table-hover > tbody > tr > td.danger:hover,
.c4.table-hover > tbody > tr > th.danger:hover,
.c4.table-hover > tbody > tr.danger:hover > td,
.c4.table-hover > tbody > tr:hover > .danger,
.c4.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

<ContentPackApplyParameter
  appliedParameter={
    Array [
      Object {
        "configKey": "configuration.port",
        "paramName": "PORT",
      },
    ]
  }
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={
    Array [
      Object {
        "default_value": "23",
        "name": "PORT",
        "title": "Port",
        "type": "integer",
      },
    ]
  }
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        className="applyParameter"
      >
        <Row
          bsClass="row"
          className="c0 applyParameter"
          componentClass="div"
        >
          <div
            className="c0 applyParameter row"
          >
            <Col
              bsClass="col"
              componentClass="div"
              sm={5}
              smOffset={1}
            >
              <div
                className="col-sm-5 col-sm-offset-1"
              >
                <Input
                  addonAfter={null}
                  bsStyle={null}
                  buttonAfter={null}
                  help=""
                  id="config_key"
                  label="Config Key"
                  name="config_key"
                  onChange={[Function]}
                  placeholder=""
                  required={true}
                  type="select"
                  value=""
                >
                  <Component
                    controlId="config_key"
                    validationState={null}
                  >
                    <FormGroup__StyledFormGroup
                      controlId="config_key"
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <ControlLabel
                              bsClass="control-label"
                              className="c1"
                              srOnly={false}
                            >
                              <label
                                className="c1 control-label"
                                htmlFor="config_key"
                              >
                                Config Key
                              </label>
                            </ControlLabel>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <FormControl
                                  bsClass="form-control"
                                  className="c2"
                                  componentClass="select"
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <select
                                    className="c2 form-control"
                                    id="config_key"
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <option
                                      key="EMPTY"
                                      value=""
                                    >
                                      Choose Config Key
                                    </option>
                                    <option
                                      key="configuration.listen_address"
                                      value="configuration.listen_address"
                                    >
                                      configuration.listen_address
                                    </option>
                                    <option
                                      key="name"
                                      value="name"
                                    >
                                      name
                                    </option>
                                    <option
                                      key="title"
                                      value="title"
                                    >
                                      title
                                    </option>
                                  </select>
                                </FormControl>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </FormGroup__StyledFormGroup>
                  </Component>
                </Input>
              </div>
            </Col>
            <Col
              bsClass="col"
              componentClass="div"
              sm={5}
            >
              <div
                className="col-sm-5"
              >
                <Input
                  addonAfter={null}
                  bsStyle={null}
                  buttonAfter={null}
                  help=""
                  id="parameter"
                  label="Parameter"
                  name="parameter"
                  onChange={[Function]}
                  placeholder=""
                  required={true}
                  type="select"
                  value=""
                >
                  <Component
                    controlId="parameter"
                    validationState={null}
                  >
                    <FormGroup__StyledFormGroup
                      controlId="parameter"
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <ControlLabel
                              bsClass="control-label"
                              className="c1"
                              srOnly={false}
                            >
                              <label
                                className="c1 control-label"
                                htmlFor="parameter"
                              >
                                Parameter
                              </label>
                            </ControlLabel>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <FormControl
                                  bsClass="form-control"
                                  className="c2"
                                  componentClass="select"
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <select
                                    className="c2 form-control"
                                    id="parameter"
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <option
                                      key="EMPTY"
                                      value=""
                                    >
                                      Choose...
                                    </option>
                                    <option
                                      key="PORT"
                                      value="PORT"
                                    >
                                      Port
                                       (
                                      PORT
                                      )
                                    </option>
                                  </select>
                                </FormControl>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </FormGroup__StyledFormGroup>
                  </Component>
                </Input>
              </div>
            </Col>
            <Col
              bsClass="col"
              componentClass="div"
              sm={1}
            >
              <div
                className="col-sm-1"
              />
            </Col>
          </div>
        </Row>
      </Row>
      <Row>
        <Row
          bsClass="row"
          className="c0"
          componentClass="div"
        >
          <div
            className="c0 row"
          >
            <Col
              bsClass="col"
              componentClass="div"
              sm={2}
              smOffset={10}
            >
              <div
                className="col-sm-2 col-sm-offset-10"
              >
                <Button
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="primary"
                    className="c3"
                    disabled={true}
                    type="submit"
                  >
                    <button
                      className="c3 btn btn-primary"
                      disabled={true}
                      type="submit"
                    >
                      Apply
                    </button>
                  </Button>
                </Button>
              </div>
            </Col>
          </div>
        </Row>
      </Row>
    </form>
    <Row>
      <Row
        bsClass="row"
        className="c0"
        componentClass="div"
      >
        <div
          className="c0 row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={10}
            smOffset={1}
          >
            <div
              className="col-sm-10 col-sm-offset-1"
            >
              <DataTable
                className=""
                dataRowFormatter={[Function]}
                displayKey="value"
                filterBy=""
                filterKeys={Array []}
                filterLabel="Filter"
                filterSuggestions={Array []}
                headerCellFormatter={[Function]}
                headers={
                  Array [
                    "Config Key",
                    "Parameter",
                    "Action",
                  ]
                }
                id="config-key-list"
                noDataText="No data available."
                rowClassName=""
                rows={
                  Array [
                    Object {
                      "configKey": "configuration.port",
                      "paramName": "PORT",
                    },
                  ]
                }
                useResponsiveTable={true}
              >
                <div>
                  <div
                    className="row "
                  >
                    <div
                      className="col-md-12"
                    >
                      <div
                        className="data-table table-responsive"
                        id="config-key-list"
                      >
                        <DataTable__StyledTable
                          className="table "
                        >
                          <table
                            className="c4 table "
                          >
                            <thead>
                              <tr>
                                <DataTableElement
                                  element="Config Key"
                                  formatter={[Function]}
                                  index={0}
                                  key="header-0"
                                >
                                  <th>
                                    Config Key
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Parameter"
                                  formatter={[Function]}
                                  index={1}
                                  key="header-1"
                                >
                                  <th>
                                    Parameter
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Action"
                                  formatter={[Function]}
                                  index={2}
                                  key="header-2"
                                >
                                  <th>
                                    Action
                                  </th>
                                </DataTableElement>
                              </tr>
                            </thead>
                            <tbody>
                              <DataTableElement
                                element={
                                  Object {
                                    "configKey": "configuration.port",
                                    "paramName": "PORT",
                                  }
                                }
                                formatter={[Function]}
                                index={0}
                                key="row-0"
                              >
                                <tr
                                  key="configuration.port"
                                >
                                  <td>
                                    configuration.port
                                  </td>
                                  <td>
                                    PORT
                                  </td>
                                  <td>
                                    <Button
                                      bsSize="small"
                                      bsStyle="info"
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="small"
                                        bsStyle="info"
                                        className="c3"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c3 btn btn-sm btn-info"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Clear
                                        </button>
                                      </Button>
                                    </Button>
                                  </td>
                                </tr>
                              </DataTableElement>
                            </tbody>
                          </table>
                        </DataTable__StyledTable>
                      </div>
                    </div>
                  </div>
                </div>
              </DataTable>
            </div>
          </Col>
        </div>
      </Row>
    </Row>
  </div>
</ContentPackApplyParameter>
`;

exports[`<ContentPackApplyParameter /> should render with minimal props 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c2.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c2.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c2.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::placeholder {
  color: #9b9b9b;
}

.c2.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c2.form-control[disabled],
.c2.form-control[readonly],
fieldset[disabled] .c2.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c2.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

.c0.content {
  background-color: #fff;
  border: 1px solid #d0d0d0;
  margin-bottom: 9px;
  border-radius: 4px;
}

<ContentPackApplyParameter
  appliedParameter={Array []}
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={Array []}
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        className="applyParameter"
      >
        <Row
          bsClass="row"
          className="c0 applyParameter"
          componentClass="div"
        >
          <div
            className="c0 applyParameter row"
          >
            <Col
              bsClass="col"
              componentClass="div"
              sm={5}
              smOffset={1}
            >
              <div
                className="col-sm-5 col-sm-offset-1"
              >
                <Input
                  addonAfter={null}
                  bsStyle={null}
                  buttonAfter={null}
                  help=""
                  id="config_key"
                  label="Config Key"
                  name="config_key"
                  onChange={[Function]}
                  placeholder=""
                  required={true}
                  type="select"
                  value=""
                >
                  <Component
                    controlId="config_key"
                    validationState={null}
                  >
                    <FormGroup__StyledFormGroup
                      controlId="config_key"
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <ControlLabel
                              bsClass="control-label"
                              className="c1"
                              srOnly={false}
                            >
                              <label
                                className="c1 control-label"
                                htmlFor="config_key"
                              >
                                Config Key
                              </label>
                            </ControlLabel>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <FormControl
                                  bsClass="form-control"
                                  className="c2"
                                  componentClass="select"
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <select
                                    className="c2 form-control"
                                    id="config_key"
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <option
                                      key="EMPTY"
                                      value=""
                                    >
                                      Choose Config Key
                                    </option>
                                    <option
                                      key="configuration.listen_address"
                                      value="configuration.listen_address"
                                    >
                                      configuration.listen_address
                                    </option>
                                    <option
                                      key="configuration.port"
                                      value="configuration.port"
                                    >
                                      configuration.port
                                    </option>
                                    <option
                                      key="name"
                                      value="name"
                                    >
                                      name
                                    </option>
                                    <option
                                      key="title"
                                      value="title"
                                    >
                                      title
                                    </option>
                                  </select>
                                </FormControl>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </FormGroup__StyledFormGroup>
                  </Component>
                </Input>
              </div>
            </Col>
            <Col
              bsClass="col"
              componentClass="div"
              sm={5}
            >
              <div
                className="col-sm-5"
              >
                <Input
                  addonAfter={null}
                  bsStyle={null}
                  buttonAfter={null}
                  help=""
                  id="parameter"
                  label="Parameter"
                  name="parameter"
                  onChange={[Function]}
                  placeholder=""
                  required={true}
                  type="select"
                  value=""
                >
                  <Component
                    controlId="parameter"
                    validationState={null}
                  >
                    <FormGroup__StyledFormGroup
                      controlId="parameter"
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <ControlLabel
                              bsClass="control-label"
                              className="c1"
                              srOnly={false}
                            >
                              <label
                                className="c1 control-label"
                                htmlFor="parameter"
                              >
                                Parameter
                              </label>
                            </ControlLabel>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <FormControl
                                  bsClass="form-control"
                                  className="c2"
                                  componentClass="select"
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <select
                                    className="c2 form-control"
                                    id="parameter"
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <option
                                      key="EMPTY"
                                      value=""
                                    >
                                      Create a parameter first
                                    </option>
                                  </select>
                                </FormControl>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </FormGroup__StyledFormGroup>
                  </Component>
                </Input>
              </div>
            </Col>
            <Col
              bsClass="col"
              componentClass="div"
              sm={1}
            >
              <div
                className="col-sm-1"
              />
            </Col>
          </div>
        </Row>
      </Row>
      <Row>
        <Row
          bsClass="row"
          className="c0"
          componentClass="div"
        >
          <div
            className="c0 row"
          >
            <Col
              bsClass="col"
              componentClass="div"
              sm={2}
              smOffset={10}
            >
              <div
                className="col-sm-2 col-sm-offset-10"
              >
                <Button
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="primary"
                    className="c3"
                    disabled={true}
                    type="submit"
                  >
                    <button
                      className="c3 btn btn-primary"
                      disabled={true}
                      type="submit"
                    >
                      Apply
                    </button>
                  </Button>
                </Button>
              </div>
            </Col>
          </div>
        </Row>
      </Row>
    </form>
    <Row>
      <Row
        bsClass="row"
        className="c0"
        componentClass="div"
      >
        <div
          className="c0 row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={10}
            smOffset={1}
          >
            <div
              className="col-sm-10 col-sm-offset-1"
            >
              <DataTable
                className=""
                dataRowFormatter={[Function]}
                displayKey="value"
                filterBy=""
                filterKeys={Array []}
                filterLabel="Filter"
                filterSuggestions={Array []}
                headerCellFormatter={[Function]}
                headers={
                  Array [
                    "Config Key",
                    "Parameter",
                    "Action",
                  ]
                }
                id="config-key-list"
                noDataText="No data available."
                rowClassName=""
                rows={Array []}
                useResponsiveTable={true}
              >
                <div>
                  <div
                    className="row "
                  >
                    <div
                      className="col-md-12"
                    >
                      <div
                        className="data-table table-responsive"
                        id="config-key-list"
                      >
                        <p>
                          No data available.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </DataTable>
            </div>
          </Col>
        </div>
      </Row>
    </Row>
  </div>
</ContentPackApplyParameter>
`;

exports[`<ContentPackApplyParameter /> should render with readOnly 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c2.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c2.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c2.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c2.form-control::placeholder {
  color: #9b9b9b;
}

.c2.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c2.form-control[disabled],
.c2.form-control[readonly],
fieldset[disabled] .c2.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c2.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

.c0.content {
  background-color: #fff;
  border: 1px solid #d0d0d0;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c4.table > thead > tr > th,
.c4.table > tbody > tr > th,
.c4.table > tfoot > tr > th,
.c4.table > thead > tr > td,
.c4.table > tbody > tr > td,
.c4.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c4.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c4.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c4.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c4.table .table {
  background-color: #fafafa;
}

.c4.table-bordered {
  border-color: #f0f0f0;
}

.c4.table-bordered > thead > tr > td,
.c4.table-bordered > tfoot > tr > td,
.c4.table-bordered > tbody > tr > td,
.c4.table-bordered > thead > tr > th,
.c4.table-bordered > tfoot > tr > th,
.c4.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c4.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c4.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c4.table > thead > tr > td.active,
.c4.table > tfoot > tr > td.active,
.c4.table > tbody > tr > td.active,
.c4.table > thead > tr > th.active,
.c4.table > tfoot > tr > th.active,
.c4.table > tbody > tr > th.active,
.c4.table > thead > tr.active > td,
.c4.table > tfoot > tr.active > td,
.c4.table > tbody > tr.active > td,
.c4.table > thead > tr.active > th,
.c4.table > tfoot > tr.active > th,
.c4.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c4.table-hover > tbody > tr > td.active:hover,
.c4.table-hover > tbody > tr > th.active:hover,
.c4.table-hover > tbody > tr.active:hover > td,
.c4.table-hover > tbody > tr:hover > .active,
.c4.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c4.table > thead > tr > td.success,
.c4.table > tfoot > tr > td.success,
.c4.table > tbody > tr > td.success,
.c4.table > thead > tr > th.success,
.c4.table > tfoot > tr > th.success,
.c4.table > tbody > tr > th.success,
.c4.table > thead > tr.success > td,
.c4.table > tfoot > tr.success > td,
.c4.table > tbody > tr.success > td,
.c4.table > thead > tr.success > th,
.c4.table > tfoot > tr.success > th,
.c4.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c4.table-hover > tbody > tr > td.success:hover,
.c4.table-hover > tbody > tr > th.success:hover,
.c4.table-hover > tbody > tr.success:hover > td,
.c4.table-hover > tbody > tr:hover > .success,
.c4.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c4.table > thead > tr > td.info,
.c4.table > tfoot > tr > td.info,
.c4.table > tbody > tr > td.info,
.c4.table > thead > tr > th.info,
.c4.table > tfoot > tr > th.info,
.c4.table > tbody > tr > th.info,
.c4.table > thead > tr.info > td,
.c4.table > tfoot > tr.info > td,
.c4.table > tbody > tr.info > td,
.c4.table > thead > tr.info > th,
.c4.table > tfoot > tr.info > th,
.c4.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c4.table-hover > tbody > tr > td.info:hover,
.c4.table-hover > tbody > tr > th.info:hover,
.c4.table-hover > tbody > tr.info:hover > td,
.c4.table-hover > tbody > tr:hover > .info,
.c4.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c4.table > thead > tr > td.warning,
.c4.table > tfoot > tr > td.warning,
.c4.table > tbody > tr > td.warning,
.c4.table > thead > tr > th.warning,
.c4.table > tfoot > tr > th.warning,
.c4.table > tbody > tr > th.warning,
.c4.table > thead > tr.warning > td,
.c4.table > tfoot > tr.warning > td,
.c4.table > tbody > tr.warning > td,
.c4.table > thead > tr.warning > th,
.c4.table > tfoot > tr.warning > th,
.c4.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c4.table-hover > tbody > tr > td.warning:hover,
.c4.table-hover > tbody > tr > th.warning:hover,
.c4.table-hover > tbody > tr.warning:hover > td,
.c4.table-hover > tbody > tr:hover > .warning,
.c4.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c4.table > thead > tr > td.danger,
.c4.table > tfoot > tr > td.danger,
.c4.table > tbody > tr > td.danger,
.c4.table > thead > tr > th.danger,
.c4.table > tfoot > tr > th.danger,
.c4.table > tbody > tr > th.danger,
.c4.table > thead > tr.danger > td,
.c4.table > tfoot > tr.danger > td,
.c4.table > tbody > tr.danger > td,
.c4.table > thead > tr.danger > th,
.c4.table > tfoot > tr.danger > th,
.c4.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c4.table-hover > tbody > tr > td.danger:hover,
.c4.table-hover > tbody > tr > th.danger:hover,
.c4.table-hover > tbody > tr.danger:hover > td,
.c4.table-hover > tbody > tr:hover > .danger,
.c4.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

<ContentPackApplyParameter
  appliedParameter={
    Array [
      Object {
        "configKey": "configuration.port",
        "paramName": "PORT",
        "readOnly": true,
      },
    ]
  }
  entity={
    Object {
      "constraints": Array [],
      "data": Object {
        "configuration": Object {
          "listen_address": Object {
            "@type": "string",
            "@value": "1.2.3.4",
          },
          "port": Object {
            "@type": "integer",
            "@value": "23",
          },
        },
        "name": Object {
          "@type": "string",
          "@value": "Input",
        },
        "title": Object {
          "@type": "string",
          "@value": "A good input",
        },
      },
      "id": "111-beef",
      "type": undefined,
      "v": "1.0",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  parameters={
    Array [
      Object {
        "default_value": "23",
        "name": "PORT",
        "title": "Port",
        "type": "integer",
      },
    ]
  }
>
  <div>
    <form
      className="apply-parameter-form"
      id="apply-parameter-form"
      onSubmit={[Function]}
    >
      <Row
        className="applyParameter"
      >
        <Row
          bsClass="row"
          className="c0 applyParameter"
          componentClass="div"
        >
          <div
            className="c0 applyParameter row"
          >
            <Col
              bsClass="col"
              componentClass="div"
              sm={5}
              smOffset={1}
            >
              <div
                className="col-sm-5 col-sm-offset-1"
              >
                <Input
                  addonAfter={null}
                  bsStyle={null}
                  buttonAfter={null}
                  help=""
                  id="config_key"
                  label="Config Key"
                  name="config_key"
                  onChange={[Function]}
                  placeholder=""
                  required={true}
                  type="select"
                  value=""
                >
                  <Component
                    controlId="config_key"
                    validationState={null}
                  >
                    <FormGroup__StyledFormGroup
                      controlId="config_key"
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="config_key"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <ControlLabel
                              bsClass="control-label"
                              className="c1"
                              srOnly={false}
                            >
                              <label
                                className="c1 control-label"
                                htmlFor="config_key"
                              >
                                Config Key
                              </label>
                            </ControlLabel>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Config Key"
                                name="config_key"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <FormControl
                                  bsClass="form-control"
                                  className="c2"
                                  componentClass="select"
                                  inputRef={[Function]}
                                  label="Config Key"
                                  name="config_key"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <select
                                    className="c2 form-control"
                                    id="config_key"
                                    label="Config Key"
                                    name="config_key"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <option
                                      key="EMPTY"
                                      value=""
                                    >
                                      Choose Config Key
                                    </option>
                                    <option
                                      key="configuration.listen_address"
                                      value="configuration.listen_address"
                                    >
                                      configuration.listen_address
                                    </option>
                                    <option
                                      key="name"
                                      value="name"
                                    >
                                      name
                                    </option>
                                    <option
                                      key="title"
                                      value="title"
                                    >
                                      title
                                    </option>
                                  </select>
                                </FormControl>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </FormGroup__StyledFormGroup>
                  </Component>
                </Input>
              </div>
            </Col>
            <Col
              bsClass="col"
              componentClass="div"
              sm={5}
            >
              <div
                className="col-sm-5"
              >
                <Input
                  addonAfter={null}
                  bsStyle={null}
                  buttonAfter={null}
                  help=""
                  id="parameter"
                  label="Parameter"
                  name="parameter"
                  onChange={[Function]}
                  placeholder=""
                  required={true}
                  type="select"
                  value=""
                >
                  <Component
                    controlId="parameter"
                    validationState={null}
                  >
                    <FormGroup__StyledFormGroup
                      controlId="parameter"
                      validationState={null}
                    >
                      <FormGroup
                        bsClass="form-group"
                        className=""
                        controlId="parameter"
                        validationState={null}
                      >
                        <div
                          className="form-group"
                        >
                          <ControlLabel>
                            <ControlLabel
                              bsClass="control-label"
                              className="c1"
                              srOnly={false}
                            >
                              <label
                                className="c1 control-label"
                                htmlFor="parameter"
                              >
                                Parameter
                              </label>
                            </ControlLabel>
                          </ControlLabel>
                          <InputWrapper>
                            <span>
                              <FormControl
                                componentClass="select"
                                inputRef={[Function]}
                                label="Parameter"
                                name="parameter"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                type="select"
                                value=""
                              >
                                <FormControl
                                  bsClass="form-control"
                                  className="c2"
                                  componentClass="select"
                                  inputRef={[Function]}
                                  label="Parameter"
                                  name="parameter"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  type="select"
                                  value=""
                                >
                                  <select
                                    className="c2 form-control"
                                    id="parameter"
                                    label="Parameter"
                                    name="parameter"
                                    onChange={[Function]}
                                    placeholder=""
                                    required={true}
                                    type="select"
                                    value=""
                                  >
                                    <option
                                      key="EMPTY"
                                      value=""
                                    >
                                      Choose...
                                    </option>
                                    <option
                                      key="PORT"
                                      value="PORT"
                                    >
                                      Port
                                       (
                                      PORT
                                      )
                                    </option>
                                  </select>
                                </FormControl>
                              </FormControl>
                            </span>
                          </InputWrapper>
                        </div>
                      </FormGroup>
                    </FormGroup__StyledFormGroup>
                  </Component>
                </Input>
              </div>
            </Col>
            <Col
              bsClass="col"
              componentClass="div"
              sm={1}
            >
              <div
                className="col-sm-1"
              />
            </Col>
          </div>
        </Row>
      </Row>
      <Row>
        <Row
          bsClass="row"
          className="c0"
          componentClass="div"
        >
          <div
            className="c0 row"
          >
            <Col
              bsClass="col"
              componentClass="div"
              sm={2}
              smOffset={10}
            >
              <div
                className="col-sm-2 col-sm-offset-10"
              >
                <Button
                  bsStyle="primary"
                  disabled={true}
                  type="submit"
                >
                  <Button
                    active={false}
                    block={false}
                    bsClass="btn"
                    bsStyle="primary"
                    className="c3"
                    disabled={true}
                    type="submit"
                  >
                    <button
                      className="c3 btn btn-primary"
                      disabled={true}
                      type="submit"
                    >
                      Apply
                    </button>
                  </Button>
                </Button>
              </div>
            </Col>
          </div>
        </Row>
      </Row>
    </form>
    <Row>
      <Row
        bsClass="row"
        className="c0"
        componentClass="div"
      >
        <div
          className="c0 row"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={10}
            smOffset={1}
          >
            <div
              className="col-sm-10 col-sm-offset-1"
            >
              <DataTable
                className=""
                dataRowFormatter={[Function]}
                displayKey="value"
                filterBy=""
                filterKeys={Array []}
                filterLabel="Filter"
                filterSuggestions={Array []}
                headerCellFormatter={[Function]}
                headers={
                  Array [
                    "Config Key",
                    "Parameter",
                    "Action",
                  ]
                }
                id="config-key-list"
                noDataText="No data available."
                rowClassName=""
                rows={
                  Array [
                    Object {
                      "configKey": "configuration.port",
                      "paramName": "PORT",
                      "readOnly": true,
                    },
                  ]
                }
                useResponsiveTable={true}
              >
                <div>
                  <div
                    className="row "
                  >
                    <div
                      className="col-md-12"
                    >
                      <div
                        className="data-table table-responsive"
                        id="config-key-list"
                      >
                        <DataTable__StyledTable
                          className="table "
                        >
                          <table
                            className="c4 table "
                          >
                            <thead>
                              <tr>
                                <DataTableElement
                                  element="Config Key"
                                  formatter={[Function]}
                                  index={0}
                                  key="header-0"
                                >
                                  <th>
                                    Config Key
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Parameter"
                                  formatter={[Function]}
                                  index={1}
                                  key="header-1"
                                >
                                  <th>
                                    Parameter
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Action"
                                  formatter={[Function]}
                                  index={2}
                                  key="header-2"
                                >
                                  <th>
                                    Action
                                  </th>
                                </DataTableElement>
                              </tr>
                            </thead>
                            <tbody>
                              <DataTableElement
                                element={
                                  Object {
                                    "configKey": "configuration.port",
                                    "paramName": "PORT",
                                    "readOnly": true,
                                  }
                                }
                                formatter={[Function]}
                                index={0}
                                key="row-0"
                              >
                                <tr
                                  key="configuration.port"
                                >
                                  <td>
                                    configuration.port
                                  </td>
                                  <td>
                                    PORT
                                  </td>
                                  <td />
                                </tr>
                              </DataTableElement>
                            </tbody>
                          </table>
                        </DataTable__StyledTable>
                      </div>
                    </div>
                  </div>
                </div>
              </DataTable>
            </div>
          </Col>
        </div>
      </Row>
    </Row>
  </div>
</ContentPackApplyParameter>
`;
