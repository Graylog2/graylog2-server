// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackEntitiesList /> should render with empty entities 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

<ContentPackEntitiesList
  appliedParameter={Object {}}
  contentPack={
    Object {
      "entities": Array [],
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  readOnly={true}
>
  <div>
    <h2>
      Entity list
    </h2>
    <br />
    <SearchForm
      buttonLeftMargin={5}
      focusAfterMount={false}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              autoFocus={false}
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <Button
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                className="c0 submit-button"
                disabled={false}
                type="submit"
              >
                <button
                  className="c0 submit-button btn btn-default"
                  disabled={false}
                  type="submit"
                >
                  Filter
                </button>
              </Button>
            </Button>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <Button
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                className="c0 reset-button"
                disabled={false}
                onClick={[Function]}
                type="reset"
              >
                <button
                  className="c0 reset-button btn btn-default"
                  disabled={false}
                  onClick={[Function]}
                  type="reset"
                >
                  Reset
                </button>
              </Button>
            </Button>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Type",
          "Description",
          "Action",
        ]
      }
      id="entity-list"
      noDataText="No data available."
      rowClassName=""
      rows={Array []}
      sortBy={[Function]}
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="entity-list"
            >
              <p>
                No data available.
              </p>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackEntitiesList>
`;

exports[`<ContentPackEntitiesList /> should render with entities and parameters without readOnly 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c2 form {
  margin-bottom: 0;
}

.c2 .modal-dialog {
  margin-top: 55px;
}

.c2 .modal-dialog .modal-content {
  background-color: #fff;
  border-color: #a6a6a6;
}

.c2 .modal-header {
  border-bottom-color: #a6a6a6;
}

.c2 .modal-header button.close {
  color: currentColor;
}

.c2 .modal-footer {
  border-top-color: #a6a6a6;
}

.c2 .modal-title {
  font-size: 1.424rem;
}

.c2 .modal-body .form-group {
  margin-bottom: 5px;
}

.c1.table > thead > tr > th,
.c1.table > tbody > tr > th,
.c1.table > tfoot > tr > th,
.c1.table > thead > tr > td,
.c1.table > tbody > tr > td,
.c1.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c1.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c1.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c1.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c1.table .table {
  background-color: #fafafa;
}

.c1.table-bordered {
  border-color: #f0f0f0;
}

.c1.table-bordered > thead > tr > td,
.c1.table-bordered > tfoot > tr > td,
.c1.table-bordered > tbody > tr > td,
.c1.table-bordered > thead > tr > th,
.c1.table-bordered > tfoot > tr > th,
.c1.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c1.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c1.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c1.table > thead > tr > td.active,
.c1.table > tfoot > tr > td.active,
.c1.table > tbody > tr > td.active,
.c1.table > thead > tr > th.active,
.c1.table > tfoot > tr > th.active,
.c1.table > tbody > tr > th.active,
.c1.table > thead > tr.active > td,
.c1.table > tfoot > tr.active > td,
.c1.table > tbody > tr.active > td,
.c1.table > thead > tr.active > th,
.c1.table > tfoot > tr.active > th,
.c1.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c1.table-hover > tbody > tr > td.active:hover,
.c1.table-hover > tbody > tr > th.active:hover,
.c1.table-hover > tbody > tr.active:hover > td,
.c1.table-hover > tbody > tr:hover > .active,
.c1.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c1.table > thead > tr > td.success,
.c1.table > tfoot > tr > td.success,
.c1.table > tbody > tr > td.success,
.c1.table > thead > tr > th.success,
.c1.table > tfoot > tr > th.success,
.c1.table > tbody > tr > th.success,
.c1.table > thead > tr.success > td,
.c1.table > tfoot > tr.success > td,
.c1.table > tbody > tr.success > td,
.c1.table > thead > tr.success > th,
.c1.table > tfoot > tr.success > th,
.c1.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c1.table-hover > tbody > tr > td.success:hover,
.c1.table-hover > tbody > tr > th.success:hover,
.c1.table-hover > tbody > tr.success:hover > td,
.c1.table-hover > tbody > tr:hover > .success,
.c1.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c1.table > thead > tr > td.info,
.c1.table > tfoot > tr > td.info,
.c1.table > tbody > tr > td.info,
.c1.table > thead > tr > th.info,
.c1.table > tfoot > tr > th.info,
.c1.table > tbody > tr > th.info,
.c1.table > thead > tr.info > td,
.c1.table > tfoot > tr.info > td,
.c1.table > tbody > tr.info > td,
.c1.table > thead > tr.info > th,
.c1.table > tfoot > tr.info > th,
.c1.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c1.table-hover > tbody > tr > td.info:hover,
.c1.table-hover > tbody > tr > th.info:hover,
.c1.table-hover > tbody > tr.info:hover > td,
.c1.table-hover > tbody > tr:hover > .info,
.c1.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c1.table > thead > tr > td.warning,
.c1.table > tfoot > tr > td.warning,
.c1.table > tbody > tr > td.warning,
.c1.table > thead > tr > th.warning,
.c1.table > tfoot > tr > th.warning,
.c1.table > tbody > tr > th.warning,
.c1.table > thead > tr.warning > td,
.c1.table > tfoot > tr.warning > td,
.c1.table > tbody > tr.warning > td,
.c1.table > thead > tr.warning > th,
.c1.table > tfoot > tr.warning > th,
.c1.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c1.table-hover > tbody > tr > td.warning:hover,
.c1.table-hover > tbody > tr > th.warning:hover,
.c1.table-hover > tbody > tr.warning:hover > td,
.c1.table-hover > tbody > tr:hover > .warning,
.c1.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c1.table > thead > tr > td.danger,
.c1.table > tfoot > tr > td.danger,
.c1.table > tbody > tr > td.danger,
.c1.table > thead > tr > th.danger,
.c1.table > tfoot > tr > th.danger,
.c1.table > tbody > tr > th.danger,
.c1.table > thead > tr.danger > td,
.c1.table > tfoot > tr.danger > td,
.c1.table > tbody > tr.danger > td,
.c1.table > thead > tr.danger > th,
.c1.table > tfoot > tr.danger > th,
.c1.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c1.table-hover > tbody > tr > td.danger:hover,
.c1.table-hover > tbody > tr > th.danger:hover,
.c1.table-hover > tbody > tr.danger:hover > td,
.c1.table-hover > tbody > tr:hover > .danger,
.c1.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

<ContentPackEntitiesList
  appliedParameter={
    Object {
      "111-beef": Array [
        Object {
          "configKey": "title",
          "paramName": "A parameter name",
        },
      ],
    }
  }
  contentPack={
    Object {
      "description": "",
      "entities": Array [
        Object {
          "constraints": Array [],
          "data": Object {
            "configuration": Object {
              "listen_address": Object {
                "@type": "string",
                "@value": "1.2.3.4",
              },
              "port": Object {
                "@type": "integer",
                "@value": "23",
              },
            },
            "title": Object {
              "@type": "parameter",
              "@value": "TITLE",
            },
          },
          "id": "111-beef",
          "type": Object {
            "name": "Input",
            "version": "1",
          },
          "v": "1.0",
        },
        Object {
          "constraints": Array [],
          "data": Object {
            "configuration": Object {
              "listen_address": Object {
                "@type": "string",
                "@value": "1.2.3.4",
              },
              "port": Object {
                "@type": "integer",
                "@value": "22",
              },
            },
            "name": Object {
              "@type": "string",
              "@value": "BadInput",
            },
            "title": Object {
              "@type": "string",
              "@value": "A bad input",
            },
          },
          "id": "121-beef",
          "type": Object {
            "name": "Input",
            "version": "1",
          },
          "v": "1.0",
        },
      ],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [
        Object {
          "default_value": "test",
          "description": "A parameter descriptions",
          "name": "TITLE",
          "title": "A parameter name",
          "type": "string",
        },
      ],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onParameterApply={[Function]}
  onParameterClear={[Function]}
  readOnly={false}
>
  <div>
    <h2>
      Entity list
    </h2>
    <br />
    <SearchForm
      buttonLeftMargin={5}
      focusAfterMount={false}
      label={null}
      loadingLabel="Loading..."
      onQueryChange={[Function]}
      onReset={[Function]}
      onSearch={[Function]}
      placeholder="Enter search query..."
      query=""
      queryHelpComponent={null}
      queryWidth="auto"
      resetButtonLabel="Reset"
      searchBsStyle="default"
      searchButtonLabel="Filter"
      topMargin={15}
      useLoadingState={false}
      wrapperClass="search"
    >
      <div
        className="search"
        style={
          Object {
            "marginTop": 15,
          }
        }
      >
        <form
          className="form-inline"
          onSubmit={[Function]}
        >
          <div
            className="form-group has-feedback"
          >
            <input
              autoComplete="off"
              autoFocus={false}
              className="query form-control"
              id="common-search-form-query-input"
              onChange={[Function]}
              placeholder="Enter search query..."
              spellCheck="false"
              style={
                Object {
                  "width": "auto",
                }
              }
              type="text"
              value=""
            />
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <Button
              bsStyle="default"
              className="submit-button"
              disabled={false}
              type="submit"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                className="c0 submit-button"
                disabled={false}
                type="submit"
              >
                <button
                  className="c0 submit-button btn btn-default"
                  disabled={false}
                  type="submit"
                >
                  Filter
                </button>
              </Button>
            </Button>
          </div>
          <div
            className="form-group"
            style={
              Object {
                "marginLeft": 5,
              }
            }
          >
            <Button
              className="reset-button"
              onClick={[Function]}
              type="reset"
            >
              <Button
                active={false}
                block={false}
                bsClass="btn"
                bsStyle="default"
                className="c0 reset-button"
                disabled={false}
                onClick={[Function]}
                type="reset"
              >
                <button
                  className="c0 reset-button btn btn-default"
                  disabled={false}
                  onClick={[Function]}
                  type="reset"
                >
                  Reset
                </button>
              </Button>
            </Button>
          </div>
        </form>
      </div>
    </SearchForm>
    <DataTable
      className="scrollable"
      dataRowFormatter={[Function]}
      displayKey="value"
      filterBy=""
      filterKeys={Array []}
      filterLabel="Filter"
      filterSuggestions={Array []}
      headerCellFormatter={[Function]}
      headers={
        Array [
          "Title",
          "Type",
          "Description",
          "Origin",
          "Used Parameters",
          "Action",
        ]
      }
      id="entity-list"
      noDataText="No data available."
      rowClassName=""
      rows={
        Array [
          Object {
            "constraints": Array [],
            "data": Object {
              "configuration": Object {
                "listen_address": Object {
                  "@type": "string",
                  "@value": "1.2.3.4",
                },
                "port": Object {
                  "@type": "integer",
                  "@value": "23",
                },
              },
              "title": Object {
                "@type": "parameter",
                "@value": "TITLE",
              },
            },
            "id": "111-beef",
            "type": Object {
              "name": "Input",
              "version": "1",
            },
            "v": "1.0",
          },
          Object {
            "constraints": Array [],
            "data": Object {
              "configuration": Object {
                "listen_address": Object {
                  "@type": "string",
                  "@value": "1.2.3.4",
                },
                "port": Object {
                  "@type": "integer",
                  "@value": "22",
                },
              },
              "name": Object {
                "@type": "string",
                "@value": "BadInput",
              },
              "title": Object {
                "@type": "string",
                "@value": "A bad input",
              },
            },
            "id": "121-beef",
            "type": Object {
              "name": "Input",
              "version": "1",
            },
            "v": "1.0",
          },
        ]
      }
      sortBy={[Function]}
      useResponsiveTable={true}
    >
      <div>
        <div
          className="row "
        >
          <div
            className="col-md-12"
          >
            <div
              className="data-table table-responsive"
              id="entity-list"
            >
              <DataTable__StyledTable
                className="table scrollable"
              >
                <table
                  className="c1 table scrollable"
                >
                  <thead>
                    <tr>
                      <DataTableElement
                        element="Title"
                        formatter={[Function]}
                        index={0}
                        key="header-0"
                      >
                        <th>
                          Title
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Type"
                        formatter={[Function]}
                        index={1}
                        key="header-1"
                      >
                        <th>
                          Type
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Description"
                        formatter={[Function]}
                        index={2}
                        key="header-2"
                      >
                        <th>
                          Description
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Origin"
                        formatter={[Function]}
                        index={3}
                        key="header-3"
                      >
                        <th>
                          Origin
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Used Parameters"
                        formatter={[Function]}
                        index={4}
                        key="header-4"
                      >
                        <th>
                          Used Parameters
                        </th>
                      </DataTableElement>
                      <DataTableElement
                        element="Action"
                        formatter={[Function]}
                        index={5}
                        key="header-5"
                      >
                        <th>
                          Action
                        </th>
                      </DataTableElement>
                    </tr>
                  </thead>
                  <tbody>
                    <DataTableElement
                      element={
                        Object {
                          "constraints": Array [],
                          "data": Object {
                            "configuration": Object {
                              "listen_address": Object {
                                "@type": "string",
                                "@value": "1.2.3.4",
                              },
                              "port": Object {
                                "@type": "integer",
                                "@value": "23",
                              },
                            },
                            "title": Object {
                              "@type": "parameter",
                              "@value": "TITLE",
                            },
                          },
                          "id": "111-beef",
                          "type": Object {
                            "name": "Input",
                            "version": "1",
                          },
                          "v": "1.0",
                        }
                      }
                      formatter={[Function]}
                      index={0}
                      key="row-0"
                    >
                      <tr
                        key="111-beef"
                      >
                        <td
                          className="bigColumns"
                        >
                          test
                        </td>
                        <td>
                          Input
                        </td>
                        <td
                          className="bigColumns"
                        />
                        <td>
                          <span>
                            <Icon
                              className="contentPackEntity"
                              name="archive"
                              title="Content Pack"
                              type="solid"
                            >
                              <FontAwesomeIcon
                                className="contentPackEntity"
                                icon={
                                  Object {
                                    "iconName": "archive",
                                    "prefix": "fas",
                                  }
                                }
                                title="Content Pack"
                              >
                                <svg
                                  className="svg-inline--fa fa-archive"
                                />
                              </FontAwesomeIcon>
                            </Icon>
                          </span>
                        </td>
                        <td>
                          1
                        </td>
                        <td>
                          <ButtonToolbar
                            bsClass="btn-toolbar"
                          >
                            <div
                              className="btn-toolbar"
                              role="toolbar"
                            >
                              <Button
                                bsSize="xs"
                                bsStyle="primary"
                                disabled={false}
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="xs"
                                  bsStyle="primary"
                                  className="c0"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="c0 btn btn-xs btn-primary"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Edit
                                  </button>
                                </Button>
                              </Button>
                              <Button
                                bsSize="xs"
                                bsStyle="info"
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="xs"
                                  bsStyle="info"
                                  className="c0"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="c0 btn btn-xs btn-info"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Show
                                  </button>
                                </Button>
                              </Button>
                            </div>
                          </ButtonToolbar>
                        </td>
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c2"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c2"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                      </tr>
                    </DataTableElement>
                    <DataTableElement
                      element={
                        Object {
                          "constraints": Array [],
                          "data": Object {
                            "configuration": Object {
                              "listen_address": Object {
                                "@type": "string",
                                "@value": "1.2.3.4",
                              },
                              "port": Object {
                                "@type": "integer",
                                "@value": "22",
                              },
                            },
                            "name": Object {
                              "@type": "string",
                              "@value": "BadInput",
                            },
                            "title": Object {
                              "@type": "string",
                              "@value": "A bad input",
                            },
                          },
                          "id": "121-beef",
                          "type": Object {
                            "name": "Input",
                            "version": "1",
                          },
                          "v": "1.0",
                        }
                      }
                      formatter={[Function]}
                      index={1}
                      key="row-1"
                    >
                      <tr
                        key="121-beef"
                      >
                        <td
                          className="bigColumns"
                        >
                          A bad input
                        </td>
                        <td>
                          Input
                        </td>
                        <td
                          className="bigColumns"
                        />
                        <td>
                          <span>
                            <Icon
                              name="server"
                              title="Server"
                              type="solid"
                            >
                              <FontAwesomeIcon
                                icon={
                                  Object {
                                    "iconName": "server",
                                    "prefix": "fas",
                                  }
                                }
                                title="Server"
                              >
                                <svg
                                  className="svg-inline--fa fa-server"
                                />
                              </FontAwesomeIcon>
                            </Icon>
                          </span>
                        </td>
                        <td>
                          0
                        </td>
                        <td>
                          <ButtonToolbar
                            bsClass="btn-toolbar"
                          >
                            <div
                              className="btn-toolbar"
                              role="toolbar"
                            >
                              <Button
                                bsSize="xs"
                                bsStyle="primary"
                                disabled={false}
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="xs"
                                  bsStyle="primary"
                                  className="c0"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="c0 btn btn-xs btn-primary"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Edit
                                  </button>
                                </Button>
                              </Button>
                              <Button
                                bsSize="xs"
                                bsStyle="info"
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="xs"
                                  bsStyle="info"
                                  className="c0"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="c0 btn btn-xs btn-info"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Show
                                  </button>
                                </Button>
                              </Button>
                            </div>
                          </ButtonToolbar>
                        </td>
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c2"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                        <BootstrapModalWrapper
                          backdrop="static"
                          bsSize="large"
                          onClose={[Function]}
                          onHide={[Function]}
                          onOpen={[Function]}
                          showModal={false}
                        >
                          <Modal
                            backdrop="static"
                            bsSize="large"
                            onHide={[Function]}
                            show={false}
                          >
                            <Modal
                              animation={true}
                              autoFocus={true}
                              backdrop="static"
                              bsClass="modal"
                              bsSize="large"
                              className="c2"
                              dialogComponentClass={[Function]}
                              enforceFocus={true}
                              keyboard={true}
                              manager={
                                ModalManager {
                                  "add": [Function],
                                  "containers": Array [],
                                  "data": Array [],
                                  "handleContainerOverflow": true,
                                  "hideSiblingNodes": true,
                                  "isTopModal": [Function],
                                  "modals": Array [],
                                  "remove": [Function],
                                }
                              }
                              onHide={[Function]}
                              renderBackdrop={[Function]}
                              restoreFocus={true}
                              show={false}
                            >
                              <Modal
                                autoFocus={true}
                                backdrop="static"
                                backdropClassName="modal-backdrop"
                                backdropTransition={[Function]}
                                containerClassName="modal-open"
                                enforceFocus={true}
                                keyboard={true}
                                manager={
                                  ModalManager {
                                    "add": [Function],
                                    "containers": Array [],
                                    "data": Array [],
                                    "handleContainerOverflow": true,
                                    "hideSiblingNodes": true,
                                    "isTopModal": [Function],
                                    "modals": Array [],
                                    "remove": [Function],
                                  }
                                }
                                onEntering={[Function]}
                                onExited={[Function]}
                                onHide={[Function]}
                                onMouseUp={[Function]}
                                renderBackdrop={[Function]}
                                restoreFocus={true}
                                show={false}
                                transition={[Function]}
                              />
                            </Modal>
                          </Modal>
                        </BootstrapModalWrapper>
                      </tr>
                    </DataTableElement>
                  </tbody>
                </table>
              </DataTable__StyledTable>
            </div>
          </div>
        </div>
      </div>
    </DataTable>
  </div>
</ContentPackEntitiesList>
`;
