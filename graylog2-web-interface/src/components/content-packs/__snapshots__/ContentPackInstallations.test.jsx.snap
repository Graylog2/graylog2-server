// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackInstallations /> should render with a installation 1`] = `
.c1.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c1.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c1.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c1.btn-danger[disabled],
.c1.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-danger[disabled]:hover,
.c1.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c1.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c1.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c1.btn-default[disabled],
.c1.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-default[disabled]:hover,
.c1.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c1.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c1.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c1.btn-info[disabled],
.c1.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-info[disabled]:hover,
.c1.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c1.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c1.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c1.btn-link[disabled],
.c1.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-link[disabled]:hover,
.c1.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c1.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c1.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c1.btn-primary[disabled],
.c1.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-primary[disabled]:hover,
.c1.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c1.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c1.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c1.btn-success[disabled],
.c1.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-success[disabled]:hover,
.c1.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c1.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c1.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c1.btn-warning[disabled],
.c1.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.btn-warning[disabled]:hover,
.c1.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c2 form {
  margin-bottom: 0;
}

.c2 .modal-dialog {
  margin-top: 55px;
}

.c2 .modal-dialog .modal-content {
  background-color: #fff;
  border-color: #a6a6a6;
}

.c2 .modal-header {
  border-bottom-color: #a6a6a6;
}

.c2 .modal-header button.close {
  color: currentColor;
}

.c2 .modal-footer {
  border-top-color: #a6a6a6;
}

.c2 .modal-title {
  font-size: 1.424rem;
}

.c2 .modal-body .form-group {
  margin-bottom: 5px;
}

.c0.table > thead > tr > th,
.c0.table > tbody > tr > th,
.c0.table > tfoot > tr > th,
.c0.table > thead > tr > td,
.c0.table > tbody > tr > td,
.c0.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c0.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c0.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c0.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c0.table .table {
  background-color: #fafafa;
}

.c0.table-bordered {
  border-color: #f0f0f0;
}

.c0.table-bordered > thead > tr > td,
.c0.table-bordered > tfoot > tr > td,
.c0.table-bordered > tbody > tr > td,
.c0.table-bordered > thead > tr > th,
.c0.table-bordered > tfoot > tr > th,
.c0.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c0.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c0.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c0.table > thead > tr > td.active,
.c0.table > tfoot > tr > td.active,
.c0.table > tbody > tr > td.active,
.c0.table > thead > tr > th.active,
.c0.table > tfoot > tr > th.active,
.c0.table > tbody > tr > th.active,
.c0.table > thead > tr.active > td,
.c0.table > tfoot > tr.active > td,
.c0.table > tbody > tr.active > td,
.c0.table > thead > tr.active > th,
.c0.table > tfoot > tr.active > th,
.c0.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c0.table-hover > tbody > tr > td.active:hover,
.c0.table-hover > tbody > tr > th.active:hover,
.c0.table-hover > tbody > tr.active:hover > td,
.c0.table-hover > tbody > tr:hover > .active,
.c0.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c0.table > thead > tr > td.success,
.c0.table > tfoot > tr > td.success,
.c0.table > tbody > tr > td.success,
.c0.table > thead > tr > th.success,
.c0.table > tfoot > tr > th.success,
.c0.table > tbody > tr > th.success,
.c0.table > thead > tr.success > td,
.c0.table > tfoot > tr.success > td,
.c0.table > tbody > tr.success > td,
.c0.table > thead > tr.success > th,
.c0.table > tfoot > tr.success > th,
.c0.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c0.table-hover > tbody > tr > td.success:hover,
.c0.table-hover > tbody > tr > th.success:hover,
.c0.table-hover > tbody > tr.success:hover > td,
.c0.table-hover > tbody > tr:hover > .success,
.c0.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c0.table > thead > tr > td.info,
.c0.table > tfoot > tr > td.info,
.c0.table > tbody > tr > td.info,
.c0.table > thead > tr > th.info,
.c0.table > tfoot > tr > th.info,
.c0.table > tbody > tr > th.info,
.c0.table > thead > tr.info > td,
.c0.table > tfoot > tr.info > td,
.c0.table > tbody > tr.info > td,
.c0.table > thead > tr.info > th,
.c0.table > tfoot > tr.info > th,
.c0.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c0.table-hover > tbody > tr > td.info:hover,
.c0.table-hover > tbody > tr > th.info:hover,
.c0.table-hover > tbody > tr.info:hover > td,
.c0.table-hover > tbody > tr:hover > .info,
.c0.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c0.table > thead > tr > td.warning,
.c0.table > tfoot > tr > td.warning,
.c0.table > tbody > tr > td.warning,
.c0.table > thead > tr > th.warning,
.c0.table > tfoot > tr > th.warning,
.c0.table > tbody > tr > th.warning,
.c0.table > thead > tr.warning > td,
.c0.table > tfoot > tr.warning > td,
.c0.table > tbody > tr.warning > td,
.c0.table > thead > tr.warning > th,
.c0.table > tfoot > tr.warning > th,
.c0.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c0.table-hover > tbody > tr > td.warning:hover,
.c0.table-hover > tbody > tr > th.warning:hover,
.c0.table-hover > tbody > tr.warning:hover > td,
.c0.table-hover > tbody > tr:hover > .warning,
.c0.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c0.table > thead > tr > td.danger,
.c0.table > tfoot > tr > td.danger,
.c0.table > tbody > tr > td.danger,
.c0.table > thead > tr > th.danger,
.c0.table > tfoot > tr > th.danger,
.c0.table > tbody > tr > th.danger,
.c0.table > thead > tr.danger > td,
.c0.table > tfoot > tr.danger > td,
.c0.table > tbody > tr.danger > td,
.c0.table > thead > tr.danger > th,
.c0.table > tfoot > tr.danger > th,
.c0.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c0.table-hover > tbody > tr > td.danger:hover,
.c0.table-hover > tbody > tr > th.danger:hover,
.c0.table-hover > tbody > tr.danger:hover > td,
.c0.table-hover > tbody > tr:hover > .danger,
.c0.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

<ContentPackInstallations
  installations={
    Array [
      Object {
        "_id": "5b55b8b73d274645e49f7eec",
        "comment": "The fake input",
        "content_pack_id": "82d59d98-7440-ab74-9857-36b2f1b7ab8a",
        "content_pack_revision": 1,
        "created_at": "2018-07-23T11:15:03.871Z",
        "created_by": "kmerz",
        "entities": Array [
          Object {
            "content_pack_entity_id": "5b6d973d3d274645572a4318",
            "id": "5ba38df33d274660f0b94118",
            "title": "hulud.net",
            "type": Object {
              "name": "input",
              "version": "1",
            },
          },
        ],
        "parameters": Object {
          "SOURCE": Object {
            "name": "string",
            "value": "hulud.com.uk",
          },
        },
      },
    ]
  }
  onUninstall={[Function]}
>
  <DataTable
    className=""
    dataRowFormatter={[Function]}
    displayKey="value"
    filterBy=""
    filterKeys={Array []}
    filterLabel="Filter"
    filterSuggestions={Array []}
    headerCellFormatter={[Function]}
    headers={
      Array [
        "Comment",
        "Version",
        "Action",
      ]
    }
    id="content-packs-versions"
    noDataText="No data available."
    rowClassName=""
    rows={
      Array [
        Object {
          "_id": "5b55b8b73d274645e49f7eec",
          "comment": "The fake input",
          "content_pack_id": "82d59d98-7440-ab74-9857-36b2f1b7ab8a",
          "content_pack_revision": 1,
          "created_at": "2018-07-23T11:15:03.871Z",
          "created_by": "kmerz",
          "entities": Array [
            Object {
              "content_pack_entity_id": "5b6d973d3d274645572a4318",
              "id": "5ba38df33d274660f0b94118",
              "title": "hulud.net",
              "type": Object {
                "name": "input",
                "version": "1",
              },
            },
          ],
          "parameters": Object {
            "SOURCE": Object {
              "name": "string",
              "value": "hulud.com.uk",
            },
          },
        },
      ]
    }
    sortByKey="comment"
    useResponsiveTable={true}
  >
    <div>
      <div
        className="row "
      >
        <div
          className="col-md-12"
        >
          <div
            className="data-table table-responsive"
            id="content-packs-versions"
          >
            <DataTable__StyledTable
              className="table "
            >
              <table
                className="c0 table "
              >
                <thead>
                  <tr>
                    <DataTableElement
                      element="Comment"
                      formatter={[Function]}
                      index={0}
                      key="header-0"
                    >
                      <th>
                        Comment
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Version"
                      formatter={[Function]}
                      index={1}
                      key="header-1"
                    >
                      <th>
                        Version
                      </th>
                    </DataTableElement>
                    <DataTableElement
                      element="Action"
                      formatter={[Function]}
                      index={2}
                      key="header-2"
                    >
                      <th
                        className="text-right"
                      >
                        Action
                      </th>
                    </DataTableElement>
                  </tr>
                </thead>
                <tbody>
                  <DataTableElement
                    element={
                      Object {
                        "_id": "5b55b8b73d274645e49f7eec",
                        "comment": "The fake input",
                        "content_pack_id": "82d59d98-7440-ab74-9857-36b2f1b7ab8a",
                        "content_pack_revision": 1,
                        "created_at": "2018-07-23T11:15:03.871Z",
                        "created_by": "kmerz",
                        "entities": Array [
                          Object {
                            "content_pack_entity_id": "5b6d973d3d274645572a4318",
                            "id": "5ba38df33d274660f0b94118",
                            "title": "hulud.net",
                            "type": Object {
                              "name": "input",
                              "version": "1",
                            },
                          },
                        ],
                        "parameters": Object {
                          "SOURCE": Object {
                            "name": "string",
                            "value": "hulud.com.uk",
                          },
                        },
                      }
                    }
                    formatter={[Function]}
                    index={0}
                    key="row-0"
                  >
                    <tr
                      key="[object Object]"
                    >
                      <td>
                        The fake input
                      </td>
                      <td>
                        1
                      </td>
                      <td>
                        <div
                          className="pull-right"
                        >
                          <ButtonToolbar
                            bsClass="btn-toolbar"
                          >
                            <div
                              className="btn-toolbar"
                              role="toolbar"
                            >
                              <Button
                                bsSize="small"
                                bsStyle="primary"
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="small"
                                  bsStyle="primary"
                                  className="c1"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="c1 btn btn-sm btn-primary"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    Uninstall
                                  </button>
                                </Button>
                              </Button>
                              <Button
                                bsSize="small"
                                bsStyle="info"
                                onClick={[Function]}
                              >
                                <Button
                                  active={false}
                                  block={false}
                                  bsClass="btn"
                                  bsSize="small"
                                  bsStyle="info"
                                  className="c1"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <button
                                    className="c1 btn btn-sm btn-info"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    View
                                  </button>
                                </Button>
                              </Button>
                              <BootstrapModalWrapper
                                backdrop="static"
                                bsSize="large"
                                onClose={[Function]}
                                onHide={[Function]}
                                onOpen={[Function]}
                                showModal={false}
                              >
                                <Modal
                                  backdrop="static"
                                  bsSize="large"
                                  onHide={[Function]}
                                  show={false}
                                >
                                  <Modal
                                    animation={true}
                                    autoFocus={true}
                                    backdrop="static"
                                    bsClass="modal"
                                    bsSize="large"
                                    className="c2"
                                    dialogComponentClass={[Function]}
                                    enforceFocus={true}
                                    keyboard={true}
                                    manager={
                                      ModalManager {
                                        "add": [Function],
                                        "containers": Array [],
                                        "data": Array [],
                                        "handleContainerOverflow": true,
                                        "hideSiblingNodes": true,
                                        "isTopModal": [Function],
                                        "modals": Array [],
                                        "remove": [Function],
                                      }
                                    }
                                    onHide={[Function]}
                                    renderBackdrop={[Function]}
                                    restoreFocus={true}
                                    show={false}
                                  >
                                    <Modal
                                      autoFocus={true}
                                      backdrop="static"
                                      backdropClassName="modal-backdrop"
                                      backdropTransition={[Function]}
                                      containerClassName="modal-open"
                                      enforceFocus={true}
                                      keyboard={true}
                                      manager={
                                        ModalManager {
                                          "add": [Function],
                                          "containers": Array [],
                                          "data": Array [],
                                          "handleContainerOverflow": true,
                                          "hideSiblingNodes": true,
                                          "isTopModal": [Function],
                                          "modals": Array [],
                                          "remove": [Function],
                                        }
                                      }
                                      onEntering={[Function]}
                                      onExited={[Function]}
                                      onHide={[Function]}
                                      onMouseUp={[Function]}
                                      renderBackdrop={[Function]}
                                      restoreFocus={true}
                                      show={false}
                                      transition={[Function]}
                                    />
                                  </Modal>
                                </Modal>
                              </BootstrapModalWrapper>
                            </div>
                          </ButtonToolbar>
                        </div>
                      </td>
                    </tr>
                  </DataTableElement>
                </tbody>
              </table>
            </DataTable__StyledTable>
          </div>
        </div>
      </div>
    </div>
  </DataTable>
</ContentPackInstallations>
`;

exports[`<ContentPackInstallations /> should render with empty installations 1`] = `
<ContentPackInstallations
  installations={Array []}
  onUninstall={[Function]}
>
  <DataTable
    className=""
    dataRowFormatter={[Function]}
    displayKey="value"
    filterBy=""
    filterKeys={Array []}
    filterLabel="Filter"
    filterSuggestions={Array []}
    headerCellFormatter={[Function]}
    headers={
      Array [
        "Comment",
        "Version",
        "Action",
      ]
    }
    id="content-packs-versions"
    noDataText="No data available."
    rowClassName=""
    rows={Array []}
    sortByKey="comment"
    useResponsiveTable={true}
  >
    <div>
      <div
        className="row "
      >
        <div
          className="col-md-12"
        >
          <div
            className="data-table table-responsive"
            id="content-packs-versions"
          >
            <p>
              No data available.
            </p>
          </div>
        </div>
      </div>
    </div>
  </DataTable>
</ContentPackInstallations>
`;

exports[`<ContentPackInstallations /> should render without installations 1`] = `
<ContentPackInstallations
  installations={Array []}
  onUninstall={[Function]}
>
  <DataTable
    className=""
    dataRowFormatter={[Function]}
    displayKey="value"
    filterBy=""
    filterKeys={Array []}
    filterLabel="Filter"
    filterSuggestions={Array []}
    headerCellFormatter={[Function]}
    headers={
      Array [
        "Comment",
        "Version",
        "Action",
      ]
    }
    id="content-packs-versions"
    noDataText="No data available."
    rowClassName=""
    rows={Array []}
    sortByKey="comment"
    useResponsiveTable={true}
  >
    <div>
      <div
        className="row "
      >
        <div
          className="col-md-12"
        >
          <div
            className="data-table table-responsive"
            id="content-packs-versions"
          >
            <p>
              No data available.
            </p>
          </div>
        </div>
      </div>
    </div>
  </DataTable>
</ContentPackInstallations>
`;
