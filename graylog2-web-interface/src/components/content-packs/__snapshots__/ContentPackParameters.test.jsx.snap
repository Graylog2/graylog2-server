// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContentPackParameters /> should render a parameter 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 .modal-content {
  background-color: #fff;
  border-color: rgba(31,31,31,0.2);
}

.c1 .modal-content .modal-header {
  border-bottom-color: #e6e6e6;
}

.c1 .modal-content .modal-footer {
  border-top-color: #e6e6e6;
}

.c1 .modal-title {
  font-size: 21px;
}

.c1 .modal-dialog {
  margin-top: 55px;
}

.c1 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c1 form {
  margin-bottom: 0;
}

.c1 .modal-body .form-group {
  margin-bottom: 5px;
}

<ContentPackParameters
  appliedParameter={Object {}}
  contentPack={
    Object {
      "description": "",
      "entities": Array [
        Object {
          "constraints": Array [],
          "data": Object {
            "configuration": Object {
              "listen_address": Object {
                "@type": "string",
                "@value": "1.2.3.4",
              },
              "port": Object {
                "@type": "integer",
                "@value": "23",
              },
            },
            "name": Object {
              "@type": "string",
              "@value": "Input",
            },
            "title": Object {
              "@type": "string",
              "@value": "A good input",
            },
          },
          "id": "111-beef",
          "type": Object {
            "name": "input",
            "version": "1",
          },
          "v": "1.0",
        },
      ],
      "id": "dead-beef",
      "name": "",
      "parameters": Array [
        Object {
          "default_value": "test",
          "description": "A parameter descriptions",
          "name": "A parameter name",
          "title": "A parameter title",
          "type": "string",
        },
      ],
      "rev": 1,
      "summary": "",
      "url": "",
      "v": 1,
      "vendor": "",
    }
  }
  onStateChange={[Function]}
>
  <div>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={9}
          smOffset={1}
        >
          <div
            className="col-sm-9 col-sm-offset-1"
          >
            <ContentPackParameterList
              appliedParameter={Object {}}
              contentPack={
                Object {
                  "description": "",
                  "entities": Array [
                    Object {
                      "constraints": Array [],
                      "data": Object {
                        "configuration": Object {
                          "listen_address": Object {
                            "@type": "string",
                            "@value": "1.2.3.4",
                          },
                          "port": Object {
                            "@type": "integer",
                            "@value": "23",
                          },
                        },
                        "name": Object {
                          "@type": "string",
                          "@value": "Input",
                        },
                        "title": Object {
                          "@type": "string",
                          "@value": "A good input",
                        },
                      },
                      "id": "111-beef",
                      "type": Object {
                        "name": "input",
                        "version": "1",
                      },
                      "v": "1.0",
                    },
                  ],
                  "id": "dead-beef",
                  "name": "",
                  "parameters": Array [
                    Object {
                      "default_value": "test",
                      "description": "A parameter descriptions",
                      "name": "A parameter name",
                      "title": "A parameter title",
                      "type": "string",
                    },
                  ],
                  "rev": 1,
                  "summary": "",
                  "url": "",
                  "v": 1,
                  "vendor": "",
                }
              }
              onAddParameter={[Function]}
              onDeleteParameter={[Function]}
              readOnly={false}
            >
              <div>
                <h2>
                  Parameters list
                </h2>
                <br />
                <ForwardRef
                  bsSize="small"
                  bsStyle="info"
                  onClick={[Function]}
                  title="Edit Modal"
                >
                  <Button__StyledButton
                    bsSize="small"
                    bsStyle="info"
                    onClick={[Function]}
                    title="Edit Modal"
                  >
                    <StyledComponent
                      bsSize="small"
                      bsStyle="info"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                            "xsmall",
                          ],
                          "STYLES": Array [
                            "success",
                            "warning",
                            "danger",
                            "info",
                            "default",
                            "primary",
                            "link",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Button__StyledButton-c9cbmb-0",
                            "isStatic": false,
                            "lastClassName": "c0",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Button__StyledButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Edit Modal"
                    >
                      <Button
                        active={false}
                        block={false}
                        bsClass="btn"
                        bsSize="small"
                        bsStyle="info"
                        className="c0"
                        disabled={false}
                        onClick={[Function]}
                        title="Edit Modal"
                      >
                        <button
                          className="c0 btn btn-sm btn-info"
                          disabled={false}
                          onClick={[Function]}
                          title="Edit Modal"
                          type="button"
                        >
                          Create parameter
                        </button>
                      </Button>
                    </StyledComponent>
                  </Button__StyledButton>
                </ForwardRef>
                <BootstrapModalWrapper
                  backdrop="static"
                  bsSize="large"
                  onClose={[Function]}
                  onHide={[Function]}
                  onOpen={[Function]}
                  showModal={false}
                >
                  <Modal
                    backdrop="static"
                    bsSize="large"
                    onHide={[Function]}
                    show={false}
                  >
                    <StyledComponent
                      backdrop="static"
                      bsSize="large"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "BACKDROP_TRANSITION_DURATION": 150,
                          "Body": [Function],
                          "Dialog": [Function],
                          "Footer": [Function],
                          "Header": [Function],
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "TRANSITION_DURATION": 300,
                          "Title": [Function],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Modal-nuree8-0",
                            "isStatic": false,
                            "lastClassName": "c1",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Modal",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Modal-nuree8-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onHide={[Function]}
                      show={false}
                    >
                      <Modal
                        animation={true}
                        autoFocus={true}
                        backdrop="static"
                        bsClass="modal"
                        bsSize="large"
                        className="c1"
                        dialogComponentClass={[Function]}
                        enforceFocus={true}
                        keyboard={true}
                        manager={
                          ModalManager {
                            "add": [Function],
                            "containers": Array [],
                            "data": Array [],
                            "handleContainerOverflow": true,
                            "hideSiblingNodes": true,
                            "isTopModal": [Function],
                            "modals": Array [],
                            "remove": [Function],
                          }
                        }
                        onHide={[Function]}
                        renderBackdrop={[Function]}
                        restoreFocus={true}
                        show={false}
                      >
                        <Modal
                          autoFocus={true}
                          backdrop="static"
                          backdropClassName="modal-backdrop"
                          backdropTransition={[Function]}
                          containerClassName="modal-open"
                          enforceFocus={true}
                          keyboard={true}
                          manager={
                            ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
                          }
                          onEntering={[Function]}
                          onExited={[Function]}
                          onHide={[Function]}
                          onMouseUp={[Function]}
                          renderBackdrop={[Function]}
                          restoreFocus={true}
                          show={false}
                          transition={[Function]}
                        />
                      </Modal>
                    </StyledComponent>
                  </Modal>
                </BootstrapModalWrapper>
                <span>
                  <br />
                  <br />
                </span>
                <SearchForm
                  buttonLeftMargin={5}
                  label={null}
                  loadingLabel="Loading..."
                  onQueryChange={[Function]}
                  onReset={[Function]}
                  onSearch={[Function]}
                  placeholder="Enter search query..."
                  query=""
                  queryHelpComponent={null}
                  queryWidth="auto"
                  resetButtonLabel="Reset"
                  searchBsStyle="default"
                  searchButtonLabel="Filter"
                  topMargin={15}
                  useLoadingState={false}
                  wrapperClass="search"
                >
                  <div
                    className="search"
                    style={
                      Object {
                        "marginTop": 15,
                      }
                    }
                  >
                    <form
                      className="form-inline"
                      onSubmit={[Function]}
                    >
                      <div
                        className="form-group has-feedback"
                      >
                        <input
                          autoComplete="off"
                          className="query form-control"
                          id="common-search-form-query-input"
                          onChange={[Function]}
                          placeholder="Enter search query..."
                          spellCheck="false"
                          style={
                            Object {
                              "width": "auto",
                            }
                          }
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="submit-button"
                          disabled={false}
                          type="submit"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="submit-button"
                            disabled={false}
                            type="submit"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="submit-button"
                              disabled={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              type="submit"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 submit-button"
                                disabled={false}
                                type="submit"
                              >
                                <button
                                  className="c0 submit-button btn btn-default"
                                  disabled={false}
                                  type="submit"
                                >
                                  Filter
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="reset-button"
                          onClick={[Function]}
                          type="reset"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="reset-button"
                            onClick={[Function]}
                            type="reset"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="reset-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="reset"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 reset-button"
                                disabled={false}
                                onClick={[Function]}
                                type="reset"
                              >
                                <button
                                  className="c0 reset-button btn btn-default"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="reset"
                                >
                                  Reset
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </form>
                  </div>
                </SearchForm>
                <DataTable
                  className="scrollable"
                  dataRowFormatter={[Function]}
                  displayKey="value"
                  filterBy=""
                  filterKeys={Array []}
                  filterLabel="Filter"
                  filterSuggestions={Array []}
                  headerCellFormatter={[Function]}
                  headers={
                    Array [
                      "Title",
                      "Name",
                      "Description",
                      "Value Type",
                      "Default Value",
                      "Used",
                      "Action",
                    ]
                  }
                  id="parameter-list"
                  noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
                  rowClassName=""
                  rows={
                    Array [
                      Object {
                        "default_value": "test",
                        "description": "A parameter descriptions",
                        "name": "A parameter name",
                        "title": "A parameter title",
                        "type": "string",
                      },
                    ]
                  }
                  sortByKey="title"
                  useResponsiveTable={true}
                >
                  <div>
                    <div
                      className="row "
                    >
                      <div
                        className="col-md-12"
                      >
                        <div
                          className="data-table table-responsive"
                          id="parameter-list"
                        >
                          <table
                            className="table scrollable"
                          >
                            <thead>
                              <tr>
                                <DataTableElement
                                  element="Title"
                                  formatter={[Function]}
                                  index={0}
                                  key="header-0"
                                >
                                  <th>
                                    Title
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Name"
                                  formatter={[Function]}
                                  index={1}
                                  key="header-1"
                                >
                                  <th>
                                    Name
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Description"
                                  formatter={[Function]}
                                  index={2}
                                  key="header-2"
                                >
                                  <th>
                                    Description
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Value Type"
                                  formatter={[Function]}
                                  index={3}
                                  key="header-3"
                                >
                                  <th>
                                    Value Type
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Default Value"
                                  formatter={[Function]}
                                  index={4}
                                  key="header-4"
                                >
                                  <th>
                                    Default Value
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Used"
                                  formatter={[Function]}
                                  index={5}
                                  key="header-5"
                                >
                                  <th>
                                    Used
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Action"
                                  formatter={[Function]}
                                  index={6}
                                  key="header-6"
                                >
                                  <th>
                                    Action
                                  </th>
                                </DataTableElement>
                              </tr>
                            </thead>
                            <tbody>
                              <DataTableElement
                                element={
                                  Object {
                                    "default_value": "test",
                                    "description": "A parameter descriptions",
                                    "name": "A parameter name",
                                    "title": "A parameter title",
                                    "type": "string",
                                  }
                                }
                                formatter={[Function]}
                                index={0}
                                key="row-0"
                              >
                                <tr
                                  key="A parameter title"
                                >
                                  <td
                                    className="bigColumns"
                                  >
                                    A parameter title
                                  </td>
                                  <td>
                                    A parameter name
                                  </td>
                                  <td
                                    className="bigColumns"
                                  >
                                    A parameter descriptions
                                  </td>
                                  <td>
                                    string
                                  </td>
                                  <td>
                                    test
                                  </td>
                                  <td>
                                    <ForwardRef
                                      className="failure"
                                    >
                                      <Badge__StyledBadge
                                        className="failure"
                                      >
                                        <StyledComponent
                                          className="failure"
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "Badge__StyledBadge-sc-4gzqz0-0",
                                                "isStatic": false,
                                                "lastClassName": "gDhrrS",
                                                "rules": Array [
                                                  [Function],
                                                ],
                                              },
                                              "displayName": "Badge__StyledBadge",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "Badge__StyledBadge-sc-4gzqz0-0",
                                              "target": [Function],
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <Badge
                                            bsClass="badge"
                                            className="failure"
                                            pullRight={false}
                                          >
                                            <span
                                              className="failure badge"
                                            >
                                              <Icon
                                                name="times"
                                              >
                                                <FontAwesomeIcon
                                                  icon={
                                                    Object {
                                                      "iconName": "times",
                                                      "prefix": "fas",
                                                    }
                                                  }
                                                >
                                                  <svg
                                                    className="svg-inline--fa fa-times"
                                                  />
                                                </FontAwesomeIcon>
                                              </Icon>
                                            </span>
                                          </Badge>
                                        </StyledComponent>
                                      </Badge__StyledBadge>
                                    </ForwardRef>
                                  </td>
                                  <td>
                                    <ButtonToolbar
                                      bsClass="btn-toolbar"
                                    >
                                      <div
                                        className="btn-toolbar"
                                        role="toolbar"
                                      >
                                        <ForwardRef
                                          bsSize="xs"
                                          bsStyle="primary"
                                          disabled={false}
                                          onClick={[Function]}
                                          title="Delete Parameter"
                                        >
                                          <Button__StyledButton
                                            bsSize="xs"
                                            bsStyle="primary"
                                            disabled={false}
                                            onClick={[Function]}
                                            title="Delete Parameter"
                                          >
                                            <StyledComponent
                                              bsSize="xs"
                                              bsStyle="primary"
                                              disabled={false}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "SIZES": Array [
                                                    "large",
                                                    "small",
                                                    "xsmall",
                                                  ],
                                                  "STYLES": Array [
                                                    "success",
                                                    "warning",
                                                    "danger",
                                                    "info",
                                                    "default",
                                                    "primary",
                                                    "link",
                                                  ],
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c0",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Button__StyledButton",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                              title="Delete Parameter"
                                            >
                                              <Button
                                                active={false}
                                                block={false}
                                                bsClass="btn"
                                                bsSize="xs"
                                                bsStyle="primary"
                                                className="c0"
                                                disabled={false}
                                                onClick={[Function]}
                                                title="Delete Parameter"
                                              >
                                                <button
                                                  className="c0 btn btn-xs btn-primary"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  title="Delete Parameter"
                                                  type="button"
                                                >
                                                  Delete
                                                </button>
                                              </Button>
                                            </StyledComponent>
                                          </Button__StyledButton>
                                        </ForwardRef>
                                        <ForwardRef
                                          bsSize="xsmall"
                                          bsStyle="info"
                                          onClick={[Function]}
                                          title="Edit Modal"
                                        >
                                          <Button__StyledButton
                                            bsSize="xsmall"
                                            bsStyle="info"
                                            onClick={[Function]}
                                            title="Edit Modal"
                                          >
                                            <StyledComponent
                                              bsSize="xsmall"
                                              bsStyle="info"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "SIZES": Array [
                                                    "large",
                                                    "small",
                                                    "xsmall",
                                                  ],
                                                  "STYLES": Array [
                                                    "success",
                                                    "warning",
                                                    "danger",
                                                    "info",
                                                    "default",
                                                    "primary",
                                                    "link",
                                                  ],
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c0",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Button__StyledButton",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                              title="Edit Modal"
                                            >
                                              <Button
                                                active={false}
                                                block={false}
                                                bsClass="btn"
                                                bsSize="xsmall"
                                                bsStyle="info"
                                                className="c0"
                                                disabled={false}
                                                onClick={[Function]}
                                                title="Edit Modal"
                                              >
                                                <button
                                                  className="c0 btn btn-xs btn-info"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  title="Edit Modal"
                                                  type="button"
                                                >
                                                  Edit
                                                </button>
                                              </Button>
                                            </StyledComponent>
                                          </Button__StyledButton>
                                        </ForwardRef>
                                        <BootstrapModalWrapper
                                          backdrop="static"
                                          bsSize="large"
                                          onClose={[Function]}
                                          onHide={[Function]}
                                          onOpen={[Function]}
                                          showModal={false}
                                        >
                                          <Modal
                                            backdrop="static"
                                            bsSize="large"
                                            onHide={[Function]}
                                            show={false}
                                          >
                                            <StyledComponent
                                              backdrop="static"
                                              bsSize="large"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "BACKDROP_TRANSITION_DURATION": 150,
                                                  "Body": [Function],
                                                  "Dialog": [Function],
                                                  "Footer": [Function],
                                                  "Header": [Function],
                                                  "SIZES": Array [
                                                    "large",
                                                    "small",
                                                  ],
                                                  "TRANSITION_DURATION": 300,
                                                  "Title": [Function],
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Modal-nuree8-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c1",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Modal",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Modal-nuree8-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onHide={[Function]}
                                              show={false}
                                            >
                                              <Modal
                                                animation={true}
                                                autoFocus={true}
                                                backdrop="static"
                                                bsClass="modal"
                                                bsSize="large"
                                                className="c1"
                                                dialogComponentClass={[Function]}
                                                enforceFocus={true}
                                                keyboard={true}
                                                manager={
                                                  ModalManager {
                                                    "add": [Function],
                                                    "containers": Array [],
                                                    "data": Array [],
                                                    "handleContainerOverflow": true,
                                                    "hideSiblingNodes": true,
                                                    "isTopModal": [Function],
                                                    "modals": Array [],
                                                    "remove": [Function],
                                                  }
                                                }
                                                onHide={[Function]}
                                                renderBackdrop={[Function]}
                                                restoreFocus={true}
                                                show={false}
                                              >
                                                <Modal
                                                  autoFocus={true}
                                                  backdrop="static"
                                                  backdropClassName="modal-backdrop"
                                                  backdropTransition={[Function]}
                                                  containerClassName="modal-open"
                                                  enforceFocus={true}
                                                  keyboard={true}
                                                  manager={
                                                    ModalManager {
                                                      "add": [Function],
                                                      "containers": Array [],
                                                      "data": Array [],
                                                      "handleContainerOverflow": true,
                                                      "hideSiblingNodes": true,
                                                      "isTopModal": [Function],
                                                      "modals": Array [],
                                                      "remove": [Function],
                                                    }
                                                  }
                                                  onEntering={[Function]}
                                                  onExited={[Function]}
                                                  onHide={[Function]}
                                                  onMouseUp={[Function]}
                                                  renderBackdrop={[Function]}
                                                  restoreFocus={true}
                                                  show={false}
                                                  transition={[Function]}
                                                />
                                              </Modal>
                                            </StyledComponent>
                                          </Modal>
                                        </BootstrapModalWrapper>
                                      </div>
                                    </ButtonToolbar>
                                  </td>
                                </tr>
                              </DataTableElement>
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>
                </DataTable>
              </div>
            </ContentPackParameterList>
            <BootstrapModalConfirm
              cancelButtonDisabled={false}
              cancelButtonText="Cancel"
              confirmButtonDisabled={false}
              confirmButtonText="Confirm"
              onCancel={[Function]}
              onConfirm={[Function]}
              onModalClose={[Function]}
              onModalOpen={[Function]}
              showModal={false}
              title="Confirm deletion"
            >
              <BootstrapModalWrapper
                backdrop="static"
                onClose={[Function]}
                onHide={[Function]}
                onOpen={[Function]}
                showModal={false}
              >
                <Modal
                  backdrop="static"
                  onHide={[Function]}
                  show={false}
                >
                  <StyledComponent
                    backdrop="static"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "BACKDROP_TRANSITION_DURATION": 150,
                        "Body": [Function],
                        "Dialog": [Function],
                        "Footer": [Function],
                        "Header": [Function],
                        "SIZES": Array [
                          "large",
                          "small",
                        ],
                        "TRANSITION_DURATION": 300,
                        "Title": [Function],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Modal-nuree8-0",
                          "isStatic": false,
                          "lastClassName": "c1",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Modal",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Modal-nuree8-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onHide={[Function]}
                    show={false}
                  >
                    <Modal
                      animation={true}
                      autoFocus={true}
                      backdrop="static"
                      bsClass="modal"
                      className="c1"
                      dialogComponentClass={[Function]}
                      enforceFocus={true}
                      keyboard={true}
                      manager={
                        ModalManager {
                          "add": [Function],
                          "containers": Array [],
                          "data": Array [],
                          "handleContainerOverflow": true,
                          "hideSiblingNodes": true,
                          "isTopModal": [Function],
                          "modals": Array [],
                          "remove": [Function],
                        }
                      }
                      onHide={[Function]}
                      renderBackdrop={[Function]}
                      restoreFocus={true}
                      show={false}
                    >
                      <Modal
                        autoFocus={true}
                        backdrop="static"
                        backdropClassName="modal-backdrop"
                        backdropTransition={[Function]}
                        containerClassName="modal-open"
                        enforceFocus={true}
                        keyboard={true}
                        manager={
                          ModalManager {
                            "add": [Function],
                            "containers": Array [],
                            "data": Array [],
                            "handleContainerOverflow": true,
                            "hideSiblingNodes": true,
                            "isTopModal": [Function],
                            "modals": Array [],
                            "remove": [Function],
                          }
                        }
                        onEntering={[Function]}
                        onExited={[Function]}
                        onHide={[Function]}
                        onMouseUp={[Function]}
                        renderBackdrop={[Function]}
                        restoreFocus={true}
                        show={false}
                        transition={[Function]}
                      />
                    </Modal>
                  </StyledComponent>
                </Modal>
              </BootstrapModalWrapper>
            </BootstrapModalConfirm>
          </div>
        </Col>
      </div>
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={9}
          smOffset={1}
        >
          <div
            className="col-sm-9 col-sm-offset-1"
          >
            <ContentPackEntitiesList
              appliedParameter={Object {}}
              contentPack={
                Object {
                  "description": "",
                  "entities": Array [
                    Object {
                      "constraints": Array [],
                      "data": Object {
                        "configuration": Object {
                          "listen_address": Object {
                            "@type": "string",
                            "@value": "1.2.3.4",
                          },
                          "port": Object {
                            "@type": "integer",
                            "@value": "23",
                          },
                        },
                        "name": Object {
                          "@type": "string",
                          "@value": "Input",
                        },
                        "title": Object {
                          "@type": "string",
                          "@value": "A good input",
                        },
                      },
                      "id": "111-beef",
                      "type": Object {
                        "name": "input",
                        "version": "1",
                      },
                      "v": "1.0",
                    },
                  ],
                  "id": "dead-beef",
                  "name": "",
                  "parameters": Array [
                    Object {
                      "default_value": "test",
                      "description": "A parameter descriptions",
                      "name": "A parameter name",
                      "title": "A parameter title",
                      "type": "string",
                    },
                  ],
                  "rev": 1,
                  "summary": "",
                  "url": "",
                  "v": 1,
                  "vendor": "",
                }
              }
              onParameterApply={[Function]}
              onParameterClear={[Function]}
              readOnly={false}
            >
              <div>
                <h2>
                  Entity list
                </h2>
                <br />
                <SearchForm
                  buttonLeftMargin={5}
                  label={null}
                  loadingLabel="Loading..."
                  onQueryChange={[Function]}
                  onReset={[Function]}
                  onSearch={[Function]}
                  placeholder="Enter search query..."
                  query=""
                  queryHelpComponent={null}
                  queryWidth="auto"
                  resetButtonLabel="Reset"
                  searchBsStyle="default"
                  searchButtonLabel="Filter"
                  topMargin={15}
                  useLoadingState={false}
                  wrapperClass="search"
                >
                  <div
                    className="search"
                    style={
                      Object {
                        "marginTop": 15,
                      }
                    }
                  >
                    <form
                      className="form-inline"
                      onSubmit={[Function]}
                    >
                      <div
                        className="form-group has-feedback"
                      >
                        <input
                          autoComplete="off"
                          className="query form-control"
                          id="common-search-form-query-input"
                          onChange={[Function]}
                          placeholder="Enter search query..."
                          spellCheck="false"
                          style={
                            Object {
                              "width": "auto",
                            }
                          }
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="submit-button"
                          disabled={false}
                          type="submit"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="submit-button"
                            disabled={false}
                            type="submit"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="submit-button"
                              disabled={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              type="submit"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 submit-button"
                                disabled={false}
                                type="submit"
                              >
                                <button
                                  className="c0 submit-button btn btn-default"
                                  disabled={false}
                                  type="submit"
                                >
                                  Filter
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="reset-button"
                          onClick={[Function]}
                          type="reset"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="reset-button"
                            onClick={[Function]}
                            type="reset"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="reset-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="reset"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 reset-button"
                                disabled={false}
                                onClick={[Function]}
                                type="reset"
                              >
                                <button
                                  className="c0 reset-button btn btn-default"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="reset"
                                >
                                  Reset
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </form>
                  </div>
                </SearchForm>
                <DataTable
                  className="scrollable"
                  dataRowFormatter={[Function]}
                  displayKey="value"
                  filterBy=""
                  filterKeys={Array []}
                  filterLabel="Filter"
                  filterSuggestions={Array []}
                  headerCellFormatter={[Function]}
                  headers={
                    Array [
                      "Title",
                      "Type",
                      "Description",
                      "Origin",
                      "Used Parameters",
                      "Action",
                    ]
                  }
                  id="entity-list"
                  noDataText="No data available."
                  rowClassName=""
                  rows={
                    Array [
                      Object {
                        "constraints": Array [],
                        "data": Object {
                          "configuration": Object {
                            "listen_address": Object {
                              "@type": "string",
                              "@value": "1.2.3.4",
                            },
                            "port": Object {
                              "@type": "integer",
                              "@value": "23",
                            },
                          },
                          "name": Object {
                            "@type": "string",
                            "@value": "Input",
                          },
                          "title": Object {
                            "@type": "string",
                            "@value": "A good input",
                          },
                        },
                        "id": "111-beef",
                        "type": Object {
                          "name": "input",
                          "version": "1",
                        },
                        "v": "1.0",
                      },
                    ]
                  }
                  sortBy={[Function]}
                  useResponsiveTable={true}
                >
                  <div>
                    <div
                      className="row "
                    >
                      <div
                        className="col-md-12"
                      >
                        <div
                          className="data-table table-responsive"
                          id="entity-list"
                        >
                          <table
                            className="table scrollable"
                          >
                            <thead>
                              <tr>
                                <DataTableElement
                                  element="Title"
                                  formatter={[Function]}
                                  index={0}
                                  key="header-0"
                                >
                                  <th>
                                    Title
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Type"
                                  formatter={[Function]}
                                  index={1}
                                  key="header-1"
                                >
                                  <th>
                                    Type
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Description"
                                  formatter={[Function]}
                                  index={2}
                                  key="header-2"
                                >
                                  <th>
                                    Description
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Origin"
                                  formatter={[Function]}
                                  index={3}
                                  key="header-3"
                                >
                                  <th>
                                    Origin
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Used Parameters"
                                  formatter={[Function]}
                                  index={4}
                                  key="header-4"
                                >
                                  <th>
                                    Used Parameters
                                  </th>
                                </DataTableElement>
                                <DataTableElement
                                  element="Action"
                                  formatter={[Function]}
                                  index={5}
                                  key="header-5"
                                >
                                  <th>
                                    Action
                                  </th>
                                </DataTableElement>
                              </tr>
                            </thead>
                            <tbody>
                              <DataTableElement
                                element={
                                  Object {
                                    "constraints": Array [],
                                    "data": Object {
                                      "configuration": Object {
                                        "listen_address": Object {
                                          "@type": "string",
                                          "@value": "1.2.3.4",
                                        },
                                        "port": Object {
                                          "@type": "integer",
                                          "@value": "23",
                                        },
                                      },
                                      "name": Object {
                                        "@type": "string",
                                        "@value": "Input",
                                      },
                                      "title": Object {
                                        "@type": "string",
                                        "@value": "A good input",
                                      },
                                    },
                                    "id": "111-beef",
                                    "type": Object {
                                      "name": "input",
                                      "version": "1",
                                    },
                                    "v": "1.0",
                                  }
                                }
                                formatter={[Function]}
                                index={0}
                                key="row-0"
                              >
                                <tr
                                  key="111-beef"
                                >
                                  <td
                                    className="bigColumns"
                                  >
                                    A good input
                                  </td>
                                  <td>
                                    input
                                  </td>
                                  <td
                                    className="bigColumns"
                                  />
                                  <td>
                                    <span>
                                      <Icon
                                        className="contentPackEntity"
                                        name="archive"
                                        title="Content Pack"
                                      >
                                        <FontAwesomeIcon
                                          className="contentPackEntity"
                                          icon={
                                            Object {
                                              "iconName": "archive",
                                              "prefix": "fas",
                                            }
                                          }
                                          title="Content Pack"
                                        >
                                          <svg
                                            className="svg-inline--fa fa-archive"
                                          />
                                        </FontAwesomeIcon>
                                      </Icon>
                                    </span>
                                  </td>
                                  <td>
                                    0
                                  </td>
                                  <td>
                                    <ButtonToolbar
                                      bsClass="btn-toolbar"
                                    >
                                      <div
                                        className="btn-toolbar"
                                        role="toolbar"
                                      >
                                        <ForwardRef
                                          bsSize="xs"
                                          bsStyle="primary"
                                          disabled={false}
                                          onClick={[Function]}
                                        >
                                          <Button__StyledButton
                                            bsSize="xs"
                                            bsStyle="primary"
                                            disabled={false}
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              bsSize="xs"
                                              bsStyle="primary"
                                              disabled={false}
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "SIZES": Array [
                                                    "large",
                                                    "small",
                                                    "xsmall",
                                                  ],
                                                  "STYLES": Array [
                                                    "success",
                                                    "warning",
                                                    "danger",
                                                    "info",
                                                    "default",
                                                    "primary",
                                                    "link",
                                                  ],
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c0",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Button__StyledButton",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <Button
                                                active={false}
                                                block={false}
                                                bsClass="btn"
                                                bsSize="xs"
                                                bsStyle="primary"
                                                className="c0"
                                                disabled={false}
                                                onClick={[Function]}
                                              >
                                                <button
                                                  className="c0 btn btn-xs btn-primary"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  type="button"
                                                >
                                                  Edit
                                                </button>
                                              </Button>
                                            </StyledComponent>
                                          </Button__StyledButton>
                                        </ForwardRef>
                                        <ForwardRef
                                          bsSize="xs"
                                          bsStyle="info"
                                          onClick={[Function]}
                                        >
                                          <Button__StyledButton
                                            bsSize="xs"
                                            bsStyle="info"
                                            onClick={[Function]}
                                          >
                                            <StyledComponent
                                              bsSize="xs"
                                              bsStyle="info"
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "SIZES": Array [
                                                    "large",
                                                    "small",
                                                    "xsmall",
                                                  ],
                                                  "STYLES": Array [
                                                    "success",
                                                    "warning",
                                                    "danger",
                                                    "info",
                                                    "default",
                                                    "primary",
                                                    "link",
                                                  ],
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                                    "isStatic": false,
                                                    "lastClassName": "c0",
                                                    "rules": Array [
                                                      [Function],
                                                    ],
                                                  },
                                                  "displayName": "Button__StyledButton",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                                  "target": [Function],
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                              onClick={[Function]}
                                            >
                                              <Button
                                                active={false}
                                                block={false}
                                                bsClass="btn"
                                                bsSize="xs"
                                                bsStyle="info"
                                                className="c0"
                                                disabled={false}
                                                onClick={[Function]}
                                              >
                                                <button
                                                  className="c0 btn btn-xs btn-info"
                                                  disabled={false}
                                                  onClick={[Function]}
                                                  type="button"
                                                >
                                                  Show
                                                </button>
                                              </Button>
                                            </StyledComponent>
                                          </Button__StyledButton>
                                        </ForwardRef>
                                      </div>
                                    </ButtonToolbar>
                                  </td>
                                  <BootstrapModalWrapper
                                    backdrop="static"
                                    bsSize="large"
                                    onClose={[Function]}
                                    onHide={[Function]}
                                    onOpen={[Function]}
                                    showModal={false}
                                  >
                                    <Modal
                                      backdrop="static"
                                      bsSize="large"
                                      onHide={[Function]}
                                      show={false}
                                    >
                                      <StyledComponent
                                        backdrop="static"
                                        bsSize="large"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "BACKDROP_TRANSITION_DURATION": 150,
                                            "Body": [Function],
                                            "Dialog": [Function],
                                            "Footer": [Function],
                                            "Header": [Function],
                                            "SIZES": Array [
                                              "large",
                                              "small",
                                            ],
                                            "TRANSITION_DURATION": 300,
                                            "Title": [Function],
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Modal-nuree8-0",
                                              "isStatic": false,
                                              "lastClassName": "c1",
                                              "rules": Array [
                                                [Function],
                                              ],
                                            },
                                            "displayName": "Modal",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Modal-nuree8-0",
                                            "target": [Function],
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onHide={[Function]}
                                        show={false}
                                      >
                                        <Modal
                                          animation={true}
                                          autoFocus={true}
                                          backdrop="static"
                                          bsClass="modal"
                                          bsSize="large"
                                          className="c1"
                                          dialogComponentClass={[Function]}
                                          enforceFocus={true}
                                          keyboard={true}
                                          manager={
                                            ModalManager {
                                              "add": [Function],
                                              "containers": Array [],
                                              "data": Array [],
                                              "handleContainerOverflow": true,
                                              "hideSiblingNodes": true,
                                              "isTopModal": [Function],
                                              "modals": Array [],
                                              "remove": [Function],
                                            }
                                          }
                                          onHide={[Function]}
                                          renderBackdrop={[Function]}
                                          restoreFocus={true}
                                          show={false}
                                        >
                                          <Modal
                                            autoFocus={true}
                                            backdrop="static"
                                            backdropClassName="modal-backdrop"
                                            backdropTransition={[Function]}
                                            containerClassName="modal-open"
                                            enforceFocus={true}
                                            keyboard={true}
                                            manager={
                                              ModalManager {
                                                "add": [Function],
                                                "containers": Array [],
                                                "data": Array [],
                                                "handleContainerOverflow": true,
                                                "hideSiblingNodes": true,
                                                "isTopModal": [Function],
                                                "modals": Array [],
                                                "remove": [Function],
                                              }
                                            }
                                            onEntering={[Function]}
                                            onExited={[Function]}
                                            onHide={[Function]}
                                            onMouseUp={[Function]}
                                            renderBackdrop={[Function]}
                                            restoreFocus={true}
                                            show={false}
                                            transition={[Function]}
                                          />
                                        </Modal>
                                      </StyledComponent>
                                    </Modal>
                                  </BootstrapModalWrapper>
                                  <BootstrapModalWrapper
                                    backdrop="static"
                                    bsSize="large"
                                    onClose={[Function]}
                                    onHide={[Function]}
                                    onOpen={[Function]}
                                    showModal={false}
                                  >
                                    <Modal
                                      backdrop="static"
                                      bsSize="large"
                                      onHide={[Function]}
                                      show={false}
                                    >
                                      <StyledComponent
                                        backdrop="static"
                                        bsSize="large"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "BACKDROP_TRANSITION_DURATION": 150,
                                            "Body": [Function],
                                            "Dialog": [Function],
                                            "Footer": [Function],
                                            "Header": [Function],
                                            "SIZES": Array [
                                              "large",
                                              "small",
                                            ],
                                            "TRANSITION_DURATION": 300,
                                            "Title": [Function],
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "Modal-nuree8-0",
                                              "isStatic": false,
                                              "lastClassName": "c1",
                                              "rules": Array [
                                                [Function],
                                              ],
                                            },
                                            "displayName": "Modal",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "Modal-nuree8-0",
                                            "target": [Function],
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        onHide={[Function]}
                                        show={false}
                                      >
                                        <Modal
                                          animation={true}
                                          autoFocus={true}
                                          backdrop="static"
                                          bsClass="modal"
                                          bsSize="large"
                                          className="c1"
                                          dialogComponentClass={[Function]}
                                          enforceFocus={true}
                                          keyboard={true}
                                          manager={
                                            ModalManager {
                                              "add": [Function],
                                              "containers": Array [],
                                              "data": Array [],
                                              "handleContainerOverflow": true,
                                              "hideSiblingNodes": true,
                                              "isTopModal": [Function],
                                              "modals": Array [],
                                              "remove": [Function],
                                            }
                                          }
                                          onHide={[Function]}
                                          renderBackdrop={[Function]}
                                          restoreFocus={true}
                                          show={false}
                                        >
                                          <Modal
                                            autoFocus={true}
                                            backdrop="static"
                                            backdropClassName="modal-backdrop"
                                            backdropTransition={[Function]}
                                            containerClassName="modal-open"
                                            enforceFocus={true}
                                            keyboard={true}
                                            manager={
                                              ModalManager {
                                                "add": [Function],
                                                "containers": Array [],
                                                "data": Array [],
                                                "handleContainerOverflow": true,
                                                "hideSiblingNodes": true,
                                                "isTopModal": [Function],
                                                "modals": Array [],
                                                "remove": [Function],
                                              }
                                            }
                                            onEntering={[Function]}
                                            onExited={[Function]}
                                            onHide={[Function]}
                                            onMouseUp={[Function]}
                                            renderBackdrop={[Function]}
                                            restoreFocus={true}
                                            show={false}
                                            transition={[Function]}
                                          />
                                        </Modal>
                                      </StyledComponent>
                                    </Modal>
                                  </BootstrapModalWrapper>
                                </tr>
                              </DataTableElement>
                            </tbody>
                          </table>
                        </div>
                      </div>
                    </div>
                  </div>
                </DataTable>
              </div>
            </ContentPackEntitiesList>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackParameters>
`;

exports[`<ContentPackParameters /> should render with empty parameters 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 .modal-content {
  background-color: #fff;
  border-color: rgba(31,31,31,0.2);
}

.c1 .modal-content .modal-header {
  border-bottom-color: #e6e6e6;
}

.c1 .modal-content .modal-footer {
  border-top-color: #e6e6e6;
}

.c1 .modal-title {
  font-size: 21px;
}

.c1 .modal-dialog {
  margin-top: 55px;
}

.c1 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c1 form {
  margin-bottom: 0;
}

.c1 .modal-body .form-group {
  margin-bottom: 5px;
}

<ContentPackParameters
  appliedParameter={Object {}}
  contentPack={
    Object {
      "entities": Array [],
      "parameters": Array [],
    }
  }
  onStateChange={[Function]}
>
  <div>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={9}
          smOffset={1}
        >
          <div
            className="col-sm-9 col-sm-offset-1"
          >
            <ContentPackParameterList
              appliedParameter={Object {}}
              contentPack={
                Object {
                  "entities": Array [],
                  "parameters": Array [],
                }
              }
              onAddParameter={[Function]}
              onDeleteParameter={[Function]}
              readOnly={false}
            >
              <div>
                <h2>
                  Parameters list
                </h2>
                <br />
                <ForwardRef
                  bsSize="small"
                  bsStyle="info"
                  onClick={[Function]}
                  title="Edit Modal"
                >
                  <Button__StyledButton
                    bsSize="small"
                    bsStyle="info"
                    onClick={[Function]}
                    title="Edit Modal"
                  >
                    <StyledComponent
                      bsSize="small"
                      bsStyle="info"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                            "xsmall",
                          ],
                          "STYLES": Array [
                            "success",
                            "warning",
                            "danger",
                            "info",
                            "default",
                            "primary",
                            "link",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Button__StyledButton-c9cbmb-0",
                            "isStatic": false,
                            "lastClassName": "c0",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Button__StyledButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                      title="Edit Modal"
                    >
                      <Button
                        active={false}
                        block={false}
                        bsClass="btn"
                        bsSize="small"
                        bsStyle="info"
                        className="c0"
                        disabled={false}
                        onClick={[Function]}
                        title="Edit Modal"
                      >
                        <button
                          className="c0 btn btn-sm btn-info"
                          disabled={false}
                          onClick={[Function]}
                          title="Edit Modal"
                          type="button"
                        >
                          Create parameter
                        </button>
                      </Button>
                    </StyledComponent>
                  </Button__StyledButton>
                </ForwardRef>
                <BootstrapModalWrapper
                  backdrop="static"
                  bsSize="large"
                  onClose={[Function]}
                  onHide={[Function]}
                  onOpen={[Function]}
                  showModal={false}
                >
                  <Modal
                    backdrop="static"
                    bsSize="large"
                    onHide={[Function]}
                    show={false}
                  >
                    <StyledComponent
                      backdrop="static"
                      bsSize="large"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "BACKDROP_TRANSITION_DURATION": 150,
                          "Body": [Function],
                          "Dialog": [Function],
                          "Footer": [Function],
                          "Header": [Function],
                          "SIZES": Array [
                            "large",
                            "small",
                          ],
                          "TRANSITION_DURATION": 300,
                          "Title": [Function],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Modal-nuree8-0",
                            "isStatic": false,
                            "lastClassName": "c1",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Modal",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Modal-nuree8-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onHide={[Function]}
                      show={false}
                    >
                      <Modal
                        animation={true}
                        autoFocus={true}
                        backdrop="static"
                        bsClass="modal"
                        bsSize="large"
                        className="c1"
                        dialogComponentClass={[Function]}
                        enforceFocus={true}
                        keyboard={true}
                        manager={
                          ModalManager {
                            "add": [Function],
                            "containers": Array [],
                            "data": Array [],
                            "handleContainerOverflow": true,
                            "hideSiblingNodes": true,
                            "isTopModal": [Function],
                            "modals": Array [],
                            "remove": [Function],
                          }
                        }
                        onHide={[Function]}
                        renderBackdrop={[Function]}
                        restoreFocus={true}
                        show={false}
                      >
                        <Modal
                          autoFocus={true}
                          backdrop="static"
                          backdropClassName="modal-backdrop"
                          backdropTransition={[Function]}
                          containerClassName="modal-open"
                          enforceFocus={true}
                          keyboard={true}
                          manager={
                            ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
                          }
                          onEntering={[Function]}
                          onExited={[Function]}
                          onHide={[Function]}
                          onMouseUp={[Function]}
                          renderBackdrop={[Function]}
                          restoreFocus={true}
                          show={false}
                          transition={[Function]}
                        />
                      </Modal>
                    </StyledComponent>
                  </Modal>
                </BootstrapModalWrapper>
                <span>
                  <br />
                  <br />
                </span>
                <SearchForm
                  buttonLeftMargin={5}
                  label={null}
                  loadingLabel="Loading..."
                  onQueryChange={[Function]}
                  onReset={[Function]}
                  onSearch={[Function]}
                  placeholder="Enter search query..."
                  query=""
                  queryHelpComponent={null}
                  queryWidth="auto"
                  resetButtonLabel="Reset"
                  searchBsStyle="default"
                  searchButtonLabel="Filter"
                  topMargin={15}
                  useLoadingState={false}
                  wrapperClass="search"
                >
                  <div
                    className="search"
                    style={
                      Object {
                        "marginTop": 15,
                      }
                    }
                  >
                    <form
                      className="form-inline"
                      onSubmit={[Function]}
                    >
                      <div
                        className="form-group has-feedback"
                      >
                        <input
                          autoComplete="off"
                          className="query form-control"
                          id="common-search-form-query-input"
                          onChange={[Function]}
                          placeholder="Enter search query..."
                          spellCheck="false"
                          style={
                            Object {
                              "width": "auto",
                            }
                          }
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="submit-button"
                          disabled={false}
                          type="submit"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="submit-button"
                            disabled={false}
                            type="submit"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="submit-button"
                              disabled={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              type="submit"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 submit-button"
                                disabled={false}
                                type="submit"
                              >
                                <button
                                  className="c0 submit-button btn btn-default"
                                  disabled={false}
                                  type="submit"
                                >
                                  Filter
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="reset-button"
                          onClick={[Function]}
                          type="reset"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="reset-button"
                            onClick={[Function]}
                            type="reset"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="reset-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="reset"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 reset-button"
                                disabled={false}
                                onClick={[Function]}
                                type="reset"
                              >
                                <button
                                  className="c0 reset-button btn btn-default"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="reset"
                                >
                                  Reset
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </form>
                  </div>
                </SearchForm>
                <DataTable
                  className="scrollable"
                  dataRowFormatter={[Function]}
                  displayKey="value"
                  filterBy=""
                  filterKeys={Array []}
                  filterLabel="Filter"
                  filterSuggestions={Array []}
                  headerCellFormatter={[Function]}
                  headers={
                    Array [
                      "Title",
                      "Name",
                      "Description",
                      "Value Type",
                      "Default Value",
                      "Used",
                      "Action",
                    ]
                  }
                  id="parameter-list"
                  noDataText="To use parameters for content packs, at first a parameter must be created and can then be applied to a entity."
                  rowClassName=""
                  rows={Array []}
                  sortByKey="title"
                  useResponsiveTable={true}
                >
                  <div>
                    <div
                      className="row "
                    >
                      <div
                        className="col-md-12"
                      >
                        <div
                          className="data-table table-responsive"
                          id="parameter-list"
                        >
                          <p>
                            To use parameters for content packs, at first a parameter must be created and can then be applied to a entity.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </DataTable>
              </div>
            </ContentPackParameterList>
            <BootstrapModalConfirm
              cancelButtonDisabled={false}
              cancelButtonText="Cancel"
              confirmButtonDisabled={false}
              confirmButtonText="Confirm"
              onCancel={[Function]}
              onConfirm={[Function]}
              onModalClose={[Function]}
              onModalOpen={[Function]}
              showModal={false}
              title="Confirm deletion"
            >
              <BootstrapModalWrapper
                backdrop="static"
                onClose={[Function]}
                onHide={[Function]}
                onOpen={[Function]}
                showModal={false}
              >
                <Modal
                  backdrop="static"
                  onHide={[Function]}
                  show={false}
                >
                  <StyledComponent
                    backdrop="static"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "BACKDROP_TRANSITION_DURATION": 150,
                        "Body": [Function],
                        "Dialog": [Function],
                        "Footer": [Function],
                        "Header": [Function],
                        "SIZES": Array [
                          "large",
                          "small",
                        ],
                        "TRANSITION_DURATION": 300,
                        "Title": [Function],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "Modal-nuree8-0",
                          "isStatic": false,
                          "lastClassName": "c1",
                          "rules": Array [
                            [Function],
                          ],
                        },
                        "displayName": "Modal",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "Modal-nuree8-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onHide={[Function]}
                    show={false}
                  >
                    <Modal
                      animation={true}
                      autoFocus={true}
                      backdrop="static"
                      bsClass="modal"
                      className="c1"
                      dialogComponentClass={[Function]}
                      enforceFocus={true}
                      keyboard={true}
                      manager={
                        ModalManager {
                          "add": [Function],
                          "containers": Array [],
                          "data": Array [],
                          "handleContainerOverflow": true,
                          "hideSiblingNodes": true,
                          "isTopModal": [Function],
                          "modals": Array [],
                          "remove": [Function],
                        }
                      }
                      onHide={[Function]}
                      renderBackdrop={[Function]}
                      restoreFocus={true}
                      show={false}
                    >
                      <Modal
                        autoFocus={true}
                        backdrop="static"
                        backdropClassName="modal-backdrop"
                        backdropTransition={[Function]}
                        containerClassName="modal-open"
                        enforceFocus={true}
                        keyboard={true}
                        manager={
                          ModalManager {
                            "add": [Function],
                            "containers": Array [],
                            "data": Array [],
                            "handleContainerOverflow": true,
                            "hideSiblingNodes": true,
                            "isTopModal": [Function],
                            "modals": Array [],
                            "remove": [Function],
                          }
                        }
                        onEntering={[Function]}
                        onExited={[Function]}
                        onHide={[Function]}
                        onMouseUp={[Function]}
                        renderBackdrop={[Function]}
                        restoreFocus={true}
                        show={false}
                        transition={[Function]}
                      />
                    </Modal>
                  </StyledComponent>
                </Modal>
              </BootstrapModalWrapper>
            </BootstrapModalConfirm>
          </div>
        </Col>
      </div>
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          sm={9}
          smOffset={1}
        >
          <div
            className="col-sm-9 col-sm-offset-1"
          >
            <ContentPackEntitiesList
              appliedParameter={Object {}}
              contentPack={
                Object {
                  "entities": Array [],
                  "parameters": Array [],
                }
              }
              onParameterApply={[Function]}
              onParameterClear={[Function]}
              readOnly={false}
            >
              <div>
                <h2>
                  Entity list
                </h2>
                <br />
                <SearchForm
                  buttonLeftMargin={5}
                  label={null}
                  loadingLabel="Loading..."
                  onQueryChange={[Function]}
                  onReset={[Function]}
                  onSearch={[Function]}
                  placeholder="Enter search query..."
                  query=""
                  queryHelpComponent={null}
                  queryWidth="auto"
                  resetButtonLabel="Reset"
                  searchBsStyle="default"
                  searchButtonLabel="Filter"
                  topMargin={15}
                  useLoadingState={false}
                  wrapperClass="search"
                >
                  <div
                    className="search"
                    style={
                      Object {
                        "marginTop": 15,
                      }
                    }
                  >
                    <form
                      className="form-inline"
                      onSubmit={[Function]}
                    >
                      <div
                        className="form-group has-feedback"
                      >
                        <input
                          autoComplete="off"
                          className="query form-control"
                          id="common-search-form-query-input"
                          onChange={[Function]}
                          placeholder="Enter search query..."
                          spellCheck="false"
                          style={
                            Object {
                              "width": "auto",
                            }
                          }
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="submit-button"
                          disabled={false}
                          type="submit"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="submit-button"
                            disabled={false}
                            type="submit"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="submit-button"
                              disabled={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              type="submit"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 submit-button"
                                disabled={false}
                                type="submit"
                              >
                                <button
                                  className="c0 submit-button btn btn-default"
                                  disabled={false}
                                  type="submit"
                                >
                                  Filter
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                      <div
                        className="form-group"
                        style={
                          Object {
                            "marginLeft": 5,
                          }
                        }
                      >
                        <ForwardRef
                          bsStyle="default"
                          className="reset-button"
                          onClick={[Function]}
                          type="reset"
                        >
                          <Button__StyledButton
                            bsStyle="default"
                            className="reset-button"
                            onClick={[Function]}
                            type="reset"
                          >
                            <StyledComponent
                              bsStyle="default"
                              className="reset-button"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "SIZES": Array [
                                    "large",
                                    "small",
                                    "xsmall",
                                  ],
                                  "STYLES": Array [
                                    "success",
                                    "warning",
                                    "danger",
                                    "info",
                                    "default",
                                    "primary",
                                    "link",
                                  ],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "Button__StyledButton-c9cbmb-0",
                                    "isStatic": false,
                                    "lastClassName": "c0",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "Button__StyledButton",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              type="reset"
                            >
                              <Button
                                active={false}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c0 reset-button"
                                disabled={false}
                                onClick={[Function]}
                                type="reset"
                              >
                                <button
                                  className="c0 reset-button btn btn-default"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="reset"
                                >
                                  Reset
                                </button>
                              </Button>
                            </StyledComponent>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </form>
                  </div>
                </SearchForm>
                <DataTable
                  className="scrollable"
                  dataRowFormatter={[Function]}
                  displayKey="value"
                  filterBy=""
                  filterKeys={Array []}
                  filterLabel="Filter"
                  filterSuggestions={Array []}
                  headerCellFormatter={[Function]}
                  headers={
                    Array [
                      "Title",
                      "Type",
                      "Description",
                      "Origin",
                      "Used Parameters",
                      "Action",
                    ]
                  }
                  id="entity-list"
                  noDataText="No data available."
                  rowClassName=""
                  rows={Array []}
                  sortBy={[Function]}
                  useResponsiveTable={true}
                >
                  <div>
                    <div
                      className="row "
                    >
                      <div
                        className="col-md-12"
                      >
                        <div
                          className="data-table table-responsive"
                          id="entity-list"
                        >
                          <p>
                            No data available.
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                </DataTable>
              </div>
            </ContentPackEntitiesList>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ContentPackParameters>
`;
