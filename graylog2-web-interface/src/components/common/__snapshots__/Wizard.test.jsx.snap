// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Wizard /> should render in horizontal mode with 3 steps 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.nav > li > a:hover,
.c1.nav > li > a:focus {
  background-color: #e6e6e6;
}

.c1.nav > li.disabled > a {
  color: #9b9b9b;
}

.c1.nav > li.disabled > a:hover,
.c1.nav > li.disabled > a:focus {
  color: #9b9b9b;
}

.c1.nav .open > a,
.c1.nav .open > a:hover,
.c1.nav .open > a:focus {
  background-color: #e6e6e6;
  border-color: #702785;
}

.c1.nav.nav-pills > li.active > a,
.c1.nav.nav-pills > li.active > a:hover,
.c1.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c1.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c1.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #cdcdcd #cdcdcd rgb(198,207,231);
}

.c1.nav .nav-tabs > li > a:hover {
  background-color: #cdcdcd;
  color: rgb(46,46,46);
}

.c1.nav .nav-tabs > li.active > a,
.c1.nav .nav-tabs > li.active > a:hover,
.c1.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c1.nav .nav-tabs > li.disabled > a,
.c1.nav .nav-tabs > li.disabled > a:hover,
.c1.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c1.nav.nav-justified > .active > a,
.c1.nav.nav-justified > .active > a:hover,
.c1.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

@media (min-width:768px) {
  .c1.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c1.nav.nav-justified > .active > a,
  .c1.nav.nav-justified > .active > a:hover,
  .c1.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "lastClassName": "c1",
        "rules": Array [
          [Function],
        ],
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={true}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    bsClass="row"
    className="content"
    componentClass="div"
  >
    <div
      className="content row"
    >
      <Col
        bsClass="col"
        className="horizontal"
        componentClass="div"
        sm={12}
      >
        <div
          className="horizontal col-sm-12"
        >
          <div
            className="pull-right"
          >
            <ButtonToolbar
              bsClass="btn-toolbar"
              className="horizontalPreviousNextButtons"
            >
              <div
                className="horizontalPreviousNextButtons btn-toolbar"
                role="toolbar"
              >
                <ForwardRef
                  bsSize="xsmall"
                  bsStyle="info"
                  disabled={true}
                  onClick={[Function]}
                >
                  <Button__StyledButton
                    bsSize="xsmall"
                    bsStyle="info"
                    disabled={true}
                    onClick={[Function]}
                  >
                    <StyledComponent
                      bsSize="xsmall"
                      bsStyle="info"
                      disabled={true}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                            "xsmall",
                          ],
                          "STYLES": Array [
                            "success",
                            "warning",
                            "danger",
                            "info",
                            "default",
                            "primary",
                            "link",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Button__StyledButton-c9cbmb-0",
                            "isStatic": false,
                            "lastClassName": "c0",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Button__StyledButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <Button
                        active={false}
                        block={false}
                        bsClass="btn"
                        bsSize="xsmall"
                        bsStyle="info"
                        className="c0"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <button
                          className="c0 btn btn-xs btn-info"
                          disabled={true}
                          onClick={[Function]}
                          type="button"
                        >
                          <Icon
                            name="caret-left"
                          >
                            <FontAwesomeIcon
                              icon={
                                Object {
                                  "iconName": "caret-left",
                                  "prefix": "fas",
                                }
                              }
                            >
                              <svg
                                className="svg-inline--fa fa-caret-left"
                              />
                            </FontAwesomeIcon>
                          </Icon>
                        </button>
                      </Button>
                    </StyledComponent>
                  </Button__StyledButton>
                </ForwardRef>
                <ForwardRef
                  bsSize="xsmall"
                  bsStyle="info"
                  onClick={[Function]}
                >
                  <Button__StyledButton
                    bsSize="xsmall"
                    bsStyle="info"
                    onClick={[Function]}
                  >
                    <StyledComponent
                      bsSize="xsmall"
                      bsStyle="info"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                            "xsmall",
                          ],
                          "STYLES": Array [
                            "success",
                            "warning",
                            "danger",
                            "info",
                            "default",
                            "primary",
                            "link",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Button__StyledButton-c9cbmb-0",
                            "isStatic": false,
                            "lastClassName": "c0",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Button__StyledButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <Button
                        active={false}
                        block={false}
                        bsClass="btn"
                        bsSize="xsmall"
                        bsStyle="info"
                        className="c0"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <button
                          className="c0 btn btn-xs btn-info"
                          disabled={false}
                          onClick={[Function]}
                          type="button"
                        >
                          <Icon
                            name="caret-right"
                          >
                            <FontAwesomeIcon
                              icon={
                                Object {
                                  "iconName": "caret-right",
                                  "prefix": "fas",
                                }
                              }
                            >
                              <svg
                                className="svg-inline--fa fa-caret-right"
                              />
                            </FontAwesomeIcon>
                          </Icon>
                        </button>
                      </Button>
                    </StyledComponent>
                  </Button__StyledButton>
                </ForwardRef>
              </div>
            </ButtonToolbar>
          </div>
          <Nav
            activeKey="Key1"
            bsStyle="pills"
            justified={false}
            onSelect={[Function]}
          >
            <StyledComponent
              activeKey="Key1"
              bsStyle="pills"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "STYLES": Array [
                    "tabs",
                    "pills",
                  ],
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Nav-dzawzr-0",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "Nav",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Nav-dzawzr-0",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              justified={false}
              onSelect={[Function]}
            >
              <Nav
                activeKey="Key1"
                bsClass="nav"
                bsStyle="pills"
                className="c1"
                justified={false}
                onSelect={[Function]}
                pullLeft={false}
                pullRight={false}
                stacked={false}
              >
                <ul
                  className="c1 nav nav-pills"
                  role={null}
                >
                  <NavItem
                    active={true}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key1"
                    key=".$Key1"
                    onSelect={[Function]}
                  >
                    <li
                      className="active"
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title1
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key2"
                    key=".$Key2"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title2
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key3"
                    key=".$Key3"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title3
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                </ul>
              </Nav>
            </StyledComponent>
          </Nav>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        md={12}
      >
        <div
          className="col-md-12"
        >
          <div>
            Component1
          </div>
        </div>
      </Col>
    </div>
  </Row>
</Wizard>
`;

exports[`<Wizard /> should render in horizontal mode with 3 steps and children 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.nav > li > a:hover,
.c1.nav > li > a:focus {
  background-color: #e6e6e6;
}

.c1.nav > li.disabled > a {
  color: #9b9b9b;
}

.c1.nav > li.disabled > a:hover,
.c1.nav > li.disabled > a:focus {
  color: #9b9b9b;
}

.c1.nav .open > a,
.c1.nav .open > a:hover,
.c1.nav .open > a:focus {
  background-color: #e6e6e6;
  border-color: #702785;
}

.c1.nav.nav-pills > li.active > a,
.c1.nav.nav-pills > li.active > a:hover,
.c1.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c1.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c1.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #cdcdcd #cdcdcd rgb(198,207,231);
}

.c1.nav .nav-tabs > li > a:hover {
  background-color: #cdcdcd;
  color: rgb(46,46,46);
}

.c1.nav .nav-tabs > li.active > a,
.c1.nav .nav-tabs > li.active > a:hover,
.c1.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c1.nav .nav-tabs > li.disabled > a,
.c1.nav .nav-tabs > li.disabled > a:hover,
.c1.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c1.nav.nav-justified > .active > a,
.c1.nav.nav-justified > .active > a:hover,
.c1.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

@media (min-width:768px) {
  .c1.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c1.nav.nav-justified > .active > a,
  .c1.nav.nav-justified > .active > a:hover,
  .c1.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "lastClassName": "c1",
        "rules": Array [
          [Function],
        ],
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={true}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    bsClass="row"
    className="content"
    componentClass="div"
  >
    <div
      className="content row"
    >
      <Col
        bsClass="col"
        className="horizontal"
        componentClass="div"
        sm={12}
      >
        <div
          className="horizontal col-sm-12"
        >
          <div
            className="pull-right"
          >
            <ButtonToolbar
              bsClass="btn-toolbar"
              className="horizontalPreviousNextButtons"
            >
              <div
                className="horizontalPreviousNextButtons btn-toolbar"
                role="toolbar"
              >
                <ForwardRef
                  bsSize="xsmall"
                  bsStyle="info"
                  disabled={true}
                  onClick={[Function]}
                >
                  <Button__StyledButton
                    bsSize="xsmall"
                    bsStyle="info"
                    disabled={true}
                    onClick={[Function]}
                  >
                    <StyledComponent
                      bsSize="xsmall"
                      bsStyle="info"
                      disabled={true}
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                            "xsmall",
                          ],
                          "STYLES": Array [
                            "success",
                            "warning",
                            "danger",
                            "info",
                            "default",
                            "primary",
                            "link",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Button__StyledButton-c9cbmb-0",
                            "isStatic": false,
                            "lastClassName": "c0",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Button__StyledButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <Button
                        active={false}
                        block={false}
                        bsClass="btn"
                        bsSize="xsmall"
                        bsStyle="info"
                        className="c0"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <button
                          className="c0 btn btn-xs btn-info"
                          disabled={true}
                          onClick={[Function]}
                          type="button"
                        >
                          <Icon
                            name="caret-left"
                          >
                            <FontAwesomeIcon
                              icon={
                                Object {
                                  "iconName": "caret-left",
                                  "prefix": "fas",
                                }
                              }
                            >
                              <svg
                                className="svg-inline--fa fa-caret-left"
                              />
                            </FontAwesomeIcon>
                          </Icon>
                        </button>
                      </Button>
                    </StyledComponent>
                  </Button__StyledButton>
                </ForwardRef>
                <ForwardRef
                  bsSize="xsmall"
                  bsStyle="info"
                  onClick={[Function]}
                >
                  <Button__StyledButton
                    bsSize="xsmall"
                    bsStyle="info"
                    onClick={[Function]}
                  >
                    <StyledComponent
                      bsSize="xsmall"
                      bsStyle="info"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "SIZES": Array [
                            "large",
                            "small",
                            "xsmall",
                          ],
                          "STYLES": Array [
                            "success",
                            "warning",
                            "danger",
                            "info",
                            "default",
                            "primary",
                            "link",
                          ],
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "Button__StyledButton-c9cbmb-0",
                            "isStatic": false,
                            "lastClassName": "c0",
                            "rules": Array [
                              [Function],
                            ],
                          },
                          "displayName": "Button__StyledButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <Button
                        active={false}
                        block={false}
                        bsClass="btn"
                        bsSize="xsmall"
                        bsStyle="info"
                        className="c0"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <button
                          className="c0 btn btn-xs btn-info"
                          disabled={false}
                          onClick={[Function]}
                          type="button"
                        >
                          <Icon
                            name="caret-right"
                          >
                            <FontAwesomeIcon
                              icon={
                                Object {
                                  "iconName": "caret-right",
                                  "prefix": "fas",
                                }
                              }
                            >
                              <svg
                                className="svg-inline--fa fa-caret-right"
                              />
                            </FontAwesomeIcon>
                          </Icon>
                        </button>
                      </Button>
                    </StyledComponent>
                  </Button__StyledButton>
                </ForwardRef>
              </div>
            </ButtonToolbar>
          </div>
          <Nav
            activeKey="Key1"
            bsStyle="pills"
            justified={false}
            onSelect={[Function]}
          >
            <StyledComponent
              activeKey="Key1"
              bsStyle="pills"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "STYLES": Array [
                    "tabs",
                    "pills",
                  ],
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Nav-dzawzr-0",
                    "isStatic": false,
                    "lastClassName": "c1",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "Nav",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Nav-dzawzr-0",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              justified={false}
              onSelect={[Function]}
            >
              <Nav
                activeKey="Key1"
                bsClass="nav"
                bsStyle="pills"
                className="c1"
                justified={false}
                onSelect={[Function]}
                pullLeft={false}
                pullRight={false}
                stacked={false}
              >
                <ul
                  className="c1 nav nav-pills"
                  role={null}
                >
                  <NavItem
                    active={true}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key1"
                    key=".$Key1"
                    onSelect={[Function]}
                  >
                    <li
                      className="active"
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title1
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key2"
                    key=".$Key2"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title2
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key3"
                    key=".$Key3"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title3
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                </ul>
              </Nav>
            </StyledComponent>
          </Nav>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        md={7}
      >
        <div
          className="col-md-7"
        >
          <div>
            Component1
          </div>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        md={5}
      >
        <div
          className="col-md-5"
        >
          <span>
            Preview
          </span>
        </div>
      </Col>
    </div>
  </Row>
</Wizard>
`;

exports[`<Wizard /> should render with 3 steps 1`] = `
.c1.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c1.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c1.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c1.btn-danger[disabled],
.c1.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-danger[disabled]:hover,
.c1.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c1.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c1.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c1.btn-default[disabled],
.c1.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-default[disabled]:hover,
.c1.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c1.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c1.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c1.btn-info[disabled],
.c1.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-info[disabled]:hover,
.c1.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c1.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c1.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c1.btn-link[disabled],
.c1.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-link[disabled]:hover,
.c1.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c1.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c1.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c1.btn-primary[disabled],
.c1.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-primary[disabled]:hover,
.c1.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c1.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c1.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c1.btn-success[disabled],
.c1.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-success[disabled]:hover,
.c1.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c1.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c1.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c1.btn-warning[disabled],
.c1.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.btn-warning[disabled]:hover,
.c1.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.nav > li > a:hover,
.c0.nav > li > a:focus {
  background-color: #e6e6e6;
}

.c0.nav > li.disabled > a {
  color: #9b9b9b;
}

.c0.nav > li.disabled > a:hover,
.c0.nav > li.disabled > a:focus {
  color: #9b9b9b;
}

.c0.nav .open > a,
.c0.nav .open > a:hover,
.c0.nav .open > a:focus {
  background-color: #e6e6e6;
  border-color: #702785;
}

.c0.nav.nav-pills > li.active > a,
.c0.nav.nav-pills > li.active > a:hover,
.c0.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c0.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #cdcdcd #cdcdcd rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a:hover {
  background-color: #cdcdcd;
  color: rgb(46,46,46);
}

.c0.nav .nav-tabs > li.active > a,
.c0.nav .nav-tabs > li.active > a:hover,
.c0.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c0.nav .nav-tabs > li.disabled > a,
.c0.nav .nav-tabs > li.disabled > a:hover,
.c0.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c0.nav.nav-justified > .active > a,
.c0.nav.nav-justified > .active > a:hover,
.c0.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

@media (min-width:768px) {
  .c0.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c0.nav.nav-justified > .active > a,
  .c0.nav.nav-justified > .active > a:hover,
  .c0.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "lastClassName": "c0",
        "rules": Array [
          [Function],
        ],
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={false}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    bsClass="row"
    className="content"
    componentClass="div"
  >
    <div
      className="content row"
    >
      <Col
        bsClass="col"
        className="subnavigation"
        componentClass="div"
        md={2}
      >
        <div
          className="subnavigation col-md-2"
        >
          <Nav
            activeKey="Key1"
            bsStyle="pills"
            justified={false}
            onSelect={[Function]}
            stacked={true}
          >
            <StyledComponent
              activeKey="Key1"
              bsStyle="pills"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "STYLES": Array [
                    "tabs",
                    "pills",
                  ],
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Nav-dzawzr-0",
                    "isStatic": false,
                    "lastClassName": "c0",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "Nav",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Nav-dzawzr-0",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              justified={false}
              onSelect={[Function]}
              stacked={true}
            >
              <Nav
                activeKey="Key1"
                bsClass="nav"
                bsStyle="pills"
                className="c0"
                justified={false}
                onSelect={[Function]}
                pullLeft={false}
                pullRight={false}
                stacked={true}
              >
                <ul
                  className="c0 nav nav-pills nav-stacked"
                  role={null}
                >
                  <NavItem
                    active={true}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key1"
                    key=".$Key1"
                    onSelect={[Function]}
                  >
                    <li
                      className="active"
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title1
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key2"
                    key=".$Key2"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title2
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key3"
                    key=".$Key3"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title3
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                </ul>
              </Nav>
            </StyledComponent>
          </Nav>
          <br />
          <Row
            bsClass="row"
            componentClass="div"
          >
            <div
              className="row"
            >
              <Col
                bsClass="col"
                componentClass="div"
                xs={6}
              >
                <div
                  className="col-xs-6"
                >
                  <ForwardRef
                    bsSize="small"
                    bsStyle="info"
                    disabled={true}
                    onClick={[Function]}
                  >
                    <Button__StyledButton
                      bsSize="small"
                      bsStyle="info"
                      disabled={true}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        bsSize="small"
                        bsStyle="info"
                        disabled={true}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "SIZES": Array [
                              "large",
                              "small",
                              "xsmall",
                            ],
                            "STYLES": Array [
                              "success",
                              "warning",
                              "danger",
                              "info",
                              "default",
                              "primary",
                              "link",
                            ],
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Button__StyledButton-c9cbmb-0",
                              "isStatic": false,
                              "lastClassName": "c1",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Button__StyledButton",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Button
                          active={false}
                          block={false}
                          bsClass="btn"
                          bsSize="small"
                          bsStyle="info"
                          className="c1"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <button
                            className="c1 btn btn-sm btn-info"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            Previous
                          </button>
                        </Button>
                      </StyledComponent>
                    </Button__StyledButton>
                  </ForwardRef>
                </div>
              </Col>
              <Col
                bsClass="col"
                className="text-right"
                componentClass="div"
                xs={6}
              >
                <div
                  className="text-right col-xs-6"
                >
                  <ForwardRef
                    bsSize="small"
                    bsStyle="info"
                    onClick={[Function]}
                  >
                    <Button__StyledButton
                      bsSize="small"
                      bsStyle="info"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        bsSize="small"
                        bsStyle="info"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "SIZES": Array [
                              "large",
                              "small",
                              "xsmall",
                            ],
                            "STYLES": Array [
                              "success",
                              "warning",
                              "danger",
                              "info",
                              "default",
                              "primary",
                              "link",
                            ],
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Button__StyledButton-c9cbmb-0",
                              "isStatic": false,
                              "lastClassName": "c1",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Button__StyledButton",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Button
                          active={false}
                          block={false}
                          bsClass="btn"
                          bsSize="small"
                          bsStyle="info"
                          className="c1"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <button
                            className="c1 btn btn-sm btn-info"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            Next
                          </button>
                        </Button>
                      </StyledComponent>
                    </Button__StyledButton>
                  </ForwardRef>
                </div>
              </Col>
            </div>
          </Row>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        md={10}
      >
        <div
          className="col-md-10"
        >
          <div>
            Component1
          </div>
        </div>
      </Col>
    </div>
  </Row>
</Wizard>
`;

exports[`<Wizard /> should render with 3 steps and children 1`] = `
.c1.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c1.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c1.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c1.btn-danger[disabled],
.c1.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-danger[disabled]:hover,
.c1.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c1.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c1.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c1.btn-default[disabled],
.c1.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-default[disabled]:hover,
.c1.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c1.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c1.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c1.btn-info[disabled],
.c1.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-info[disabled]:hover,
.c1.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c1.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c1.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c1.btn-link[disabled],
.c1.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-link[disabled]:hover,
.c1.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c1.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c1.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c1.btn-primary[disabled],
.c1.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-primary[disabled]:hover,
.c1.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c1.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c1.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c1.btn-success[disabled],
.c1.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-success[disabled]:hover,
.c1.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c1.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c1.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c1.btn-warning[disabled],
.c1.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.btn-warning[disabled]:hover,
.c1.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.nav > li > a:hover,
.c0.nav > li > a:focus {
  background-color: #e6e6e6;
}

.c0.nav > li.disabled > a {
  color: #9b9b9b;
}

.c0.nav > li.disabled > a:hover,
.c0.nav > li.disabled > a:focus {
  color: #9b9b9b;
}

.c0.nav .open > a,
.c0.nav .open > a:hover,
.c0.nav .open > a:focus {
  background-color: #e6e6e6;
  border-color: #702785;
}

.c0.nav.nav-pills > li.active > a,
.c0.nav.nav-pills > li.active > a:hover,
.c0.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c0.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #cdcdcd #cdcdcd rgb(198,207,231);
}

.c0.nav .nav-tabs > li > a:hover {
  background-color: #cdcdcd;
  color: rgb(46,46,46);
}

.c0.nav .nav-tabs > li.active > a,
.c0.nav .nav-tabs > li.active > a:hover,
.c0.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c0.nav .nav-tabs > li.disabled > a,
.c0.nav .nav-tabs > li.disabled > a:hover,
.c0.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c0.nav.nav-justified > .active > a,
.c0.nav.nav-justified > .active > a:hover,
.c0.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

@media (min-width:768px) {
  .c0.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c0.nav.nav-justified > .active > a,
  .c0.nav.nav-justified > .active > a:hover,
  .c0.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "lastClassName": "c0",
        "rules": Array [
          [Function],
        ],
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={false}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    bsClass="row"
    className="content"
    componentClass="div"
  >
    <div
      className="content row"
    >
      <Col
        bsClass="col"
        className="subnavigation"
        componentClass="div"
        md={2}
      >
        <div
          className="subnavigation col-md-2"
        >
          <Nav
            activeKey="Key1"
            bsStyle="pills"
            justified={false}
            onSelect={[Function]}
            stacked={true}
          >
            <StyledComponent
              activeKey="Key1"
              bsStyle="pills"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "STYLES": Array [
                    "tabs",
                    "pills",
                  ],
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "Nav-dzawzr-0",
                    "isStatic": false,
                    "lastClassName": "c0",
                    "rules": Array [
                      [Function],
                    ],
                  },
                  "displayName": "Nav",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "Nav-dzawzr-0",
                  "target": [Function],
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              justified={false}
              onSelect={[Function]}
              stacked={true}
            >
              <Nav
                activeKey="Key1"
                bsClass="nav"
                bsStyle="pills"
                className="c0"
                justified={false}
                onSelect={[Function]}
                pullLeft={false}
                pullRight={false}
                stacked={true}
              >
                <ul
                  className="c0 nav nav-pills nav-stacked"
                  role={null}
                >
                  <NavItem
                    active={true}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key1"
                    key=".$Key1"
                    onSelect={[Function]}
                  >
                    <li
                      className="active"
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title1
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key2"
                    key=".$Key2"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title2
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                  <NavItem
                    active={false}
                    activeKey="Key1"
                    disabled={false}
                    eventKey="Key3"
                    key=".$Key3"
                    onSelect={[Function]}
                  >
                    <li
                      className=""
                      role="presentation"
                    >
                      <SafeAnchor
                        componentClass="a"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <a
                          href="#"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          role="button"
                        >
                          Title3
                        </a>
                      </SafeAnchor>
                    </li>
                  </NavItem>
                </ul>
              </Nav>
            </StyledComponent>
          </Nav>
          <br />
          <Row
            bsClass="row"
            componentClass="div"
          >
            <div
              className="row"
            >
              <Col
                bsClass="col"
                componentClass="div"
                xs={6}
              >
                <div
                  className="col-xs-6"
                >
                  <ForwardRef
                    bsSize="small"
                    bsStyle="info"
                    disabled={true}
                    onClick={[Function]}
                  >
                    <Button__StyledButton
                      bsSize="small"
                      bsStyle="info"
                      disabled={true}
                      onClick={[Function]}
                    >
                      <StyledComponent
                        bsSize="small"
                        bsStyle="info"
                        disabled={true}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "SIZES": Array [
                              "large",
                              "small",
                              "xsmall",
                            ],
                            "STYLES": Array [
                              "success",
                              "warning",
                              "danger",
                              "info",
                              "default",
                              "primary",
                              "link",
                            ],
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Button__StyledButton-c9cbmb-0",
                              "isStatic": false,
                              "lastClassName": "c1",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Button__StyledButton",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Button
                          active={false}
                          block={false}
                          bsClass="btn"
                          bsSize="small"
                          bsStyle="info"
                          className="c1"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <button
                            className="c1 btn btn-sm btn-info"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            Previous
                          </button>
                        </Button>
                      </StyledComponent>
                    </Button__StyledButton>
                  </ForwardRef>
                </div>
              </Col>
              <Col
                bsClass="col"
                className="text-right"
                componentClass="div"
                xs={6}
              >
                <div
                  className="text-right col-xs-6"
                >
                  <ForwardRef
                    bsSize="small"
                    bsStyle="info"
                    onClick={[Function]}
                  >
                    <Button__StyledButton
                      bsSize="small"
                      bsStyle="info"
                      onClick={[Function]}
                    >
                      <StyledComponent
                        bsSize="small"
                        bsStyle="info"
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "SIZES": Array [
                              "large",
                              "small",
                              "xsmall",
                            ],
                            "STYLES": Array [
                              "success",
                              "warning",
                              "danger",
                              "info",
                              "default",
                              "primary",
                              "link",
                            ],
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "Button__StyledButton-c9cbmb-0",
                              "isStatic": false,
                              "lastClassName": "c1",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "Button__StyledButton",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "Button__StyledButton-c9cbmb-0",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        onClick={[Function]}
                      >
                        <Button
                          active={false}
                          block={false}
                          bsClass="btn"
                          bsSize="small"
                          bsStyle="info"
                          className="c1"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <button
                            className="c1 btn btn-sm btn-info"
                            disabled={false}
                            onClick={[Function]}
                            type="button"
                          >
                            Next
                          </button>
                        </Button>
                      </StyledComponent>
                    </Button__StyledButton>
                  </ForwardRef>
                </div>
              </Col>
            </div>
          </Row>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        md={7}
      >
        <div
          className="col-md-7"
        >
          <div>
            Component1
          </div>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        md={3}
      >
        <div
          className="col-md-3"
        >
          <span>
            Preview
          </span>
        </div>
      </Col>
    </div>
  </Row>
</Wizard>
`;
