// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Wizard /> should render in horizontal mode with 3 steps 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c4.nav > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c4.nav > li > a:hover,
.c4.nav > li > a:focus {
  background-color: #f3f3f3;
}

.c4.nav > li.disabled > a {
  color: #a6a6a6;
}

.c4.nav > li.disabled > a:hover,
.c4.nav > li.disabled > a:focus {
  color: #a6a6a6;
}

.c4.nav .open > a,
.c4.nav .open > a:hover,
.c4.nav .open > a:focus {
  background-color: #f3f3f3;
  border-color: #702785;
}

.c4.nav.nav-pills > li.active > a,
.c4.nav.nav-pills > li.active > a:hover,
.c4.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c4.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c4.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #f3f3f3 #f3f3f3 rgb(198,207,231);
}

.c4.nav .nav-tabs > li > a:hover {
  background-color: #f3f3f3;
  color: #1f1f1f;
}

.c4.nav .nav-tabs > li.active > a,
.c4.nav .nav-tabs > li.active > a:hover,
.c4.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c4.nav .nav-tabs > li.disabled > a,
.c4.nav .nav-tabs > li.disabled > a:hover,
.c4.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c4.nav.nav-justified > .active > a,
.c4.nav.nav-justified > .active > a:hover,
.c4.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

.c0.content {
  background-color: #fff;
  border: 1px solid #cdcdcd;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c1 {
  margin-bottom: 15px;
}

.c2 {
  padding: 7px;
}

@media (min-width:768px) {
  .c4.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c4.nav.nav-justified > .active > a,
  .c4.nav.nav-justified > .active > a:hover,
  .c4.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "baseHash": -110015796,
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "rules": Array [
          [Function],
        ],
        "staticRulesId": "",
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "shouldForwardProp": undefined,
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={true}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    className="content"
  >
    <Row
      bsClass="row"
      className="c0 content"
      componentClass="div"
    >
      <div
        className="c0 content row"
      >
        <Wizard__HorizontalCol
          sm={12}
        >
          <Col
            bsClass="col"
            className="c1"
            componentClass="div"
            sm={12}
          >
            <div
              className="c1 col-sm-12"
            >
              <div
                className="pull-right"
              >
                <Wizard__HorizontalButtonToolbar>
                  <ButtonToolbar
                    bsClass="btn-toolbar"
                    className="c2"
                  >
                    <div
                      className="c2 btn-toolbar"
                      role="toolbar"
                    >
                      <ForwardRef
                        bsSize="xsmall"
                        bsStyle="info"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="xsmall"
                          bsStyle="info"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsSize="xsmall"
                            bsStyle="info"
                            className="c3"
                            disabled={true}
                            onClick={[Function]}
                          >
                            <button
                              className="c3 btn btn-xs btn-info"
                              disabled={true}
                              onClick={[Function]}
                              type="button"
                            >
                              <Icon
                                name="caret-left"
                                type="solid"
                              >
                                <FontAwesomeIcon
                                  icon={
                                    Object {
                                      "iconName": "caret-left",
                                      "prefix": "fas",
                                    }
                                  }
                                >
                                  <svg
                                    className="svg-inline--fa fa-caret-left"
                                  />
                                </FontAwesomeIcon>
                              </Icon>
                            </button>
                          </Button>
                        </Button__StyledButton>
                      </ForwardRef>
                      <ForwardRef
                        bsSize="xsmall"
                        bsStyle="info"
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="xsmall"
                          bsStyle="info"
                          onClick={[Function]}
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsSize="xsmall"
                            bsStyle="info"
                            className="c3"
                            disabled={false}
                            onClick={[Function]}
                          >
                            <button
                              className="c3 btn btn-xs btn-info"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <Icon
                                name="caret-right"
                                type="solid"
                              >
                                <FontAwesomeIcon
                                  icon={
                                    Object {
                                      "iconName": "caret-right",
                                      "prefix": "fas",
                                    }
                                  }
                                >
                                  <svg
                                    className="svg-inline--fa fa-caret-right"
                                  />
                                </FontAwesomeIcon>
                              </Icon>
                            </button>
                          </Button>
                        </Button__StyledButton>
                      </ForwardRef>
                    </div>
                  </ButtonToolbar>
                </Wizard__HorizontalButtonToolbar>
              </div>
              <Nav
                activeKey="Key1"
                bsStyle="pills"
                justified={false}
                onSelect={[Function]}
              >
                <Nav
                  activeKey="Key1"
                  bsClass="nav"
                  bsStyle="pills"
                  className="c4"
                  justified={false}
                  onSelect={[Function]}
                  pullLeft={false}
                  pullRight={false}
                  stacked={false}
                >
                  <ul
                    className="c4 nav nav-pills"
                    role={null}
                  >
                    <NavItem
                      active={true}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key1"
                      key=".$Key1"
                      onSelect={[Function]}
                    >
                      <li
                        className="active"
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title1
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key2"
                      key=".$Key2"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title2
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key3"
                      key=".$Key3"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title3
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                  </ul>
                </Nav>
              </Nav>
            </div>
          </Col>
        </Wizard__HorizontalCol>
        <Col
          bsClass="col"
          componentClass="div"
          md={12}
        >
          <div
            className="col-md-12"
          >
            <div>
              Component1
            </div>
          </div>
        </Col>
      </div>
    </Row>
  </Row>
</Wizard>
`;

exports[`<Wizard /> should render in horizontal mode with 3 steps and children 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c4.nav > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c4.nav > li > a:hover,
.c4.nav > li > a:focus {
  background-color: #f3f3f3;
}

.c4.nav > li.disabled > a {
  color: #a6a6a6;
}

.c4.nav > li.disabled > a:hover,
.c4.nav > li.disabled > a:focus {
  color: #a6a6a6;
}

.c4.nav .open > a,
.c4.nav .open > a:hover,
.c4.nav .open > a:focus {
  background-color: #f3f3f3;
  border-color: #702785;
}

.c4.nav.nav-pills > li.active > a,
.c4.nav.nav-pills > li.active > a:hover,
.c4.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c4.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c4.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #f3f3f3 #f3f3f3 rgb(198,207,231);
}

.c4.nav .nav-tabs > li > a:hover {
  background-color: #f3f3f3;
  color: #1f1f1f;
}

.c4.nav .nav-tabs > li.active > a,
.c4.nav .nav-tabs > li.active > a:hover,
.c4.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c4.nav .nav-tabs > li.disabled > a,
.c4.nav .nav-tabs > li.disabled > a:hover,
.c4.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c4.nav.nav-justified > .active > a,
.c4.nav.nav-justified > .active > a:hover,
.c4.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

.c0.content {
  background-color: #fff;
  border: 1px solid #cdcdcd;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c1 {
  margin-bottom: 15px;
}

.c2 {
  padding: 7px;
}

@media (min-width:768px) {
  .c4.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c4.nav.nav-justified > .active > a,
  .c4.nav.nav-justified > .active > a:hover,
  .c4.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "baseHash": -110015796,
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "rules": Array [
          [Function],
        ],
        "staticRulesId": "",
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "shouldForwardProp": undefined,
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={true}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    className="content"
  >
    <Row
      bsClass="row"
      className="c0 content"
      componentClass="div"
    >
      <div
        className="c0 content row"
      >
        <Wizard__HorizontalCol
          sm={12}
        >
          <Col
            bsClass="col"
            className="c1"
            componentClass="div"
            sm={12}
          >
            <div
              className="c1 col-sm-12"
            >
              <div
                className="pull-right"
              >
                <Wizard__HorizontalButtonToolbar>
                  <ButtonToolbar
                    bsClass="btn-toolbar"
                    className="c2"
                  >
                    <div
                      className="c2 btn-toolbar"
                      role="toolbar"
                    >
                      <ForwardRef
                        bsSize="xsmall"
                        bsStyle="info"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="xsmall"
                          bsStyle="info"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsSize="xsmall"
                            bsStyle="info"
                            className="c3"
                            disabled={true}
                            onClick={[Function]}
                          >
                            <button
                              className="c3 btn btn-xs btn-info"
                              disabled={true}
                              onClick={[Function]}
                              type="button"
                            >
                              <Icon
                                name="caret-left"
                                type="solid"
                              >
                                <FontAwesomeIcon
                                  icon={
                                    Object {
                                      "iconName": "caret-left",
                                      "prefix": "fas",
                                    }
                                  }
                                >
                                  <svg
                                    className="svg-inline--fa fa-caret-left"
                                  />
                                </FontAwesomeIcon>
                              </Icon>
                            </button>
                          </Button>
                        </Button__StyledButton>
                      </ForwardRef>
                      <ForwardRef
                        bsSize="xsmall"
                        bsStyle="info"
                        onClick={[Function]}
                      >
                        <Button__StyledButton
                          bsSize="xsmall"
                          bsStyle="info"
                          onClick={[Function]}
                        >
                          <Button
                            active={false}
                            block={false}
                            bsClass="btn"
                            bsSize="xsmall"
                            bsStyle="info"
                            className="c3"
                            disabled={false}
                            onClick={[Function]}
                          >
                            <button
                              className="c3 btn btn-xs btn-info"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <Icon
                                name="caret-right"
                                type="solid"
                              >
                                <FontAwesomeIcon
                                  icon={
                                    Object {
                                      "iconName": "caret-right",
                                      "prefix": "fas",
                                    }
                                  }
                                >
                                  <svg
                                    className="svg-inline--fa fa-caret-right"
                                  />
                                </FontAwesomeIcon>
                              </Icon>
                            </button>
                          </Button>
                        </Button__StyledButton>
                      </ForwardRef>
                    </div>
                  </ButtonToolbar>
                </Wizard__HorizontalButtonToolbar>
              </div>
              <Nav
                activeKey="Key1"
                bsStyle="pills"
                justified={false}
                onSelect={[Function]}
              >
                <Nav
                  activeKey="Key1"
                  bsClass="nav"
                  bsStyle="pills"
                  className="c4"
                  justified={false}
                  onSelect={[Function]}
                  pullLeft={false}
                  pullRight={false}
                  stacked={false}
                >
                  <ul
                    className="c4 nav nav-pills"
                    role={null}
                  >
                    <NavItem
                      active={true}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key1"
                      key=".$Key1"
                      onSelect={[Function]}
                    >
                      <li
                        className="active"
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title1
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key2"
                      key=".$Key2"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title2
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key3"
                      key=".$Key3"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title3
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                  </ul>
                </Nav>
              </Nav>
            </div>
          </Col>
        </Wizard__HorizontalCol>
        <Col
          bsClass="col"
          componentClass="div"
          md={7}
        >
          <div
            className="col-md-7"
          >
            <div>
              Component1
            </div>
          </div>
        </Col>
        <Col
          bsClass="col"
          componentClass="div"
          md={5}
        >
          <div
            className="col-md-5"
          >
            <span>
              Preview
            </span>
          </div>
        </Col>
      </div>
    </Row>
  </Row>
</Wizard>
`;

exports[`<Wizard /> should render with 3 steps 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.nav > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c2.nav > li > a:hover,
.c2.nav > li > a:focus {
  background-color: #f3f3f3;
}

.c2.nav > li.disabled > a {
  color: #a6a6a6;
}

.c2.nav > li.disabled > a:hover,
.c2.nav > li.disabled > a:focus {
  color: #a6a6a6;
}

.c2.nav .open > a,
.c2.nav .open > a:hover,
.c2.nav .open > a:focus {
  background-color: #f3f3f3;
  border-color: #702785;
}

.c2.nav.nav-pills > li.active > a,
.c2.nav.nav-pills > li.active > a:hover,
.c2.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c2.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c2.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #f3f3f3 #f3f3f3 rgb(198,207,231);
}

.c2.nav .nav-tabs > li > a:hover {
  background-color: #f3f3f3;
  color: #1f1f1f;
}

.c2.nav .nav-tabs > li.active > a,
.c2.nav .nav-tabs > li.active > a:hover,
.c2.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c2.nav .nav-tabs > li.disabled > a,
.c2.nav .nav-tabs > li.disabled > a:hover,
.c2.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c2.nav.nav-justified > .active > a,
.c2.nav.nav-justified > .active > a:hover,
.c2.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

.c0.content {
  background-color: #fff;
  border: 1px solid #cdcdcd;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c1 {
  border-right: #cdcdcd solid 1px;
}

@media (min-width:768px) {
  .c2.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c2.nav.nav-justified > .active > a,
  .c2.nav.nav-justified > .active > a:hover,
  .c2.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "baseHash": -110015796,
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "rules": Array [
          [Function],
        ],
        "staticRulesId": "",
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "shouldForwardProp": undefined,
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={false}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    className="content"
  >
    <Row
      bsClass="row"
      className="c0 content"
      componentClass="div"
    >
      <div
        className="c0 content row"
      >
        <Wizard__SubnavigationCol
          md={2}
        >
          <Col
            bsClass="col"
            className="c1"
            componentClass="div"
            md={2}
          >
            <div
              className="c1 col-md-2"
            >
              <Nav
                activeKey="Key1"
                bsStyle="pills"
                justified={false}
                onSelect={[Function]}
                stacked={true}
              >
                <Nav
                  activeKey="Key1"
                  bsClass="nav"
                  bsStyle="pills"
                  className="c2"
                  justified={false}
                  onSelect={[Function]}
                  pullLeft={false}
                  pullRight={false}
                  stacked={true}
                >
                  <ul
                    className="c2 nav nav-pills nav-stacked"
                    role={null}
                  >
                    <NavItem
                      active={true}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key1"
                      key=".$Key1"
                      onSelect={[Function]}
                    >
                      <li
                        className="active"
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title1
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key2"
                      key=".$Key2"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title2
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key3"
                      key=".$Key3"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title3
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                  </ul>
                </Nav>
              </Nav>
              <br />
              <Row>
                <Row
                  bsClass="row"
                  className="c0"
                  componentClass="div"
                >
                  <div
                    className="c0 row"
                  >
                    <Col
                      bsClass="col"
                      componentClass="div"
                      xs={6}
                    >
                      <div
                        className="col-xs-6"
                      >
                        <ForwardRef
                          bsSize="small"
                          bsStyle="info"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <Button__StyledButton
                            bsSize="small"
                            bsStyle="info"
                            disabled={true}
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c3"
                              disabled={true}
                              onClick={[Function]}
                            >
                              <button
                                className="c3 btn btn-sm btn-info"
                                disabled={true}
                                onClick={[Function]}
                                type="button"
                              >
                                Previous
                              </button>
                            </Button>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </Col>
                    <Col
                      bsClass="col"
                      className="text-right"
                      componentClass="div"
                      xs={6}
                    >
                      <div
                        className="text-right col-xs-6"
                      >
                        <ForwardRef
                          bsSize="small"
                          bsStyle="info"
                          onClick={[Function]}
                        >
                          <Button__StyledButton
                            bsSize="small"
                            bsStyle="info"
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c3"
                              disabled={false}
                              onClick={[Function]}
                            >
                              <button
                                className="c3 btn btn-sm btn-info"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                Next
                              </button>
                            </Button>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </Col>
                  </div>
                </Row>
              </Row>
            </div>
          </Col>
        </Wizard__SubnavigationCol>
        <Col
          bsClass="col"
          componentClass="div"
          md={10}
        >
          <div
            className="col-md-10"
          >
            <div>
              Component1
            </div>
          </div>
        </Col>
      </div>
    </Row>
  </Row>
</Wizard>
`;

exports[`<Wizard /> should render with 3 steps and children 1`] = `
.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.nav > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c2.nav > li > a:hover,
.c2.nav > li > a:focus {
  background-color: #f3f3f3;
}

.c2.nav > li.disabled > a {
  color: #a6a6a6;
}

.c2.nav > li.disabled > a:hover,
.c2.nav > li.disabled > a:focus {
  color: #a6a6a6;
}

.c2.nav .open > a,
.c2.nav .open > a:hover,
.c2.nav .open > a:focus {
  background-color: #f3f3f3;
  border-color: #702785;
}

.c2.nav.nav-pills > li.active > a,
.c2.nav.nav-pills > li.active > a:hover,
.c2.nav.nav-pills > li.active > a:focus {
  color: #fff;
  background-color: #702785;
}

.c2.nav .nav-tabs {
  border-bottom-color: rgb(198,207,231);
}

.c2.nav .nav-tabs > li > a {
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
  color: #1f1f1f;
  border-color: #f3f3f3 #f3f3f3 rgb(198,207,231);
}

.c2.nav .nav-tabs > li > a:hover {
  background-color: #f3f3f3;
  color: #1f1f1f;
}

.c2.nav .nav-tabs > li.active > a,
.c2.nav .nav-tabs > li.active > a:hover,
.c2.nav .nav-tabs > li.active > a:focus {
  color: #1f1f1f;
  background-color: #ffffff;
  border-color: rgb(198,207,231);
  border-bottom-color: transparent;
}

.c2.nav .nav-tabs > li.disabled > a,
.c2.nav .nav-tabs > li.disabled > a:hover,
.c2.nav .nav-tabs > li.disabled > a:focus {
  color: #9b9b9b;
  background-color: #ffffff;
  border-color: #ffffff #ffffff rgb(198,207,231);
  cursor: not-allowed;
}

.c2.nav.nav-justified > .active > a,
.c2.nav.nav-justified > .active > a:hover,
.c2.nav.nav-justified > .active > a:focus {
  border-color: rgb(198,207,231);
}

.c0.content {
  background-color: #fff;
  border: 1px solid #cdcdcd;
  margin-bottom: 9px;
  border-radius: 4px;
}

.c1 {
  border-right: #cdcdcd solid 1px;
}

@media (min-width:768px) {
  .c2.nav.nav-justified > li > a {
    border-bottom-color: rgb(198,207,231);
  }

  .c2.nav.nav-justified > .active > a,
  .c2.nav.nav-justified > .active > a:hover,
  .c2.nav.nav-justified > .active > a:focus {
    border-bottom-color: #ffffff;
  }
}

<Wizard
  NavigationComponent={
    Object {
      "$$typeof": Symbol(react.forward_ref),
      "STYLES": Array [
        "tabs",
        "pills",
      ],
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "baseHash": -110015796,
        "componentId": "Nav-dzawzr-0",
        "isStatic": false,
        "rules": Array [
          [Function],
        ],
        "staticRulesId": "",
      },
      "displayName": "Nav",
      "foldedComponentIds": Array [],
      "render": [Function],
      "shouldForwardProp": undefined,
      "styledComponentId": "Nav-dzawzr-0",
      "target": [Function],
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    }
  }
  containerClassName="content"
  hidePreviousNextButtons={false}
  horizontal={false}
  justified={false}
  onStepChange={[Function]}
  steps={
    Array [
      Object {
        "component": <div>
          Component1
        </div>,
        "key": "Key1",
        "title": "Title1",
      },
      Object {
        "component": <div>
          Component2
        </div>,
        "key": "Key2",
        "title": "Title2",
      },
      Object {
        "component": <div>
          Component3
        </div>,
        "key": "Key3",
        "title": "Title3",
      },
    ]
  }
>
  <Row
    className="content"
  >
    <Row
      bsClass="row"
      className="c0 content"
      componentClass="div"
    >
      <div
        className="c0 content row"
      >
        <Wizard__SubnavigationCol
          md={2}
        >
          <Col
            bsClass="col"
            className="c1"
            componentClass="div"
            md={2}
          >
            <div
              className="c1 col-md-2"
            >
              <Nav
                activeKey="Key1"
                bsStyle="pills"
                justified={false}
                onSelect={[Function]}
                stacked={true}
              >
                <Nav
                  activeKey="Key1"
                  bsClass="nav"
                  bsStyle="pills"
                  className="c2"
                  justified={false}
                  onSelect={[Function]}
                  pullLeft={false}
                  pullRight={false}
                  stacked={true}
                >
                  <ul
                    className="c2 nav nav-pills nav-stacked"
                    role={null}
                  >
                    <NavItem
                      active={true}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key1"
                      key=".$Key1"
                      onSelect={[Function]}
                    >
                      <li
                        className="active"
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title1
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key2"
                      key=".$Key2"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title2
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                    <NavItem
                      active={false}
                      activeKey="Key1"
                      disabled={false}
                      eventKey="Key3"
                      key=".$Key3"
                      onSelect={[Function]}
                    >
                      <li
                        className=""
                        role="presentation"
                      >
                        <SafeAnchor
                          componentClass="a"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <a
                            href="#"
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            role="button"
                          >
                            Title3
                          </a>
                        </SafeAnchor>
                      </li>
                    </NavItem>
                  </ul>
                </Nav>
              </Nav>
              <br />
              <Row>
                <Row
                  bsClass="row"
                  className="c0"
                  componentClass="div"
                >
                  <div
                    className="c0 row"
                  >
                    <Col
                      bsClass="col"
                      componentClass="div"
                      xs={6}
                    >
                      <div
                        className="col-xs-6"
                      >
                        <ForwardRef
                          bsSize="small"
                          bsStyle="info"
                          disabled={true}
                          onClick={[Function]}
                        >
                          <Button__StyledButton
                            bsSize="small"
                            bsStyle="info"
                            disabled={true}
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c3"
                              disabled={true}
                              onClick={[Function]}
                            >
                              <button
                                className="c3 btn btn-sm btn-info"
                                disabled={true}
                                onClick={[Function]}
                                type="button"
                              >
                                Previous
                              </button>
                            </Button>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </Col>
                    <Col
                      bsClass="col"
                      className="text-right"
                      componentClass="div"
                      xs={6}
                    >
                      <div
                        className="text-right col-xs-6"
                      >
                        <ForwardRef
                          bsSize="small"
                          bsStyle="info"
                          onClick={[Function]}
                        >
                          <Button__StyledButton
                            bsSize="small"
                            bsStyle="info"
                            onClick={[Function]}
                          >
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsSize="small"
                              bsStyle="info"
                              className="c3"
                              disabled={false}
                              onClick={[Function]}
                            >
                              <button
                                className="c3 btn btn-sm btn-info"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                Next
                              </button>
                            </Button>
                          </Button__StyledButton>
                        </ForwardRef>
                      </div>
                    </Col>
                  </div>
                </Row>
              </Row>
            </div>
          </Col>
        </Wizard__SubnavigationCol>
        <Col
          bsClass="col"
          componentClass="div"
          md={7}
        >
          <div
            className="col-md-7"
          >
            <div>
              Component1
            </div>
          </div>
        </Col>
        <Col
          bsClass="col"
          componentClass="div"
          md={3}
        >
          <div
            className="col-md-3"
          >
            <span>
              Preview
            </span>
          </div>
        </Col>
      </div>
    </Row>
  </Row>
</Wizard>
`;
