// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<WidgetFooter /> should render a widget footer locked and disabled replay 1`] = `
<WidgetFooter
  calculatedAt="1996-01-17T03:24:00.000Z"
  error={Object {}}
  errorMessage=""
  locked={true}
  onDelete={[Function]}
  onEditConfig={[Function]}
  onShowConfig={[Function]}
  replayDisabled={true}
  replayHref="http://example.org"
>
  <div>
    <div
      className="widget-update-info"
    >
      <span
        className="load-error"
        title=""
      >
        <ForwardRef
          fixedWidth={false}
          inverse={false}
          name="exclamation-triangle"
          pulse={false}
          spin={false}
        >
          <i
            className="fa fa-exclamation-triangle"
          />
        </ForwardRef>
      </span>
      <span
        title="1996-01-17T03:24:00.000Z"
      >
        <Timestamp
          dateTime="1996-01-17T03:24:00.000Z"
          format="YYYY-MM-DD HH:mm:ss.SSS"
          relative={true}
        >
          <time
            dateTime="1996-01-17T03:24:00.000Z"
            key="time-1996-01-17T03:24:00.000Z"
            title="1996-01-17T03:24:00.000Z"
          >
            22 years ago
          </time>
        </Timestamp>
      </span>
    </div>
    <div>
      <div
        className="actions"
      >
        <div
          className="widget-info"
        >
          <ForwardRef
            bsStyle="link"
            className="btn-text"
            onClick={[Function]}
            title="Show widget configuration"
          >
            <Button
              bsStyle="link"
              className="btn-text"
              onClick={[Function]}
              title="Show widget configuration"
            >
              <StyledComponent
                bsStyle="link"
                className="btn-text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "SIZES": Array [
                      "large",
                      "small",
                      "xsmall",
                    ],
                    "STYLES": Array [
                      "success",
                      "warning",
                      "danger",
                      "info",
                      "default",
                      "primary",
                      "link",
                    ],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Button-c9cbmb-0",
                      "isStatic": false,
                      "lastClassName": "bTFtAM",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Button-c9cbmb-0",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                title="Show widget configuration"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="link"
                  className="btn-text Button-c9cbmb-0 bTFtAM"
                  disabled={false}
                  onClick={[Function]}
                  title="Show widget configuration"
                >
                  <button
                    className="btn-text Button-c9cbmb-0 bTFtAM btn btn-link"
                    disabled={false}
                    onClick={[Function]}
                    title="Show widget configuration"
                    type="button"
                  >
                    <ForwardRef
                      fixedWidth={false}
                      inverse={false}
                      name="info-circle"
                      pulse={false}
                      spin={false}
                    >
                      <i
                        className="fa fa-info-circle"
                      />
                    </ForwardRef>
                  </button>
                </Button>
              </StyledComponent>
            </Button>
          </ForwardRef>
        </div>
      </div>
    </div>
  </div>
</WidgetFooter>
`;

exports[`<WidgetFooter /> should render a widget footer locked and enabled replay 1`] = `
<WidgetFooter
  calculatedAt="1996-01-17T03:24:00.000Z"
  error={Object {}}
  errorMessage=""
  locked={true}
  onDelete={[Function]}
  onEditConfig={[Function]}
  onShowConfig={[Function]}
  replayDisabled={false}
  replayHref="http://example.org"
>
  <div>
    <div
      className="widget-update-info"
    >
      <span
        className="load-error"
        title=""
      >
        <ForwardRef
          fixedWidth={false}
          inverse={false}
          name="exclamation-triangle"
          pulse={false}
          spin={false}
        >
          <i
            className="fa fa-exclamation-triangle"
          />
        </ForwardRef>
      </span>
      <span
        title="1996-01-17T03:24:00.000Z"
      >
        <Timestamp
          dateTime="1996-01-17T03:24:00.000Z"
          format="YYYY-MM-DD HH:mm:ss.SSS"
          relative={true}
        >
          <time
            dateTime="1996-01-17T03:24:00.000Z"
            key="time-1996-01-17T03:24:00.000Z"
            title="1996-01-17T03:24:00.000Z"
          >
            22 years ago
          </time>
        </Timestamp>
      </span>
    </div>
    <div>
      <div
        className="actions"
      >
        <div
          className="widget-replay"
        >
          <ForwardRef
            bsStyle="link"
            className="btn-text"
            href="http://example.org"
            title="Replay search"
          >
            <Button
              bsStyle="link"
              className="btn-text"
              href="http://example.org"
              title="Replay search"
            >
              <StyledComponent
                bsStyle="link"
                className="btn-text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "SIZES": Array [
                      "large",
                      "small",
                      "xsmall",
                    ],
                    "STYLES": Array [
                      "success",
                      "warning",
                      "danger",
                      "info",
                      "default",
                      "primary",
                      "link",
                    ],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Button-c9cbmb-0",
                      "isStatic": false,
                      "lastClassName": "bTFtAM",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Button-c9cbmb-0",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                href="http://example.org"
                title="Replay search"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="link"
                  className="btn-text Button-c9cbmb-0 bTFtAM"
                  disabled={false}
                  href="http://example.org"
                  title="Replay search"
                >
                  <SafeAnchor
                    className="btn-text Button-c9cbmb-0 bTFtAM btn btn-link"
                    componentClass="a"
                    disabled={false}
                    href="http://example.org"
                    title="Replay search"
                  >
                    <a
                      className="btn-text Button-c9cbmb-0 bTFtAM btn btn-link"
                      href="http://example.org"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      title="Replay search"
                    >
                      <ForwardRef
                        fixedWidth={false}
                        inverse={false}
                        name="play"
                        pulse={false}
                        spin={false}
                      >
                        <i
                          className="fa fa-play"
                        />
                      </ForwardRef>
                    </a>
                  </SafeAnchor>
                </Button>
              </StyledComponent>
            </Button>
          </ForwardRef>
        </div>
        <div
          className="widget-info"
        >
          <ForwardRef
            bsStyle="link"
            className="btn-text"
            onClick={[Function]}
            title="Show widget configuration"
          >
            <Button
              bsStyle="link"
              className="btn-text"
              onClick={[Function]}
              title="Show widget configuration"
            >
              <StyledComponent
                bsStyle="link"
                className="btn-text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "SIZES": Array [
                      "large",
                      "small",
                      "xsmall",
                    ],
                    "STYLES": Array [
                      "success",
                      "warning",
                      "danger",
                      "info",
                      "default",
                      "primary",
                      "link",
                    ],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Button-c9cbmb-0",
                      "isStatic": false,
                      "lastClassName": "bTFtAM",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Button-c9cbmb-0",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                title="Show widget configuration"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="link"
                  className="btn-text Button-c9cbmb-0 bTFtAM"
                  disabled={false}
                  onClick={[Function]}
                  title="Show widget configuration"
                >
                  <button
                    className="btn-text Button-c9cbmb-0 bTFtAM btn btn-link"
                    disabled={false}
                    onClick={[Function]}
                    title="Show widget configuration"
                    type="button"
                  >
                    <ForwardRef
                      fixedWidth={false}
                      inverse={false}
                      name="info-circle"
                      pulse={false}
                      spin={false}
                    >
                      <i
                        className="fa fa-info-circle"
                      />
                    </ForwardRef>
                  </button>
                </Button>
              </StyledComponent>
            </Button>
          </ForwardRef>
        </div>
      </div>
    </div>
  </div>
</WidgetFooter>
`;

exports[`<WidgetFooter /> should render a widget footer with unlocked 1`] = `
<WidgetFooter
  calculatedAt="1996-01-17T03:24:00.000Z"
  error={Object {}}
  errorMessage=""
  locked={false}
  onDelete={[Function]}
  onEditConfig={[Function]}
  onShowConfig={[Function]}
  replayDisabled={false}
  replayHref="http://example.org"
>
  <div>
    <div
      className="widget-update-info"
    >
      <span
        className="load-error"
        title=""
      >
        <ForwardRef
          fixedWidth={false}
          inverse={false}
          name="exclamation-triangle"
          pulse={false}
          spin={false}
        >
          <i
            className="fa fa-exclamation-triangle"
          />
        </ForwardRef>
      </span>
      <span
        title="1996-01-17T03:24:00.000Z"
      >
        <Timestamp
          dateTime="1996-01-17T03:24:00.000Z"
          format="YYYY-MM-DD HH:mm:ss.SSS"
          relative={true}
        >
          <time
            dateTime="1996-01-17T03:24:00.000Z"
            key="time-1996-01-17T03:24:00.000Z"
            title="1996-01-17T03:24:00.000Z"
          >
            22 years ago
          </time>
        </Timestamp>
      </span>
    </div>
    <div>
      <div
        className="actions"
      >
        <div
          className="widget-delete"
        >
          <ForwardRef
            bsStyle="link"
            className="btn-text"
            onClick={[Function]}
            title="Delete widget"
          >
            <Button
              bsStyle="link"
              className="btn-text"
              onClick={[Function]}
              title="Delete widget"
            >
              <StyledComponent
                bsStyle="link"
                className="btn-text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "SIZES": Array [
                      "large",
                      "small",
                      "xsmall",
                    ],
                    "STYLES": Array [
                      "success",
                      "warning",
                      "danger",
                      "info",
                      "default",
                      "primary",
                      "link",
                    ],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Button-c9cbmb-0",
                      "isStatic": false,
                      "lastClassName": "bTFtAM",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Button-c9cbmb-0",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                title="Delete widget"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="link"
                  className="btn-text Button-c9cbmb-0 bTFtAM"
                  disabled={false}
                  onClick={[Function]}
                  title="Delete widget"
                >
                  <button
                    className="btn-text Button-c9cbmb-0 bTFtAM btn btn-link"
                    disabled={false}
                    onClick={[Function]}
                    title="Delete widget"
                    type="button"
                  >
                    <ForwardRef
                      fixedWidth={false}
                      inverse={false}
                      name="trash"
                      pulse={false}
                      spin={false}
                    >
                      <i
                        className="fa fa-trash"
                      />
                    </ForwardRef>
                  </button>
                </Button>
              </StyledComponent>
            </Button>
          </ForwardRef>
        </div>
        <div
          className="widget-edit"
        >
          <ForwardRef
            bsStyle="link"
            className="btn-text"
            onClick={[Function]}
            title="Edit widget"
          >
            <Button
              bsStyle="link"
              className="btn-text"
              onClick={[Function]}
              title="Edit widget"
            >
              <StyledComponent
                bsStyle="link"
                className="btn-text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "SIZES": Array [
                      "large",
                      "small",
                      "xsmall",
                    ],
                    "STYLES": Array [
                      "success",
                      "warning",
                      "danger",
                      "info",
                      "default",
                      "primary",
                      "link",
                    ],
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "Button-c9cbmb-0",
                      "isStatic": false,
                      "lastClassName": "bTFtAM",
                      "rules": Array [
                        [Function],
                      ],
                    },
                    "displayName": "Button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "Button-c9cbmb-0",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                title="Edit widget"
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="link"
                  className="btn-text Button-c9cbmb-0 bTFtAM"
                  disabled={false}
                  onClick={[Function]}
                  title="Edit widget"
                >
                  <button
                    className="btn-text Button-c9cbmb-0 bTFtAM btn btn-link"
                    disabled={false}
                    onClick={[Function]}
                    title="Edit widget"
                    type="button"
                  >
                    <ForwardRef
                      fixedWidth={false}
                      inverse={false}
                      name="pencil"
                      pulse={false}
                      spin={false}
                    >
                      <i
                        className="fa fa-pencil"
                      />
                    </ForwardRef>
                  </button>
                </Button>
              </StyledComponent>
            </Button>
          </ForwardRef>
        </div>
      </div>
    </div>
  </div>
</WidgetFooter>
`;
