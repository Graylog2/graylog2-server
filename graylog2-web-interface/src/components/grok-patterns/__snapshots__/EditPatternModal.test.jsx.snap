// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EditPatternModal /> should render a modal button with as create 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c1 form {
  margin-bottom: 0;
}

.c1 .modal-dialog {
  margin-top: 55px;
}

.c1 .modal-dialog .modal-content {
  background-color: #fff;
  border-color: #a6a6a6;
}

.c1 .modal-header {
  border-bottom-color: #a6a6a6;
}

.c1 .modal-header button.close {
  color: currentColor;
}

.c1 .modal-footer {
  border-top-color: #a6a6a6;
}

.c1 .modal-title {
  font-size: 1.424rem;
}

.c1 .modal-body .form-group {
  margin-bottom: 5px;
}

<EditPatternModal
  create={true}
  id=""
  name=""
  pattern=""
  patterns={Array []}
  sampleData=""
  savePattern={[Function]}
  testPattern={[Function]}
  validPatternName={[Function]}
>
  <span>
    <Button
      bsStyle="success"
      onClick={[Function]}
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="success"
        className="c0"
        disabled={false}
        onClick={[Function]}
      >
        <button
          className="c0 btn btn-success"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          Create pattern
        </button>
      </Button>
    </Button>
    <BootstrapModalForm
      bsSize="large"
      cancelButtonText="Cancel"
      formProps={Object {}}
      onCancel={[Function]}
      onModalClose={[Function]}
      onModalOpen={[Function]}
      onSubmitForm={[Function]}
      show={false}
      submitButtonDisabled={false}
      submitButtonText="Save"
      title="Create Grok Pattern "
    >
      <BootstrapModalWrapper
        backdrop="static"
        bsSize="large"
        onClose={[Function]}
        onHide={[Function]}
        onOpen={[Function]}
        showModal={false}
      >
        <Modal
          backdrop="static"
          bsSize="large"
          onHide={[Function]}
          show={false}
        >
          <Modal
            animation={true}
            autoFocus={true}
            backdrop="static"
            bsClass="modal"
            bsSize="large"
            className="c1"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <Modal
              autoFocus={true}
              backdrop="static"
              backdropClassName="modal-backdrop"
              backdropTransition={[Function]}
              containerClassName="modal-open"
              enforceFocus={true}
              keyboard={true}
              manager={
                ModalManager {
                  "add": [Function],
                  "containers": Array [],
                  "data": Array [],
                  "handleContainerOverflow": true,
                  "hideSiblingNodes": true,
                  "isTopModal": [Function],
                  "modals": Array [],
                  "remove": [Function],
                }
              }
              onEntering={[Function]}
              onExited={[Function]}
              onHide={[Function]}
              onMouseUp={[Function]}
              renderBackdrop={[Function]}
              restoreFocus={true}
              show={false}
              transition={[Function]}
            />
          </Modal>
        </Modal>
      </BootstrapModalWrapper>
    </BootstrapModalForm>
  </span>
</EditPatternModal>
`;

exports[`<EditPatternModal /> should render a modal button with as edit 1`] = `
.c0.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c0.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c0.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c0.btn-danger[disabled],
.c0.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-danger[disabled]:hover,
.c0.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c0.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c0.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c0.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c0.btn-default[disabled],
.c0.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-default[disabled]:hover,
.c0.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c0.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c0.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c0.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c0.btn-info[disabled],
.c0.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-info[disabled]:hover,
.c0.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c0.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c0.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c0.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c0.btn-link[disabled],
.c0.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-link[disabled]:hover,
.c0.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c0.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c0.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c0.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c0.btn-primary[disabled],
.c0.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-primary[disabled]:hover,
.c0.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c0.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c0.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c0.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c0.btn-success[disabled],
.c0.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-success[disabled]:hover,
.c0.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c0.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c0.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c0.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c0.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c0.btn-warning[disabled],
.c0.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.btn-warning[disabled]:hover,
.c0.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1 .modal-backdrop {
  height: 100000%;
  z-index: 1030;
}

.c1 form {
  margin-bottom: 0;
}

.c1 .modal-dialog {
  margin-top: 55px;
}

.c1 .modal-dialog .modal-content {
  background-color: #fff;
  border-color: #a6a6a6;
}

.c1 .modal-header {
  border-bottom-color: #a6a6a6;
}

.c1 .modal-header button.close {
  color: currentColor;
}

.c1 .modal-footer {
  border-top-color: #a6a6a6;
}

.c1 .modal-title {
  font-size: 1.424rem;
}

.c1 .modal-body .form-group {
  margin-bottom: 5px;
}

<EditPatternModal
  create={false}
  id=""
  name=""
  pattern=""
  patterns={Array []}
  sampleData=""
  savePattern={[Function]}
  testPattern={[Function]}
  validPatternName={[Function]}
>
  <span>
    <Button
      bsSize="xs"
      bsStyle="info"
      onClick={[Function]}
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsSize="xs"
        bsStyle="info"
        className="c0"
        disabled={false}
        onClick={[Function]}
      >
        <button
          className="c0 btn btn-xs btn-info"
          disabled={false}
          onClick={[Function]}
          type="button"
        >
          <span>
            Edit
          </span>
        </button>
      </Button>
    </Button>
    <BootstrapModalForm
      bsSize="large"
      cancelButtonText="Cancel"
      formProps={Object {}}
      onCancel={[Function]}
      onModalClose={[Function]}
      onModalOpen={[Function]}
      onSubmitForm={[Function]}
      show={false}
      submitButtonDisabled={false}
      submitButtonText="Save"
      title="Edit Grok Pattern "
    >
      <BootstrapModalWrapper
        backdrop="static"
        bsSize="large"
        onClose={[Function]}
        onHide={[Function]}
        onOpen={[Function]}
        showModal={false}
      >
        <Modal
          backdrop="static"
          bsSize="large"
          onHide={[Function]}
          show={false}
        >
          <Modal
            animation={true}
            autoFocus={true}
            backdrop="static"
            bsClass="modal"
            bsSize="large"
            className="c1"
            dialogComponentClass={[Function]}
            enforceFocus={true}
            keyboard={true}
            manager={
              ModalManager {
                "add": [Function],
                "containers": Array [],
                "data": Array [],
                "handleContainerOverflow": true,
                "hideSiblingNodes": true,
                "isTopModal": [Function],
                "modals": Array [],
                "remove": [Function],
              }
            }
            onHide={[Function]}
            renderBackdrop={[Function]}
            restoreFocus={true}
            show={false}
          >
            <Modal
              autoFocus={true}
              backdrop="static"
              backdropClassName="modal-backdrop"
              backdropTransition={[Function]}
              containerClassName="modal-open"
              enforceFocus={true}
              keyboard={true}
              manager={
                ModalManager {
                  "add": [Function],
                  "containers": Array [],
                  "data": Array [],
                  "handleContainerOverflow": true,
                  "hideSiblingNodes": true,
                  "isTopModal": [Function],
                  "modals": Array [],
                  "remove": [Function],
                }
              }
              onEntering={[Function]}
              onExited={[Function]}
              onHide={[Function]}
              onMouseUp={[Function]}
              renderBackdrop={[Function]}
              restoreFocus={true}
              show={false}
              transition={[Function]}
            />
          </Modal>
        </Modal>
      </BootstrapModalWrapper>
    </BootstrapModalForm>
  </span>
</EditPatternModal>
`;
