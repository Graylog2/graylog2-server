// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<GrokPatternInput /> should render grok pattern input with patterns 1`] = `
.c4.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c4.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c4.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c4.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c4.btn-danger[disabled],
.c4.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c4.btn-danger[disabled]:hover,
.c4.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c4.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c4.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c4.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c4.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c4.btn-default[disabled],
.c4.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c4.btn-default[disabled]:hover,
.c4.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c4.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c4.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c4.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c4.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c4.btn-info[disabled],
.c4.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c4.btn-info[disabled]:hover,
.c4.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c4.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c4.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c4.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c4.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c4.btn-link[disabled],
.c4.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c4.btn-link[disabled]:hover,
.c4.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c4.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c4.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c4.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c4.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c4.btn-primary[disabled],
.c4.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c4.btn-primary[disabled]:hover,
.c4.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c4.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c4.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c4.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c4.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c4.btn-success[disabled],
.c4.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c4.btn-success[disabled]:hover,
.c4.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c4.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c4.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c4.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c4.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c4.btn-warning[disabled],
.c4.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c4.btn-warning[disabled]:hover,
.c4.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c1 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #cdcdcd;
}

.c1::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c1::-moz-placeholder {
  color: #9b9b9b;
}

.c1:-ms-input-placeholder {
  color: #9b9b9b;
}

.c1::placeholder {
  color: #9b9b9b;
}

.c1:focus {
  border-color: #6386c9;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(99,134,201,0.4);
}

.c1[disabled],
.c1[readonly],
fieldset[disabled] .c1 {
  background-color: #cdcdcd;
}

.c1 ~ .form-control-feedback.glyphicon {
  display: none;
}

.c2 {
  display: block;
  margin-top: 5px;
  margin-bottom: 10px;
  color: #838383;
}

.c3 {
  background-color: #fff;
  border-color: #cdcdcd;
}

.c3 .list-group-item-heading {
  font-weight: bold;
}

.c3.disabled,
.c3.disabled:hover,
.c3.disabled:focus {
  color: #9b9b9b;
  background-color: #e6e6e6;
}

.c3.disabled .list-group-item-heading,
.c3.disabled:hover .list-group-item-heading,
.c3.disabled:focus .list-group-item-heading {
  color: inherit;
  font-weight: bold;
}

.c3.disabled .list-group-item-text,
.c3.disabled:hover .list-group-item-text,
.c3.disabled:focus .list-group-item-text {
  color: #9b9b9b;
}

.c3.active,
.c3.active:hover,
.c3.active:focus {
  color: #ffffff;
  background-color: #8f699d;
  border-color: #8f699d;
  z-index: auto;
}

.c3.active .list-group-item-heading,
.c3.active:hover .list-group-item-heading,
.c3.active:focus .list-group-item-heading,
.c3.active .list-group-item-heading > small,
.c3.active:hover .list-group-item-heading > small,
.c3.active:focus .list-group-item-heading > small,
.c3.active .list-group-item-heading > .small,
.c3.active:hover .list-group-item-heading > .small,
.c3.active:focus .list-group-item-heading > .small {
  color: inherit;
  font-weight: bold;
}

.c3.active .list-group-item-text,
.c3.active:hover .list-group-item-text,
.c3.active:focus .list-group-item-text {
  color: #8f699d;
}

a.c3,
button.c3 {
  color: #702785;
}

a.c3 .list-group-item-heading,
button.c3 .list-group-item-heading {
  color: #383838;
  font-weight: bold;
}

a.c3:hover:not(.disabled),
button.c3:hover:not(.disabled),
a.c3:focus:not(.disabled),
button.c3:focus:not(.disabled) {
  background-color: #6a6a6a;
  color: #fff;
}

a.c3:hover:not(.disabled).active,
button.c3:hover:not(.disabled).active,
a.c3:focus:not(.disabled).active,
button.c3:focus:not(.disabled).active {
  color: #fff;
  border-color: #702785;
  background-color: #702785;
}

a.c3:hover:not(.disabled) .list-group-item-heading,
button.c3:hover:not(.disabled) .list-group-item-heading,
a.c3:focus:not(.disabled) .list-group-item-heading,
button.c3:focus:not(.disabled) .list-group-item-heading {
  color: #fff;
}

<GrokPatternInput
  className=""
  onPatternChange={[Function]}
  pattern=""
  patterns={
    Array [
      Object {
        "name": "COMMONMAC",
        "pattern": "(?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})",
      },
      Object {
        "name": "DATA",
        "pattern": ".*?",
      },
      Object {
        "name": "DATE",
        "pattern": "%{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR}",
      },
    ]
  }
>
  <Row
    bsClass="row"
    className=""
    componentClass="div"
  >
    <div
      className="row"
    >
      <Col
        bsClass="col"
        componentClass="div"
        sm={8}
      >
        <div
          className="col-sm-8"
        >
          <Input
            addonAfter={null}
            bsStyle={null}
            buttonAfter={null}
            help="The pattern which will match the log line e.g: '%{IP:client}' or '.*?'"
            id="pattern-input"
            label="Pattern"
            onChange={[Function]}
            placeholder=""
            required={true}
            rows={9}
            type="textarea"
            value=""
          >
            <Component
              controlId="pattern-input"
              validationState={null}
            >
              <FormGroup__StyledFormGroup
                controlId="pattern-input"
                validationState={null}
              >
                <StyledComponent
                  controlId="pattern-input"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                        "isStatic": false,
                        "lastClassName": "ekazNr",
                        "rules": Array [
                          [Function],
                          ";",
                        ],
                      },
                      "displayName": "FormGroup__StyledFormGroup",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  validationState={null}
                >
                  <FormGroup
                    bsClass="form-group"
                    className=""
                    controlId="pattern-input"
                    validationState={null}
                  >
                    <div
                      className="form-group"
                    >
                      <ControlLabel>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "ControlLabel-sc-1edmum5-0",
                                "isStatic": false,
                                "lastClassName": "c0",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "ControlLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "ControlLabel-sc-1edmum5-0",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <ControlLabel
                            bsClass="control-label"
                            className="c0"
                            srOnly={false}
                          >
                            <label
                              className="c0 control-label"
                              htmlFor="pattern-input"
                            >
                              Pattern
                            </label>
                          </ControlLabel>
                        </StyledComponent>
                      </ControlLabel>
                      <InputWrapper>
                        <span>
                          <FormControl
                            componentClass="textarea"
                            inputRef={[Function]}
                            label="Pattern"
                            name="pattern-input"
                            onChange={[Function]}
                            placeholder=""
                            required={true}
                            rows={9}
                            type="textarea"
                            value=""
                          >
                            <StyledComponent
                              componentClass="textarea"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "Feedback": [Function],
                                  "SIZES": Array [
                                    "small",
                                    "large",
                                  ],
                                  "Static": [Function],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "FormControl-sc-1amoaox-0",
                                    "isStatic": false,
                                    "lastClassName": "c1",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "FormControl",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "FormControl-sc-1amoaox-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              inputRef={[Function]}
                              label="Pattern"
                              name="pattern-input"
                              onChange={[Function]}
                              placeholder=""
                              required={true}
                              rows={9}
                              type="textarea"
                              value=""
                            >
                              <FormControl
                                bsClass="form-control"
                                className="c1"
                                componentClass="textarea"
                                inputRef={[Function]}
                                label="Pattern"
                                name="pattern-input"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                rows={9}
                                type="textarea"
                                value=""
                              >
                                <textarea
                                  className="c1 form-control"
                                  id="pattern-input"
                                  label="Pattern"
                                  name="pattern-input"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  rows={9}
                                  type="textarea"
                                  value=""
                                />
                              </FormControl>
                            </StyledComponent>
                          </FormControl>
                          <HelpBlock>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "HelpBlock-i8is92-0",
                                    "isStatic": false,
                                    "lastClassName": "c2",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "HelpBlock",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "HelpBlock-i8is92-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <HelpBlock
                                bsClass="help-block"
                                className="c2"
                              >
                                <span
                                  className="c2 help-block"
                                >
                                  The pattern which will match the log line e.g: '%{IP:client}' or '.*?'
                                </span>
                              </HelpBlock>
                            </StyledComponent>
                          </HelpBlock>
                        </span>
                      </InputWrapper>
                    </div>
                  </FormGroup>
                </StyledComponent>
              </FormGroup__StyledFormGroup>
            </Component>
          </Input>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        sm={4}
      >
        <div
          className="col-sm-4"
        >
          <GrokPatternFilter
            addToPattern={[Function]}
            patterns={
              Array [
                Object {
                  "name": "COMMONMAC",
                  "pattern": "(?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})",
                },
                Object {
                  "name": "DATA",
                  "pattern": ".*?",
                },
                Object {
                  "name": "DATE",
                  "pattern": "%{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR}",
                },
              ]
            }
          >
            <Input
              addonAfter={null}
              autoComplete="off"
              bsStyle={null}
              buttonAfter={null}
              formGroupClassName="filterFormGroup"
              help=""
              id="pattern-selector"
              label="Filter pattern"
              onChange={[Function]}
              onKeyDown={[Function]}
              placeholder=""
              type="text"
              value=""
            >
              <Component
                bsClass="filterFormGroup"
                controlId="pattern-selector"
                validationState={null}
              >
                <FormGroup__StyledFormGroup
                  bsClass="filterFormGroup"
                  controlId="pattern-selector"
                  validationState={null}
                >
                  <StyledComponent
                    bsClass="filterFormGroup"
                    controlId="pattern-selector"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "isStatic": false,
                          "lastClassName": "ekazNr",
                          "rules": Array [
                            [Function],
                            ";",
                          ],
                        },
                        "displayName": "FormGroup__StyledFormGroup",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    validationState={null}
                  >
                    <FormGroup
                      bsClass="filterFormGroup"
                      className=""
                      controlId="pattern-selector"
                      validationState={null}
                    >
                      <div
                        className="filterFormGroup"
                      >
                        <ControlLabel>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "ControlLabel-sc-1edmum5-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    [Function],
                                  ],
                                },
                                "displayName": "ControlLabel",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <ControlLabel
                              bsClass="control-label"
                              className="c0"
                              srOnly={false}
                            >
                              <label
                                className="c0 control-label"
                                htmlFor="pattern-selector"
                              >
                                Filter pattern
                              </label>
                            </ControlLabel>
                          </StyledComponent>
                        </ControlLabel>
                        <InputWrapper>
                          <span>
                            <FormControl
                              autoComplete="off"
                              componentClass="input"
                              inputRef={[Function]}
                              label="Filter pattern"
                              name="pattern-selector"
                              onChange={[Function]}
                              onKeyDown={[Function]}
                              placeholder=""
                              type="text"
                              value=""
                            >
                              <StyledComponent
                                autoComplete="off"
                                componentClass="input"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Feedback": [Function],
                                    "SIZES": Array [
                                      "small",
                                      "large",
                                    ],
                                    "Static": [Function],
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "FormControl-sc-1amoaox-0",
                                      "isStatic": false,
                                      "lastClassName": "c1",
                                      "rules": Array [
                                        [Function],
                                      ],
                                    },
                                    "displayName": "FormControl",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "FormControl-sc-1amoaox-0",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                inputRef={[Function]}
                                label="Filter pattern"
                                name="pattern-selector"
                                onChange={[Function]}
                                onKeyDown={[Function]}
                                placeholder=""
                                type="text"
                                value=""
                              >
                                <FormControl
                                  autoComplete="off"
                                  bsClass="form-control"
                                  className="c1"
                                  componentClass="input"
                                  inputRef={[Function]}
                                  label="Filter pattern"
                                  name="pattern-selector"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  placeholder=""
                                  type="text"
                                  value=""
                                >
                                  <input
                                    autoComplete="off"
                                    className="c1 form-control"
                                    id="pattern-selector"
                                    label="Filter pattern"
                                    name="pattern-selector"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder=""
                                    type="text"
                                    value=""
                                  />
                                </FormControl>
                              </StyledComponent>
                            </FormControl>
                          </span>
                        </InputWrapper>
                      </div>
                    </FormGroup>
                  </StyledComponent>
                </FormGroup__StyledFormGroup>
              </Component>
            </Input>
            <ListGroup
              bsClass="resultList"
            >
              <ListGroup
                bsClass="resultList"
              >
                <div
                  className="resultList"
                >
                  <ForwardRef
                    header="COMMONMAC"
                    id="list-item-0"
                    key="COMMONMAC"
                    onKeyDown={[Function]}
                  >
                    <ListGroupItem__StyledListGroupItem
                      header="COMMONMAC"
                      id="list-item-0"
                      onKeyDown={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "STYLES": Array [
                              "success",
                              "warning",
                              "danger",
                              "info",
                            ],
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ListGroupItem__StyledListGroupItem-sc-1ky0joo-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "ListGroupItem__StyledListGroupItem",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ListGroupItem__StyledListGroupItem-sc-1ky0joo-0",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        header="COMMONMAC"
                        id="list-item-0"
                        onKeyDown={[Function]}
                      >
                        <ListGroupItem
                          bsClass="list-group-item"
                          className="c3"
                          header="COMMONMAC"
                          id="list-item-0"
                          listItem={false}
                          onKeyDown={[Function]}
                        >
                          <span
                            className="c3 list-group-item"
                            id="list-item-0"
                            onKeyDown={[Function]}
                          >
                            <h4
                              className="list-group-item-heading"
                            >
                              COMMONMAC
                            </h4>
                            <p
                              className="list-group-item-text"
                            >
                              <span
                                className="patternDisplay"
                              >
                                (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})
                              </span>
                              <span
                                className="addButton"
                              >
                                <ForwardRef
                                  bsSize="xsmall"
                                  bsStyle="primary"
                                  onClick={[Function]}
                                >
                                  <Button__StyledButton
                                    bsSize="xsmall"
                                    bsStyle="primary"
                                    onClick={[Function]}
                                  >
                                    <StyledComponent
                                      bsSize="xsmall"
                                      bsStyle="primary"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                            "xsmall",
                                          ],
                                          "STYLES": Array [
                                            "success",
                                            "warning",
                                            "danger",
                                            "info",
                                            "default",
                                            "primary",
                                            "link",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Button__StyledButton-c9cbmb-0",
                                            "isStatic": false,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Button__StyledButton",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="xsmall"
                                        bsStyle="primary"
                                        className="c4"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c4 btn btn-xs btn-primary"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Add
                                        </button>
                                      </Button>
                                    </StyledComponent>
                                  </Button__StyledButton>
                                </ForwardRef>
                              </span>
                            </p>
                          </span>
                        </ListGroupItem>
                      </StyledComponent>
                    </ListGroupItem__StyledListGroupItem>
                  </ForwardRef>
                  <ForwardRef
                    header="DATA"
                    id="list-item-1"
                    key="DATA"
                    onKeyDown={[Function]}
                  >
                    <ListGroupItem__StyledListGroupItem
                      header="DATA"
                      id="list-item-1"
                      onKeyDown={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "STYLES": Array [
                              "success",
                              "warning",
                              "danger",
                              "info",
                            ],
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ListGroupItem__StyledListGroupItem-sc-1ky0joo-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "ListGroupItem__StyledListGroupItem",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ListGroupItem__StyledListGroupItem-sc-1ky0joo-0",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        header="DATA"
                        id="list-item-1"
                        onKeyDown={[Function]}
                      >
                        <ListGroupItem
                          bsClass="list-group-item"
                          className="c3"
                          header="DATA"
                          id="list-item-1"
                          listItem={false}
                          onKeyDown={[Function]}
                        >
                          <span
                            className="c3 list-group-item"
                            id="list-item-1"
                            onKeyDown={[Function]}
                          >
                            <h4
                              className="list-group-item-heading"
                            >
                              DATA
                            </h4>
                            <p
                              className="list-group-item-text"
                            >
                              <span
                                className="patternDisplay"
                              >
                                .*?
                              </span>
                              <span
                                className="addButton"
                              >
                                <ForwardRef
                                  bsSize="xsmall"
                                  bsStyle="primary"
                                  onClick={[Function]}
                                >
                                  <Button__StyledButton
                                    bsSize="xsmall"
                                    bsStyle="primary"
                                    onClick={[Function]}
                                  >
                                    <StyledComponent
                                      bsSize="xsmall"
                                      bsStyle="primary"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                            "xsmall",
                                          ],
                                          "STYLES": Array [
                                            "success",
                                            "warning",
                                            "danger",
                                            "info",
                                            "default",
                                            "primary",
                                            "link",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Button__StyledButton-c9cbmb-0",
                                            "isStatic": false,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Button__StyledButton",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="xsmall"
                                        bsStyle="primary"
                                        className="c4"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c4 btn btn-xs btn-primary"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Add
                                        </button>
                                      </Button>
                                    </StyledComponent>
                                  </Button__StyledButton>
                                </ForwardRef>
                              </span>
                            </p>
                          </span>
                        </ListGroupItem>
                      </StyledComponent>
                    </ListGroupItem__StyledListGroupItem>
                  </ForwardRef>
                  <ForwardRef
                    header="DATE"
                    id="list-item-2"
                    key="DATE"
                    onKeyDown={[Function]}
                  >
                    <ListGroupItem__StyledListGroupItem
                      header="DATE"
                      id="list-item-2"
                      onKeyDown={[Function]}
                    >
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "STYLES": Array [
                              "success",
                              "warning",
                              "danger",
                              "info",
                            ],
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "ListGroupItem__StyledListGroupItem-sc-1ky0joo-0",
                              "isStatic": false,
                              "lastClassName": "c3",
                              "rules": Array [
                                [Function],
                              ],
                            },
                            "displayName": "ListGroupItem__StyledListGroupItem",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "ListGroupItem__StyledListGroupItem-sc-1ky0joo-0",
                            "target": [Function],
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        header="DATE"
                        id="list-item-2"
                        onKeyDown={[Function]}
                      >
                        <ListGroupItem
                          bsClass="list-group-item"
                          className="c3"
                          header="DATE"
                          id="list-item-2"
                          listItem={false}
                          onKeyDown={[Function]}
                        >
                          <span
                            className="c3 list-group-item"
                            id="list-item-2"
                            onKeyDown={[Function]}
                          >
                            <h4
                              className="list-group-item-heading"
                            >
                              DATE
                            </h4>
                            <p
                              className="list-group-item-text"
                            >
                              <span
                                className="patternDisplay"
                              >
                                %{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR}
                              </span>
                              <span
                                className="addButton"
                              >
                                <ForwardRef
                                  bsSize="xsmall"
                                  bsStyle="primary"
                                  onClick={[Function]}
                                >
                                  <Button__StyledButton
                                    bsSize="xsmall"
                                    bsStyle="primary"
                                    onClick={[Function]}
                                  >
                                    <StyledComponent
                                      bsSize="xsmall"
                                      bsStyle="primary"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "SIZES": Array [
                                            "large",
                                            "small",
                                            "xsmall",
                                          ],
                                          "STYLES": Array [
                                            "success",
                                            "warning",
                                            "danger",
                                            "info",
                                            "default",
                                            "primary",
                                            "link",
                                          ],
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "Button__StyledButton-c9cbmb-0",
                                            "isStatic": false,
                                            "lastClassName": "c4",
                                            "rules": Array [
                                              [Function],
                                            ],
                                          },
                                          "displayName": "Button__StyledButton",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "Button__StyledButton-c9cbmb-0",
                                          "target": [Function],
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onClick={[Function]}
                                    >
                                      <Button
                                        active={false}
                                        block={false}
                                        bsClass="btn"
                                        bsSize="xsmall"
                                        bsStyle="primary"
                                        className="c4"
                                        disabled={false}
                                        onClick={[Function]}
                                      >
                                        <button
                                          className="c4 btn btn-xs btn-primary"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          Add
                                        </button>
                                      </Button>
                                    </StyledComponent>
                                  </Button__StyledButton>
                                </ForwardRef>
                              </span>
                            </p>
                          </span>
                        </ListGroupItem>
                      </StyledComponent>
                    </ListGroupItem__StyledListGroupItem>
                  </ForwardRef>
                </div>
              </ListGroup>
            </ListGroup>
          </GrokPatternFilter>
        </div>
      </Col>
    </div>
  </Row>
</GrokPatternInput>
`;

exports[`<GrokPatternInput /> should render grok pattern input without patterns 1`] = `
.c0 {
  color: #1f1f1f;
  font-weight: bold;
  margin-bottom: 5px;
  display: inline-block;
}

.c1 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #cdcdcd;
}

.c1::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c1::-moz-placeholder {
  color: #9b9b9b;
}

.c1:-ms-input-placeholder {
  color: #9b9b9b;
}

.c1::placeholder {
  color: #9b9b9b;
}

.c1:focus {
  border-color: #6386c9;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(99,134,201,0.4);
}

.c1[disabled],
.c1[readonly],
fieldset[disabled] .c1 {
  background-color: #cdcdcd;
}

.c1 ~ .form-control-feedback.glyphicon {
  display: none;
}

.c2 {
  display: block;
  margin-top: 5px;
  margin-bottom: 10px;
  color: #838383;
}

<GrokPatternInput
  className=""
  onPatternChange={[Function]}
  pattern=""
  patterns={Array []}
>
  <Row
    bsClass="row"
    className=""
    componentClass="div"
  >
    <div
      className="row"
    >
      <Col
        bsClass="col"
        componentClass="div"
        sm={8}
      >
        <div
          className="col-sm-8"
        >
          <Input
            addonAfter={null}
            bsStyle={null}
            buttonAfter={null}
            help="The pattern which will match the log line e.g: '%{IP:client}' or '.*?'"
            id="pattern-input"
            label="Pattern"
            onChange={[Function]}
            placeholder=""
            required={true}
            rows={9}
            type="textarea"
            value=""
          >
            <Component
              controlId="pattern-input"
              validationState={null}
            >
              <FormGroup__StyledFormGroup
                controlId="pattern-input"
                validationState={null}
              >
                <StyledComponent
                  controlId="pattern-input"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "SIZES": Array [
                        "large",
                        "small",
                      ],
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                        "isStatic": false,
                        "lastClassName": "ekazNr",
                        "rules": Array [
                          [Function],
                          ";",
                        ],
                      },
                      "displayName": "FormGroup__StyledFormGroup",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                      "target": [Function],
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  validationState={null}
                >
                  <FormGroup
                    bsClass="form-group"
                    className=""
                    controlId="pattern-input"
                    validationState={null}
                  >
                    <div
                      className="form-group"
                    >
                      <ControlLabel>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "ControlLabel-sc-1edmum5-0",
                                "isStatic": false,
                                "lastClassName": "c0",
                                "rules": Array [
                                  [Function],
                                ],
                              },
                              "displayName": "ControlLabel",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "ControlLabel-sc-1edmum5-0",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <ControlLabel
                            bsClass="control-label"
                            className="c0"
                            srOnly={false}
                          >
                            <label
                              className="c0 control-label"
                              htmlFor="pattern-input"
                            >
                              Pattern
                            </label>
                          </ControlLabel>
                        </StyledComponent>
                      </ControlLabel>
                      <InputWrapper>
                        <span>
                          <FormControl
                            componentClass="textarea"
                            inputRef={[Function]}
                            label="Pattern"
                            name="pattern-input"
                            onChange={[Function]}
                            placeholder=""
                            required={true}
                            rows={9}
                            type="textarea"
                            value=""
                          >
                            <StyledComponent
                              componentClass="textarea"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "Feedback": [Function],
                                  "SIZES": Array [
                                    "small",
                                    "large",
                                  ],
                                  "Static": [Function],
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "FormControl-sc-1amoaox-0",
                                    "isStatic": false,
                                    "lastClassName": "c1",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "FormControl",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "FormControl-sc-1amoaox-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              inputRef={[Function]}
                              label="Pattern"
                              name="pattern-input"
                              onChange={[Function]}
                              placeholder=""
                              required={true}
                              rows={9}
                              type="textarea"
                              value=""
                            >
                              <FormControl
                                bsClass="form-control"
                                className="c1"
                                componentClass="textarea"
                                inputRef={[Function]}
                                label="Pattern"
                                name="pattern-input"
                                onChange={[Function]}
                                placeholder=""
                                required={true}
                                rows={9}
                                type="textarea"
                                value=""
                              >
                                <textarea
                                  className="c1 form-control"
                                  id="pattern-input"
                                  label="Pattern"
                                  name="pattern-input"
                                  onChange={[Function]}
                                  placeholder=""
                                  required={true}
                                  rows={9}
                                  type="textarea"
                                  value=""
                                />
                              </FormControl>
                            </StyledComponent>
                          </FormControl>
                          <HelpBlock>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "HelpBlock-i8is92-0",
                                    "isStatic": false,
                                    "lastClassName": "c2",
                                    "rules": Array [
                                      [Function],
                                    ],
                                  },
                                  "displayName": "HelpBlock",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "HelpBlock-i8is92-0",
                                  "target": [Function],
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <HelpBlock
                                bsClass="help-block"
                                className="c2"
                              >
                                <span
                                  className="c2 help-block"
                                >
                                  The pattern which will match the log line e.g: '%{IP:client}' or '.*?'
                                </span>
                              </HelpBlock>
                            </StyledComponent>
                          </HelpBlock>
                        </span>
                      </InputWrapper>
                    </div>
                  </FormGroup>
                </StyledComponent>
              </FormGroup__StyledFormGroup>
            </Component>
          </Input>
        </div>
      </Col>
      <Col
        bsClass="col"
        componentClass="div"
        sm={4}
      >
        <div
          className="col-sm-4"
        >
          <GrokPatternFilter
            addToPattern={[Function]}
            patterns={Array []}
          >
            <Input
              addonAfter={null}
              autoComplete="off"
              bsStyle={null}
              buttonAfter={null}
              formGroupClassName="filterFormGroup"
              help=""
              id="pattern-selector"
              label="Filter pattern"
              onChange={[Function]}
              onKeyDown={[Function]}
              placeholder=""
              type="text"
              value=""
            >
              <Component
                bsClass="filterFormGroup"
                controlId="pattern-selector"
                validationState={null}
              >
                <FormGroup__StyledFormGroup
                  bsClass="filterFormGroup"
                  controlId="pattern-selector"
                  validationState={null}
                >
                  <StyledComponent
                    bsClass="filterFormGroup"
                    controlId="pattern-selector"
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "SIZES": Array [
                          "large",
                          "small",
                        ],
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                          "isStatic": false,
                          "lastClassName": "ekazNr",
                          "rules": Array [
                            [Function],
                            ";",
                          ],
                        },
                        "displayName": "FormGroup__StyledFormGroup",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "FormGroup__StyledFormGroup-sc-1wv4cm9-0",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    validationState={null}
                  >
                    <FormGroup
                      bsClass="filterFormGroup"
                      className=""
                      controlId="pattern-selector"
                      validationState={null}
                    >
                      <div
                        className="filterFormGroup"
                      >
                        <ControlLabel>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "ControlLabel-sc-1edmum5-0",
                                  "isStatic": false,
                                  "lastClassName": "c0",
                                  "rules": Array [
                                    [Function],
                                  ],
                                },
                                "displayName": "ControlLabel",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "ControlLabel-sc-1edmum5-0",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <ControlLabel
                              bsClass="control-label"
                              className="c0"
                              srOnly={false}
                            >
                              <label
                                className="c0 control-label"
                                htmlFor="pattern-selector"
                              >
                                Filter pattern
                              </label>
                            </ControlLabel>
                          </StyledComponent>
                        </ControlLabel>
                        <InputWrapper>
                          <span>
                            <FormControl
                              autoComplete="off"
                              componentClass="input"
                              inputRef={[Function]}
                              label="Filter pattern"
                              name="pattern-selector"
                              onChange={[Function]}
                              onKeyDown={[Function]}
                              placeholder=""
                              type="text"
                              value=""
                            >
                              <StyledComponent
                                autoComplete="off"
                                componentClass="input"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Feedback": [Function],
                                    "SIZES": Array [
                                      "small",
                                      "large",
                                    ],
                                    "Static": [Function],
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "FormControl-sc-1amoaox-0",
                                      "isStatic": false,
                                      "lastClassName": "c1",
                                      "rules": Array [
                                        [Function],
                                      ],
                                    },
                                    "displayName": "FormControl",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "FormControl-sc-1amoaox-0",
                                    "target": [Function],
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                inputRef={[Function]}
                                label="Filter pattern"
                                name="pattern-selector"
                                onChange={[Function]}
                                onKeyDown={[Function]}
                                placeholder=""
                                type="text"
                                value=""
                              >
                                <FormControl
                                  autoComplete="off"
                                  bsClass="form-control"
                                  className="c1"
                                  componentClass="input"
                                  inputRef={[Function]}
                                  label="Filter pattern"
                                  name="pattern-selector"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  placeholder=""
                                  type="text"
                                  value=""
                                >
                                  <input
                                    autoComplete="off"
                                    className="c1 form-control"
                                    id="pattern-selector"
                                    label="Filter pattern"
                                    name="pattern-selector"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder=""
                                    type="text"
                                    value=""
                                  />
                                </FormControl>
                              </StyledComponent>
                            </FormControl>
                          </span>
                        </InputWrapper>
                      </div>
                    </FormGroup>
                  </StyledComponent>
                </FormGroup__StyledFormGroup>
              </Component>
            </Input>
            <ListGroup
              bsClass="resultList"
            >
              <ListGroup
                bsClass="resultList"
              >
                <ul
                  className="resultList"
                />
              </ListGroup>
            </ListGroup>
          </GrokPatternFilter>
        </div>
      </Col>
    </div>
  </Row>
</GrokPatternInput>
`;
