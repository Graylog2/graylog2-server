// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input renders a addon after the input if addonAfter is passed 1`] = `
.c0.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c0.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c0.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::placeholder {
  color: #9b9b9b;
}

.c0.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c0.form-control[disabled],
.c0.form-control[readonly],
fieldset[disabled] .c0.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c0.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

.c1 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

<Input
  addonAfter=".00"
  bsStyle={null}
  buttonAfter={null}
  help=""
  id="inputWithAddon"
  label=""
  placeholder=""
  type="text"
>
  <Component
    controlId="inputWithAddon"
    validationState={null}
  >
    <FormGroup__StyledFormGroup
      controlId="inputWithAddon"
      validationState={null}
    >
      <FormGroup
        bsClass="form-group"
        className=""
        controlId="inputWithAddon"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <InputWrapper>
            <span>
              <InputGroup
                bsClass="input-group"
              >
                <InputGroup
                  bsClass="input-group"
                >
                  <span
                    className="input-group"
                  >
                    <FormControl
                      componentClass="input"
                      inputRef={[Function]}
                      label=""
                      name="inputWithAddon"
                      placeholder=""
                      type="text"
                    >
                      <FormControl
                        bsClass="form-control"
                        className="c0"
                        componentClass="input"
                        inputRef={[Function]}
                        label=""
                        name="inputWithAddon"
                        placeholder=""
                        type="text"
                      >
                        <input
                          className="c0 form-control"
                          id="inputWithAddon"
                          label=""
                          name="inputWithAddon"
                          placeholder=""
                          type="text"
                        />
                      </FormControl>
                    </FormControl>
                    <Addon
                      bsClass="input-group-addon"
                    >
                      <InputGroup__StyledAddon
                        className="input-group-addon"
                      >
                        <StyledBootstrapInputAddon
                          className="c1 input-group-addon"
                        >
                          <InputGroupAddon
                            bsClass="InputGroup__StyledAddon-sc-1a8jz8l-0 c1 input-group-addon"
                          >
                            <span
                              className="c1 input-group-addon"
                            >
                              .00
                            </span>
                          </InputGroupAddon>
                        </StyledBootstrapInputAddon>
                      </InputGroup__StyledAddon>
                    </Addon>
                  </span>
                </InputGroup>
              </InputGroup>
            </span>
          </InputWrapper>
        </div>
      </FormGroup>
    </FormGroup__StyledFormGroup>
  </Component>
</Input>
`;

exports[`Input renders a button after the input if buttonAfter is passed 1`] = `
.c1.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c1.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c1.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c1.btn-danger[disabled],
.c1.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-danger[disabled]:hover,
.c1.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c1.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c1.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c1.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c1.btn-default[disabled],
.c1.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-default[disabled]:hover,
.c1.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c1.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c1.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c1.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c1.btn-info[disabled],
.c1.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-info[disabled]:hover,
.c1.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c1.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c1.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c1.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c1.btn-link[disabled],
.c1.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-link[disabled]:hover,
.c1.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c1.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c1.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c1.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c1.btn-primary[disabled],
.c1.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-primary[disabled]:hover,
.c1.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c1.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c1.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c1.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c1.btn-success[disabled],
.c1.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-success[disabled]:hover,
.c1.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c1.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c1.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c1.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c1.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c1.btn-warning[disabled],
.c1.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c1.btn-warning[disabled]:hover,
.c1.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c0.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c0.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c0.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::placeholder {
  color: #9b9b9b;
}

.c0.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c0.form-control[disabled],
.c0.form-control[readonly],
fieldset[disabled] .c0.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c0.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

<Input
  addonAfter={null}
  bsStyle={null}
  buttonAfter={<Button />}
  help=""
  id="inputWithButton"
  label=""
  placeholder=""
  type="text"
>
  <Component
    controlId="inputWithButton"
    validationState={null}
  >
    <FormGroup__StyledFormGroup
      controlId="inputWithButton"
      validationState={null}
    >
      <FormGroup
        bsClass="form-group"
        className=""
        controlId="inputWithButton"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <InputWrapper>
            <span>
              <InputGroup
                bsClass="input-group"
              >
                <InputGroup
                  bsClass="input-group"
                >
                  <span
                    className="input-group"
                  >
                    <FormControl
                      componentClass="input"
                      inputRef={[Function]}
                      label=""
                      name="inputWithButton"
                      placeholder=""
                      type="text"
                    >
                      <FormControl
                        bsClass="form-control"
                        className="c0"
                        componentClass="input"
                        inputRef={[Function]}
                        label=""
                        name="inputWithButton"
                        placeholder=""
                        type="text"
                      >
                        <input
                          className="c0 form-control"
                          id="inputWithButton"
                          label=""
                          name="inputWithButton"
                          placeholder=""
                          type="text"
                        />
                      </FormControl>
                    </FormControl>
                    <Button
                      bsClass="input-group-btn"
                    >
                      <InputGroupButton
                        bsClass="input-group-btn"
                      >
                        <span
                          className="input-group-btn"
                        >
                          <Button>
                            <Button
                              active={false}
                              block={false}
                              bsClass="btn"
                              bsStyle="default"
                              className="c1"
                              disabled={false}
                            >
                              <button
                                className="c1 btn btn-default"
                                disabled={false}
                                type="button"
                              />
                            </Button>
                          </Button>
                        </span>
                      </InputGroupButton>
                    </Button>
                  </span>
                </InputGroup>
              </InputGroup>
            </span>
          </InputWrapper>
        </div>
      </FormGroup>
    </FormGroup__StyledFormGroup>
  </Component>
</Input>
`;

exports[`Input renders a checkbox addon after the input if addonAfter is passed 1`] = `
.c0.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c0.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c0.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::placeholder {
  color: #9b9b9b;
}

.c0.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c0.form-control[disabled],
.c0.form-control[readonly],
fieldset[disabled] .c0.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c0.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

.c1 {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

<Input
  addonAfter={
    <input
      aria-label="..."
      id="addonCheckbox"
      type="checkbox"
    />
  }
  bsStyle={null}
  buttonAfter={null}
  help=""
  id="inputWithCheckboxAddon"
  label=""
  placeholder=""
  type="text"
>
  <Component
    controlId="inputWithCheckboxAddon"
    validationState={null}
  >
    <FormGroup__StyledFormGroup
      controlId="inputWithCheckboxAddon"
      validationState={null}
    >
      <FormGroup
        bsClass="form-group"
        className=""
        controlId="inputWithCheckboxAddon"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <InputWrapper>
            <span>
              <InputGroup
                bsClass="input-group"
              >
                <InputGroup
                  bsClass="input-group"
                >
                  <span
                    className="input-group"
                  >
                    <FormControl
                      componentClass="input"
                      inputRef={[Function]}
                      label=""
                      name="inputWithCheckboxAddon"
                      placeholder=""
                      type="text"
                    >
                      <FormControl
                        bsClass="form-control"
                        className="c0"
                        componentClass="input"
                        inputRef={[Function]}
                        label=""
                        name="inputWithCheckboxAddon"
                        placeholder=""
                        type="text"
                      >
                        <input
                          className="c0 form-control"
                          id="inputWithCheckboxAddon"
                          label=""
                          name="inputWithCheckboxAddon"
                          placeholder=""
                          type="text"
                        />
                      </FormControl>
                    </FormControl>
                    <Addon
                      bsClass="input-group-addon"
                    >
                      <InputGroup__StyledAddon
                        className="input-group-addon"
                      >
                        <StyledBootstrapInputAddon
                          className="c1 input-group-addon"
                        >
                          <InputGroupAddon
                            bsClass="InputGroup__StyledAddon-sc-1a8jz8l-0 c1 input-group-addon"
                          >
                            <span
                              className="c1 input-group-addon"
                            >
                              <input
                                aria-label="..."
                                id="addonCheckbox"
                                type="checkbox"
                              />
                            </span>
                          </InputGroupAddon>
                        </StyledBootstrapInputAddon>
                      </InputGroup__StyledAddon>
                    </Addon>
                  </span>
                </InputGroup>
              </InputGroup>
            </span>
          </InputWrapper>
        </div>
      </FormGroup>
    </FormGroup__StyledFormGroup>
  </Component>
</Input>
`;

exports[`Input renders input w/ \`name\` attribute w/ setting prop 1`] = `
.c0.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c0.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c0.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::placeholder {
  color: #9b9b9b;
}

.c0.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c0.form-control[disabled],
.c0.form-control[readonly],
fieldset[disabled] .c0.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c0.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

<Input
  addonAfter={null}
  bsStyle={null}
  buttonAfter={null}
  help=""
  id="inputWithoutNameProp"
  label=""
  name="inputWithNameProp"
  placeholder=""
  type="text"
>
  <Component
    controlId="inputWithoutNameProp"
    validationState={null}
  >
    <FormGroup__StyledFormGroup
      controlId="inputWithoutNameProp"
      validationState={null}
    >
      <FormGroup
        bsClass="form-group"
        className=""
        controlId="inputWithoutNameProp"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <InputWrapper>
            <span>
              <FormControl
                componentClass="input"
                inputRef={[Function]}
                label=""
                name="inputWithNameProp"
                placeholder=""
                type="text"
              >
                <FormControl
                  bsClass="form-control"
                  className="c0"
                  componentClass="input"
                  inputRef={[Function]}
                  label=""
                  name="inputWithNameProp"
                  placeholder=""
                  type="text"
                >
                  <input
                    className="c0 form-control"
                    id="inputWithoutNameProp"
                    label=""
                    name="inputWithNameProp"
                    placeholder=""
                    type="text"
                  />
                </FormControl>
              </FormControl>
            </span>
          </InputWrapper>
        </div>
      </FormGroup>
    </FormGroup__StyledFormGroup>
  </Component>
</Input>
`;

exports[`Input renders input w/ \`name\` attribute w/o setting prop 1`] = `
.c0.form-control {
  color: #1f1f1f;
  background-color: #fff;
  border-color: #a6a6a6;
}

.c0.form-control::-webkit-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::-moz-placeholder {
  color: #9b9b9b;
}

.c0.form-control:-ms-input-placeholder {
  color: #9b9b9b;
}

.c0.form-control::placeholder {
  color: #9b9b9b;
}

.c0.form-control:focus {
  border-color: #7894ce;
  box-shadow: inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(120,148,206,0.4);
}

.c0.form-control[disabled],
.c0.form-control[readonly],
fieldset[disabled] .c0.form-control {
  background-color: #dddddd;
  color: #9b9b9b;
}

.c0.form-control ~ .form-control-feedback.glyphicon {
  display: none;
}

<Input
  addonAfter={null}
  bsStyle={null}
  buttonAfter={null}
  help=""
  id="inputWithoutNameProp"
  label=""
  placeholder=""
  type="text"
>
  <Component
    controlId="inputWithoutNameProp"
    validationState={null}
  >
    <FormGroup__StyledFormGroup
      controlId="inputWithoutNameProp"
      validationState={null}
    >
      <FormGroup
        bsClass="form-group"
        className=""
        controlId="inputWithoutNameProp"
        validationState={null}
      >
        <div
          className="form-group"
        >
          <InputWrapper>
            <span>
              <FormControl
                componentClass="input"
                inputRef={[Function]}
                label=""
                name="inputWithoutNameProp"
                placeholder=""
                type="text"
              >
                <FormControl
                  bsClass="form-control"
                  className="c0"
                  componentClass="input"
                  inputRef={[Function]}
                  label=""
                  name="inputWithoutNameProp"
                  placeholder=""
                  type="text"
                >
                  <input
                    className="c0 form-control"
                    id="inputWithoutNameProp"
                    label=""
                    name="inputWithoutNameProp"
                    placeholder=""
                    type="text"
                  />
                </FormControl>
              </FormControl>
            </span>
          </InputWrapper>
        </div>
      </FormGroup>
    </FormGroup__StyledFormGroup>
  </Component>
</Input>
`;
