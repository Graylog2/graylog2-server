// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataTable renders column pivot header without offset when rollup is disabled 1`] = `
.c0 {
  padding-right: 13px;
  width: 100%;
}

.c1 {
  position: relative;
  font-size: 0.889rem;
  margin-top: 15px;
  margin-bottom: 60px;
  border-collapse: collapse;
  padding-left: 13px;
  width: 100%;
  word-break: break-all;
}

.c1.table > thead > tr > th,
.c1.table > tbody > tr > th,
.c1.table > tfoot > tr > th,
.c1.table > thead > tr > td,
.c1.table > tbody > tr > td,
.c1.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c1.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c1.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c1.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c1.table .table {
  background-color: #fafafa;
}

.c1.table-bordered {
  border-color: #f0f0f0;
}

.c1.table-bordered > thead > tr > td,
.c1.table-bordered > tfoot > tr > td,
.c1.table-bordered > tbody > tr > td,
.c1.table-bordered > thead > tr > th,
.c1.table-bordered > tfoot > tr > th,
.c1.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c1.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c1.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c1.table > thead > tr > td.active,
.c1.table > tfoot > tr > td.active,
.c1.table > tbody > tr > td.active,
.c1.table > thead > tr > th.active,
.c1.table > tfoot > tr > th.active,
.c1.table > tbody > tr > th.active,
.c1.table > thead > tr.active > td,
.c1.table > tfoot > tr.active > td,
.c1.table > tbody > tr.active > td,
.c1.table > thead > tr.active > th,
.c1.table > tfoot > tr.active > th,
.c1.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c1.table-hover > tbody > tr > td.active:hover,
.c1.table-hover > tbody > tr > th.active:hover,
.c1.table-hover > tbody > tr.active:hover > td,
.c1.table-hover > tbody > tr:hover > .active,
.c1.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c1.table > thead > tr > td.success,
.c1.table > tfoot > tr > td.success,
.c1.table > tbody > tr > td.success,
.c1.table > thead > tr > th.success,
.c1.table > tfoot > tr > th.success,
.c1.table > tbody > tr > th.success,
.c1.table > thead > tr.success > td,
.c1.table > tfoot > tr.success > td,
.c1.table > tbody > tr.success > td,
.c1.table > thead > tr.success > th,
.c1.table > tfoot > tr.success > th,
.c1.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c1.table-hover > tbody > tr > td.success:hover,
.c1.table-hover > tbody > tr > th.success:hover,
.c1.table-hover > tbody > tr.success:hover > td,
.c1.table-hover > tbody > tr:hover > .success,
.c1.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c1.table > thead > tr > td.info,
.c1.table > tfoot > tr > td.info,
.c1.table > tbody > tr > td.info,
.c1.table > thead > tr > th.info,
.c1.table > tfoot > tr > th.info,
.c1.table > tbody > tr > th.info,
.c1.table > thead > tr.info > td,
.c1.table > tfoot > tr.info > td,
.c1.table > tbody > tr.info > td,
.c1.table > thead > tr.info > th,
.c1.table > tfoot > tr.info > th,
.c1.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c1.table-hover > tbody > tr > td.info:hover,
.c1.table-hover > tbody > tr > th.info:hover,
.c1.table-hover > tbody > tr.info:hover > td,
.c1.table-hover > tbody > tr:hover > .info,
.c1.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c1.table > thead > tr > td.warning,
.c1.table > tfoot > tr > td.warning,
.c1.table > tbody > tr > td.warning,
.c1.table > thead > tr > th.warning,
.c1.table > tfoot > tr > th.warning,
.c1.table > tbody > tr > th.warning,
.c1.table > thead > tr.warning > td,
.c1.table > tfoot > tr.warning > td,
.c1.table > tbody > tr.warning > td,
.c1.table > thead > tr.warning > th,
.c1.table > tfoot > tr.warning > th,
.c1.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c1.table-hover > tbody > tr > td.warning:hover,
.c1.table-hover > tbody > tr > th.warning:hover,
.c1.table-hover > tbody > tr.warning:hover > td,
.c1.table-hover > tbody > tr:hover > .warning,
.c1.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c1.table > thead > tr > td.danger,
.c1.table > tfoot > tr > td.danger,
.c1.table > tbody > tr > td.danger,
.c1.table > thead > tr > th.danger,
.c1.table > tfoot > tr > th.danger,
.c1.table > tbody > tr > th.danger,
.c1.table > thead > tr.danger > td,
.c1.table > tfoot > tr.danger > td,
.c1.table > tbody > tr.danger > td,
.c1.table > thead > tr.danger > th,
.c1.table > tfoot > tr.danger > th,
.c1.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c1.table-hover > tbody > tr > td.danger:hover,
.c1.table-hover > tbody > tr > th.danger:hover,
.c1.table-hover > tbody > tr.danger:hover > td,
.c1.table-hover > tbody > tr:hover > .danger,
.c1.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

.c1 thead > tr {
  color: #fff;
}

.c1 td,
.c1 th {
  position: relative;
  left: 13px;
}

.c1 > thead th {
  border: 0;
  font-size: 0.889rem;
  font-weight: normal;
  background-color: #1f1f1f;
  white-space: nowrap;
}

.c1 tr {
  border: 0 !important;
}

.c1 tbody.message-group {
  border-top: 0;
}

.c1 tbody.message-group-toggled {
  border-left: 7px solid #7894ce;
}

.c1 tbody.message-highlight {
  border-left: 7px solid #78c385;
}

.c1 tr.fields-row {
  cursor: pointer;
}

.c1 tr.fields-row td {
  min-width: 50px;
  padding-top: 10px;
}

.c1 tr.message-row td {
  border-top: 0;
  padding-top: 0;
  padding-bottom: 5px;
  font-family: "Roboto Mono",Menlo,Monaco,Consolas,"Courier New",monospace;
  color: #0057a8;
}

.c1 tr.message-row {
  margin-bottom: 5px;
  cursor: pointer;
}

.c1 tr.message-row .message-wrapper {
  line-height: 1.5em;
  white-space: pre-line;
  max-height: 6em;
  overflow: hidden;
}

.c1 tr.message-row .message-wrapper::after {
  content: "";
  text-align: right;
  position: absolute;
  width: 99%;
  left: 5px;
  top: 4.5em;
  height: 1.5em;
  background: linear-gradient(to bottom,rgba(255,255,255,0),rgb(255,255,255) 95%);
}

.c1 tr.message-detail-row {
  display: none;
}

.c1 tr.message-detail-row td {
  padding-top: 5px;
  border-top: 0;
}

.c1 tr.message-detail-row .row {
  margin-right: 0;
}

.c1 tr.message-detail-row div[class*="col-"] {
  padding-right: 0;
}

.c1 th i.sort-order-desc {
  position: relative;
  top: -1px;
}

.c1 th i.sort-order-item {
  margin-right: 2px;
  color: #1f1f1f;
  visibility: hidden;
}

.c1 th i.sort-order-active,
.c1 th:hover i.sort-order-item {
  color: #fff;
}

.c2 {
  color: currentColor;
  opacity: 1;
}

<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [
        Object {
          "config": Object {
            "limit": 15,
          },
          "field": "nf_proto_name",
          "type": "values",
        },
      ],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": false,
      "row_pivots": Array [],
      "series": Array [
        Object {
          "config": Object {
            "name": null,
          },
          "function": "count()",
        },
      ],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={
    Object {
      "chart": Array [
        Object {
          "key": Array [],
          "source": "leaf",
          "values": Array [
            Object {
              "key": Array [
                "TCP",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 239,
            },
            Object {
              "key": Array [
                "UDP",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 226,
            },
          ],
        },
      ],
    }
  }
  effectiveTimerange={
    Object {
      "from": "2020-01-10T13:23:42.000Z",
      "to": "2020-01-10T14:23:42.000Z",
      "type": "absolute",
    }
  }
  fields={Immutable.List []}
  height={200}
  onChange={[Function]}
  toggleEdit={[Function]}
  width={300}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [
          Object {
            "config": Object {
              "limit": 15,
            },
            "field": "nf_proto_name",
            "type": "values",
          },
        ],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": false,
        "row_pivots": Array [],
        "series": Array [
          Object {
            "config": Object {
              "name": null,
            },
            "function": "count()",
          },
        ],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={
      Object {
        "chart": Array [
          Object {
            "key": Array [],
            "source": "leaf",
            "values": Array [
              Object {
                "key": Array [
                  "TCP",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 239,
              },
              Object {
                "key": Array [
                  "UDP",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 226,
              },
            ],
          },
        ],
      }
    }
    effectiveTimerange={
      Object {
        "from": "2020-01-10T13:23:42.000Z",
        "to": "2020-01-10T14:23:42.000Z",
        "type": "absolute",
      }
    }
    fields={Immutable.List []}
    height={200}
    onChange={[Function]}
    toggleEdit={[Function]}
    width={300}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <MessagesTable>
          <MessagesTable__MessagesContainer>
            <div
              className="c0"
            >
              <MessagesTable__StyledTable
                condensed={true}
              >
                <Table
                  bordered={false}
                  bsClass="table"
                  className="Table-ztr4bi-0 c1"
                  condensed={true}
                  hover={false}
                  responsive={false}
                  striped={false}
                >
                  <table
                    className="Table-ztr4bi-0 c1 table table-condensed"
                  >
                    <thead>
                      <Headers
                        activeQuery="deadbeef-23"
                        actualColumnPivotFields={
                          Array [
                            Array [
                              "TCP",
                            ],
                            Array [
                              "UDP",
                            ],
                          ]
                        }
                        columnPivots={
                          Array [
                            Object {
                              "config": Object {
                                "limit": 15,
                              },
                              "field": "nf_proto_name",
                              "type": "values",
                            },
                          ]
                        }
                        fields={Immutable.List []}
                        rollup={false}
                        rowPivots={Array []}
                        series={
                          Array [
                            Object {
                              "config": Object {
                                "name": null,
                              },
                              "function": "count()",
                            },
                          ]
                        }
                      >
                        <tr
                          key="header-table-row-nf_proto_name"
                        >
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="nf_proto_name-TCP"
                          >
                            <Value
                              field="nf_proto_name"
                              queryId="deadbeef-23"
                              render={[Function]}
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value="TCP"
                            >
                              <ValueActions
                                element="TCP"
                                field="nf_proto_name"
                                menuContainer={<body />}
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "unknown",
                                      "properties": Immutable.Set [],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                                value="TCP"
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle="TCP"
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    TCP
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </ValueActions>
                            </Value>
                          </th>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="nf_proto_name-UDP"
                          >
                            <Value
                              field="nf_proto_name"
                              queryId="deadbeef-23"
                              render={[Function]}
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value="UDP"
                            >
                              <ValueActions
                                element="UDP"
                                field="nf_proto_name"
                                menuContainer={<body />}
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "unknown",
                                      "properties": Immutable.Set [],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                                value="UDP"
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle="UDP"
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    UDP
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </ValueActions>
                            </Value>
                          </th>
                        </tr>
                        <tr>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="TCPcount()"
                          >
                            <Field
                              disabled={false}
                              menuContainer={<body />}
                              name="count()"
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                            >
                              <FieldActions
                                disabled={false}
                                element="count()"
                                menuContainer={<body />}
                                name="count()"
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "long",
                                      "properties": Immutable.Set [
                                        "numeric",
                                        "enumerable",
                                      ],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle={
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      count()
                                    </FieldActions__FieldElement>
                                  }
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      <span
                                        className="c2 field-element"
                                        disabled={false}
                                      >
                                        count()
                                      </span>
                                    </FieldActions__FieldElement>
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </FieldActions>
                            </Field>
                          </th>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="UDPcount()"
                          >
                            <Field
                              disabled={false}
                              menuContainer={<body />}
                              name="count()"
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                            >
                              <FieldActions
                                disabled={false}
                                element="count()"
                                menuContainer={<body />}
                                name="count()"
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "long",
                                      "properties": Immutable.Set [
                                        "numeric",
                                        "enumerable",
                                      ],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle={
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      count()
                                    </FieldActions__FieldElement>
                                  }
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      <span
                                        className="c2 field-element"
                                        disabled={false}
                                      >
                                        count()
                                      </span>
                                    </FieldActions__FieldElement>
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </FieldActions>
                            </Field>
                          </th>
                        </tr>
                      </Headers>
                    </thead>
                    <DataTableEntry
                      columnPivotValues={
                        Array [
                          Array [
                            "TCP",
                          ],
                          Array [
                            "UDP",
                          ],
                        ]
                      }
                      columnPivots={
                        Array [
                          "nf_proto_name",
                        ]
                      }
                      currentView={
                        Object {
                          "activeQuery": "deadbeef-23",
                        }
                      }
                      fields={Immutable.OrderedSet []}
                      item={
                        Object {
                          "nf_proto_name": Object {
                            "TCP": Object {
                              "count()": 239,
                            },
                            "UDP": Object {
                              "count()": 226,
                            },
                          },
                        }
                      }
                      key="datatableentry-0"
                      series={
                        Array [
                          Object {
                            "config": Object {
                              "name": null,
                            },
                            "function": "count()",
                          },
                        ]
                      }
                      types={Immutable.List []}
                      valuePath={Array []}
                    >
                      <tbody
                        className="message-group"
                      >
                        <tr
                          className="fields-row"
                        >
                          <td
                            key="deadbeef-23-count()=239-0"
                          >
                            <Provider
                              value={
                                Object {
                                  "valuePath": Array [
                                    Object {
                                      "nf_proto_name": "TCP",
                                    },
                                  ],
                                }
                              }
                            >
                              <CustomHighlighting
                                field="count()"
                                value={239}
                              >
                                <Value
                                  field="count()"
                                  queryId="deadbeef-23"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={239}
                                >
                                  <ValueActions
                                    element={
                                      <TypeSpecificValue
                                        field="count()"
                                        render={[Function]}
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value={239}
                                      />
                                    }
                                    field="count()"
                                    menuContainer={<body />}
                                    queryId="deadbeef-23"
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={239}
                                  >
                                    <OverlayDropdown
                                      menuContainer={<body />}
                                      onToggle={[Function]}
                                      placement="right"
                                      show={false}
                                      toggle={
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={239}
                                        />
                                      }
                                    >
                                      <span
                                        className="dropdowntoggle"
                                        onClick={[Function]}
                                        role="presentation"
                                      >
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={239}
                                        >
                                          <Component
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="239"
                                          >
                                            <DecoratedValue
                                              field="count()"
                                              type={
                                                FieldType {
                                                  "value": Immutable.Map {
                                                    "type": "long",
                                                    "properties": Immutable.Set [
                                                      "numeric",
                                                      "enumerable",
                                                    ],
                                                    "indexNames": Immutable.Set [],
                                                  },
                                                }
                                              }
                                              value="239"
                                            >
                                              <Component
                                                field="count()"
                                                type={
                                                  FieldType {
                                                    "value": Immutable.Map {
                                                      "type": "long",
                                                      "properties": Immutable.Set [
                                                        "numeric",
                                                        "enumerable",
                                                      ],
                                                      "indexNames": Immutable.Set [],
                                                    },
                                                  }
                                                }
                                                value="239"
                                              >
                                                <Highlight
                                                  field="count()"
                                                  type={
                                                    FieldType {
                                                      "value": Immutable.Map {
                                                        "type": "long",
                                                        "properties": Immutable.Set [
                                                          "numeric",
                                                          "enumerable",
                                                        ],
                                                        "indexNames": Immutable.Set [],
                                                      },
                                                    }
                                                  }
                                                  value="239"
                                                >
                                                  <PossiblyHighlight
                                                    color="#ffec3d"
                                                    field="count()"
                                                    highlightRanges={Object {}}
                                                    value="239"
                                                  >
                                                    239
                                                  </PossiblyHighlight>
                                                </Highlight>
                                              </Component>
                                            </DecoratedValue>
                                          </Component>
                                        </TypeSpecificValue>
                                        <span
                                          className="caret"
                                        />
                                      </span>
                                    </OverlayDropdown>
                                  </ValueActions>
                                </Value>
                              </CustomHighlighting>
                            </Provider>
                          </td>
                          <td
                            key="deadbeef-23-count()=226-1"
                          >
                            <Provider
                              value={
                                Object {
                                  "valuePath": Array [
                                    Object {
                                      "nf_proto_name": "UDP",
                                    },
                                  ],
                                }
                              }
                            >
                              <CustomHighlighting
                                field="count()"
                                value={226}
                              >
                                <Value
                                  field="count()"
                                  queryId="deadbeef-23"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={226}
                                >
                                  <ValueActions
                                    element={
                                      <TypeSpecificValue
                                        field="count()"
                                        render={[Function]}
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value={226}
                                      />
                                    }
                                    field="count()"
                                    menuContainer={<body />}
                                    queryId="deadbeef-23"
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={226}
                                  >
                                    <OverlayDropdown
                                      menuContainer={<body />}
                                      onToggle={[Function]}
                                      placement="right"
                                      show={false}
                                      toggle={
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={226}
                                        />
                                      }
                                    >
                                      <span
                                        className="dropdowntoggle"
                                        onClick={[Function]}
                                        role="presentation"
                                      >
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={226}
                                        >
                                          <Component
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="226"
                                          >
                                            <DecoratedValue
                                              field="count()"
                                              type={
                                                FieldType {
                                                  "value": Immutable.Map {
                                                    "type": "long",
                                                    "properties": Immutable.Set [
                                                      "numeric",
                                                      "enumerable",
                                                    ],
                                                    "indexNames": Immutable.Set [],
                                                  },
                                                }
                                              }
                                              value="226"
                                            >
                                              <Component
                                                field="count()"
                                                type={
                                                  FieldType {
                                                    "value": Immutable.Map {
                                                      "type": "long",
                                                      "properties": Immutable.Set [
                                                        "numeric",
                                                        "enumerable",
                                                      ],
                                                      "indexNames": Immutable.Set [],
                                                    },
                                                  }
                                                }
                                                value="226"
                                              >
                                                <Highlight
                                                  field="count()"
                                                  type={
                                                    FieldType {
                                                      "value": Immutable.Map {
                                                        "type": "long",
                                                        "properties": Immutable.Set [
                                                          "numeric",
                                                          "enumerable",
                                                        ],
                                                        "indexNames": Immutable.Set [],
                                                      },
                                                    }
                                                  }
                                                  value="226"
                                                >
                                                  <PossiblyHighlight
                                                    color="#ffec3d"
                                                    field="count()"
                                                    highlightRanges={Object {}}
                                                    value="226"
                                                  >
                                                    226
                                                  </PossiblyHighlight>
                                                </Highlight>
                                              </Component>
                                            </DecoratedValue>
                                          </Component>
                                        </TypeSpecificValue>
                                        <span
                                          className="caret"
                                        />
                                      </span>
                                    </OverlayDropdown>
                                  </ValueActions>
                                </Value>
                              </CustomHighlighting>
                            </Provider>
                          </td>
                        </tr>
                      </tbody>
                    </DataTableEntry>
                  </table>
                </Table>
              </MessagesTable__StyledTable>
            </div>
          </MessagesTable__MessagesContainer>
        </MessagesTable>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;

exports[`DataTable should render with empty data 1`] = `
.c0 {
  padding-right: 13px;
  width: 100%;
}

.c1 {
  position: relative;
  font-size: 0.889rem;
  margin-top: 15px;
  margin-bottom: 60px;
  border-collapse: collapse;
  padding-left: 13px;
  width: 100%;
  word-break: break-all;
}

.c1.table > thead > tr > th,
.c1.table > tbody > tr > th,
.c1.table > tfoot > tr > th,
.c1.table > thead > tr > td,
.c1.table > tbody > tr > td,
.c1.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c1.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c1.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c1.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c1.table .table {
  background-color: #fafafa;
}

.c1.table-bordered {
  border-color: #f0f0f0;
}

.c1.table-bordered > thead > tr > td,
.c1.table-bordered > tfoot > tr > td,
.c1.table-bordered > tbody > tr > td,
.c1.table-bordered > thead > tr > th,
.c1.table-bordered > tfoot > tr > th,
.c1.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c1.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c1.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c1.table > thead > tr > td.active,
.c1.table > tfoot > tr > td.active,
.c1.table > tbody > tr > td.active,
.c1.table > thead > tr > th.active,
.c1.table > tfoot > tr > th.active,
.c1.table > tbody > tr > th.active,
.c1.table > thead > tr.active > td,
.c1.table > tfoot > tr.active > td,
.c1.table > tbody > tr.active > td,
.c1.table > thead > tr.active > th,
.c1.table > tfoot > tr.active > th,
.c1.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c1.table-hover > tbody > tr > td.active:hover,
.c1.table-hover > tbody > tr > th.active:hover,
.c1.table-hover > tbody > tr.active:hover > td,
.c1.table-hover > tbody > tr:hover > .active,
.c1.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c1.table > thead > tr > td.success,
.c1.table > tfoot > tr > td.success,
.c1.table > tbody > tr > td.success,
.c1.table > thead > tr > th.success,
.c1.table > tfoot > tr > th.success,
.c1.table > tbody > tr > th.success,
.c1.table > thead > tr.success > td,
.c1.table > tfoot > tr.success > td,
.c1.table > tbody > tr.success > td,
.c1.table > thead > tr.success > th,
.c1.table > tfoot > tr.success > th,
.c1.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c1.table-hover > tbody > tr > td.success:hover,
.c1.table-hover > tbody > tr > th.success:hover,
.c1.table-hover > tbody > tr.success:hover > td,
.c1.table-hover > tbody > tr:hover > .success,
.c1.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c1.table > thead > tr > td.info,
.c1.table > tfoot > tr > td.info,
.c1.table > tbody > tr > td.info,
.c1.table > thead > tr > th.info,
.c1.table > tfoot > tr > th.info,
.c1.table > tbody > tr > th.info,
.c1.table > thead > tr.info > td,
.c1.table > tfoot > tr.info > td,
.c1.table > tbody > tr.info > td,
.c1.table > thead > tr.info > th,
.c1.table > tfoot > tr.info > th,
.c1.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c1.table-hover > tbody > tr > td.info:hover,
.c1.table-hover > tbody > tr > th.info:hover,
.c1.table-hover > tbody > tr.info:hover > td,
.c1.table-hover > tbody > tr:hover > .info,
.c1.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c1.table > thead > tr > td.warning,
.c1.table > tfoot > tr > td.warning,
.c1.table > tbody > tr > td.warning,
.c1.table > thead > tr > th.warning,
.c1.table > tfoot > tr > th.warning,
.c1.table > tbody > tr > th.warning,
.c1.table > thead > tr.warning > td,
.c1.table > tfoot > tr.warning > td,
.c1.table > tbody > tr.warning > td,
.c1.table > thead > tr.warning > th,
.c1.table > tfoot > tr.warning > th,
.c1.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c1.table-hover > tbody > tr > td.warning:hover,
.c1.table-hover > tbody > tr > th.warning:hover,
.c1.table-hover > tbody > tr.warning:hover > td,
.c1.table-hover > tbody > tr:hover > .warning,
.c1.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c1.table > thead > tr > td.danger,
.c1.table > tfoot > tr > td.danger,
.c1.table > tbody > tr > td.danger,
.c1.table > thead > tr > th.danger,
.c1.table > tfoot > tr > th.danger,
.c1.table > tbody > tr > th.danger,
.c1.table > thead > tr.danger > td,
.c1.table > tfoot > tr.danger > td,
.c1.table > tbody > tr.danger > td,
.c1.table > thead > tr.danger > th,
.c1.table > tfoot > tr.danger > th,
.c1.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c1.table-hover > tbody > tr > td.danger:hover,
.c1.table-hover > tbody > tr > th.danger:hover,
.c1.table-hover > tbody > tr.danger:hover > td,
.c1.table-hover > tbody > tr:hover > .danger,
.c1.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

.c1 thead > tr {
  color: #fff;
}

.c1 td,
.c1 th {
  position: relative;
  left: 13px;
}

.c1 > thead th {
  border: 0;
  font-size: 0.889rem;
  font-weight: normal;
  background-color: #1f1f1f;
  white-space: nowrap;
}

.c1 tr {
  border: 0 !important;
}

.c1 tbody.message-group {
  border-top: 0;
}

.c1 tbody.message-group-toggled {
  border-left: 7px solid #7894ce;
}

.c1 tbody.message-highlight {
  border-left: 7px solid #78c385;
}

.c1 tr.fields-row {
  cursor: pointer;
}

.c1 tr.fields-row td {
  min-width: 50px;
  padding-top: 10px;
}

.c1 tr.message-row td {
  border-top: 0;
  padding-top: 0;
  padding-bottom: 5px;
  font-family: "Roboto Mono",Menlo,Monaco,Consolas,"Courier New",monospace;
  color: #0057a8;
}

.c1 tr.message-row {
  margin-bottom: 5px;
  cursor: pointer;
}

.c1 tr.message-row .message-wrapper {
  line-height: 1.5em;
  white-space: pre-line;
  max-height: 6em;
  overflow: hidden;
}

.c1 tr.message-row .message-wrapper::after {
  content: "";
  text-align: right;
  position: absolute;
  width: 99%;
  left: 5px;
  top: 4.5em;
  height: 1.5em;
  background: linear-gradient(to bottom,rgba(255,255,255,0),rgb(255,255,255) 95%);
}

.c1 tr.message-detail-row {
  display: none;
}

.c1 tr.message-detail-row td {
  padding-top: 5px;
  border-top: 0;
}

.c1 tr.message-detail-row .row {
  margin-right: 0;
}

.c1 tr.message-detail-row div[class*="col-"] {
  padding-right: 0;
}

.c1 th i.sort-order-desc {
  position: relative;
  top: -1px;
}

.c1 th i.sort-order-item {
  margin-right: 2px;
  color: #1f1f1f;
  visibility: hidden;
}

.c1 th i.sort-order-active,
.c1 th:hover i.sort-order-item {
  color: #fff;
}

<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": true,
      "row_pivots": Array [],
      "series": Array [],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={Object {}}
  effectiveTimerange={
    Object {
      "from": "2020-01-10T13:23:42.000Z",
      "to": "2020-01-10T14:23:42.000Z",
      "type": "absolute",
    }
  }
  fields={Immutable.List []}
  height={200}
  onChange={[Function]}
  toggleEdit={[Function]}
  width={300}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": true,
        "row_pivots": Array [],
        "series": Array [],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={Object {}}
    effectiveTimerange={
      Object {
        "from": "2020-01-10T13:23:42.000Z",
        "to": "2020-01-10T14:23:42.000Z",
        "type": "absolute",
      }
    }
    fields={Immutable.List []}
    height={200}
    onChange={[Function]}
    toggleEdit={[Function]}
    width={300}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <MessagesTable>
          <MessagesTable__MessagesContainer>
            <div
              className="c0"
            >
              <MessagesTable__StyledTable
                condensed={true}
              >
                <Table
                  bordered={false}
                  bsClass="table"
                  className="Table-ztr4bi-0 c1"
                  condensed={true}
                  hover={false}
                  responsive={false}
                  striped={false}
                >
                  <table
                    className="Table-ztr4bi-0 c1 table table-condensed"
                  >
                    <thead>
                      <Headers
                        activeQuery="deadbeef-23"
                        actualColumnPivotFields={Array []}
                        columnPivots={Array []}
                        fields={Immutable.List []}
                        rollup={true}
                        rowPivots={Array []}
                        series={Array []}
                      >
                        <tr />
                      </Headers>
                    </thead>
                  </table>
                </Table>
              </MessagesTable__StyledTable>
            </div>
          </MessagesTable__MessagesContainer>
        </MessagesTable>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;

exports[`DataTable should render with filled data with rollup 1`] = `
.c0 {
  padding-right: 13px;
  width: 100%;
}

.c1 {
  position: relative;
  font-size: 0.889rem;
  margin-top: 15px;
  margin-bottom: 60px;
  border-collapse: collapse;
  padding-left: 13px;
  width: 100%;
  word-break: break-all;
}

.c1.table > thead > tr > th,
.c1.table > tbody > tr > th,
.c1.table > tfoot > tr > th,
.c1.table > thead > tr > td,
.c1.table > tbody > tr > td,
.c1.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c1.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c1.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c1.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c1.table .table {
  background-color: #fafafa;
}

.c1.table-bordered {
  border-color: #f0f0f0;
}

.c1.table-bordered > thead > tr > td,
.c1.table-bordered > tfoot > tr > td,
.c1.table-bordered > tbody > tr > td,
.c1.table-bordered > thead > tr > th,
.c1.table-bordered > tfoot > tr > th,
.c1.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c1.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c1.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c1.table > thead > tr > td.active,
.c1.table > tfoot > tr > td.active,
.c1.table > tbody > tr > td.active,
.c1.table > thead > tr > th.active,
.c1.table > tfoot > tr > th.active,
.c1.table > tbody > tr > th.active,
.c1.table > thead > tr.active > td,
.c1.table > tfoot > tr.active > td,
.c1.table > tbody > tr.active > td,
.c1.table > thead > tr.active > th,
.c1.table > tfoot > tr.active > th,
.c1.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c1.table-hover > tbody > tr > td.active:hover,
.c1.table-hover > tbody > tr > th.active:hover,
.c1.table-hover > tbody > tr.active:hover > td,
.c1.table-hover > tbody > tr:hover > .active,
.c1.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c1.table > thead > tr > td.success,
.c1.table > tfoot > tr > td.success,
.c1.table > tbody > tr > td.success,
.c1.table > thead > tr > th.success,
.c1.table > tfoot > tr > th.success,
.c1.table > tbody > tr > th.success,
.c1.table > thead > tr.success > td,
.c1.table > tfoot > tr.success > td,
.c1.table > tbody > tr.success > td,
.c1.table > thead > tr.success > th,
.c1.table > tfoot > tr.success > th,
.c1.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c1.table-hover > tbody > tr > td.success:hover,
.c1.table-hover > tbody > tr > th.success:hover,
.c1.table-hover > tbody > tr.success:hover > td,
.c1.table-hover > tbody > tr:hover > .success,
.c1.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c1.table > thead > tr > td.info,
.c1.table > tfoot > tr > td.info,
.c1.table > tbody > tr > td.info,
.c1.table > thead > tr > th.info,
.c1.table > tfoot > tr > th.info,
.c1.table > tbody > tr > th.info,
.c1.table > thead > tr.info > td,
.c1.table > tfoot > tr.info > td,
.c1.table > tbody > tr.info > td,
.c1.table > thead > tr.info > th,
.c1.table > tfoot > tr.info > th,
.c1.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c1.table-hover > tbody > tr > td.info:hover,
.c1.table-hover > tbody > tr > th.info:hover,
.c1.table-hover > tbody > tr.info:hover > td,
.c1.table-hover > tbody > tr:hover > .info,
.c1.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c1.table > thead > tr > td.warning,
.c1.table > tfoot > tr > td.warning,
.c1.table > tbody > tr > td.warning,
.c1.table > thead > tr > th.warning,
.c1.table > tfoot > tr > th.warning,
.c1.table > tbody > tr > th.warning,
.c1.table > thead > tr.warning > td,
.c1.table > tfoot > tr.warning > td,
.c1.table > tbody > tr.warning > td,
.c1.table > thead > tr.warning > th,
.c1.table > tfoot > tr.warning > th,
.c1.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c1.table-hover > tbody > tr > td.warning:hover,
.c1.table-hover > tbody > tr > th.warning:hover,
.c1.table-hover > tbody > tr.warning:hover > td,
.c1.table-hover > tbody > tr:hover > .warning,
.c1.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c1.table > thead > tr > td.danger,
.c1.table > tfoot > tr > td.danger,
.c1.table > tbody > tr > td.danger,
.c1.table > thead > tr > th.danger,
.c1.table > tfoot > tr > th.danger,
.c1.table > tbody > tr > th.danger,
.c1.table > thead > tr.danger > td,
.c1.table > tfoot > tr.danger > td,
.c1.table > tbody > tr.danger > td,
.c1.table > thead > tr.danger > th,
.c1.table > tfoot > tr.danger > th,
.c1.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c1.table-hover > tbody > tr > td.danger:hover,
.c1.table-hover > tbody > tr > th.danger:hover,
.c1.table-hover > tbody > tr.danger:hover > td,
.c1.table-hover > tbody > tr:hover > .danger,
.c1.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

.c1 thead > tr {
  color: #fff;
}

.c1 td,
.c1 th {
  position: relative;
  left: 13px;
}

.c1 > thead th {
  border: 0;
  font-size: 0.889rem;
  font-weight: normal;
  background-color: #1f1f1f;
  white-space: nowrap;
}

.c1 tr {
  border: 0 !important;
}

.c1 tbody.message-group {
  border-top: 0;
}

.c1 tbody.message-group-toggled {
  border-left: 7px solid #7894ce;
}

.c1 tbody.message-highlight {
  border-left: 7px solid #78c385;
}

.c1 tr.fields-row {
  cursor: pointer;
}

.c1 tr.fields-row td {
  min-width: 50px;
  padding-top: 10px;
}

.c1 tr.message-row td {
  border-top: 0;
  padding-top: 0;
  padding-bottom: 5px;
  font-family: "Roboto Mono",Menlo,Monaco,Consolas,"Courier New",monospace;
  color: #0057a8;
}

.c1 tr.message-row {
  margin-bottom: 5px;
  cursor: pointer;
}

.c1 tr.message-row .message-wrapper {
  line-height: 1.5em;
  white-space: pre-line;
  max-height: 6em;
  overflow: hidden;
}

.c1 tr.message-row .message-wrapper::after {
  content: "";
  text-align: right;
  position: absolute;
  width: 99%;
  left: 5px;
  top: 4.5em;
  height: 1.5em;
  background: linear-gradient(to bottom,rgba(255,255,255,0),rgb(255,255,255) 95%);
}

.c1 tr.message-detail-row {
  display: none;
}

.c1 tr.message-detail-row td {
  padding-top: 5px;
  border-top: 0;
}

.c1 tr.message-detail-row .row {
  margin-right: 0;
}

.c1 tr.message-detail-row div[class*="col-"] {
  padding-right: 0;
}

.c1 th i.sort-order-desc {
  position: relative;
  top: -1px;
}

.c1 th i.sort-order-item {
  margin-right: 2px;
  color: #1f1f1f;
  visibility: hidden;
}

.c1 th i.sort-order-active,
.c1 th:hover i.sort-order-item {
  color: #fff;
}

.c2 {
  color: currentColor;
  opacity: 1;
}

<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [
        Object {
          "config": Object {
            "limit": 15,
          },
          "field": "source",
          "type": "values",
        },
      ],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": true,
      "row_pivots": Array [
        Object {
          "config": Object {
            "interval": "auto",
          },
          "field": "timestamp",
          "type": "time",
        },
      ],
      "series": Array [
        Object {
          "config": Object {
            "name": null,
          },
          "function": "count()",
        },
      ],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={
    Object {
      "chart": Array [
        Object {
          "key": Array [
            "2018-10-04T09:43:50.000Z",
          ],
          "source": "leaf",
          "values": Array [
            Object {
              "key": Array [
                "hulud.net",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 408,
            },
            Object {
              "key": Array [
                "count()",
              ],
              "rollup": true,
              "source": "row-leaf",
              "value": 408,
            },
          ],
        },
      ],
    }
  }
  effectiveTimerange={
    Object {
      "from": "2020-01-10T13:23:42.000Z",
      "to": "2020-01-10T14:23:42.000Z",
      "type": "absolute",
    }
  }
  fields={Immutable.List []}
  height={200}
  onChange={[Function]}
  toggleEdit={[Function]}
  width={300}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [
          Object {
            "config": Object {
              "limit": 15,
            },
            "field": "source",
            "type": "values",
          },
        ],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": true,
        "row_pivots": Array [
          Object {
            "config": Object {
              "interval": "auto",
            },
            "field": "timestamp",
            "type": "time",
          },
        ],
        "series": Array [
          Object {
            "config": Object {
              "name": null,
            },
            "function": "count()",
          },
        ],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={
      Object {
        "chart": Array [
          Object {
            "key": Array [
              "2018-10-04T09:43:50.000Z",
            ],
            "source": "leaf",
            "values": Array [
              Object {
                "key": Array [
                  "hulud.net",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 408,
              },
              Object {
                "key": Array [
                  "count()",
                ],
                "rollup": true,
                "source": "row-leaf",
                "value": 408,
              },
            ],
          },
        ],
      }
    }
    effectiveTimerange={
      Object {
        "from": "2020-01-10T13:23:42.000Z",
        "to": "2020-01-10T14:23:42.000Z",
        "type": "absolute",
      }
    }
    fields={Immutable.List []}
    height={200}
    onChange={[Function]}
    toggleEdit={[Function]}
    width={300}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <MessagesTable>
          <MessagesTable__MessagesContainer>
            <div
              className="c0"
            >
              <MessagesTable__StyledTable
                condensed={true}
              >
                <Table
                  bordered={false}
                  bsClass="table"
                  className="Table-ztr4bi-0 c1"
                  condensed={true}
                  hover={false}
                  responsive={false}
                  striped={false}
                >
                  <table
                    className="Table-ztr4bi-0 c1 table table-condensed"
                  >
                    <thead>
                      <Headers
                        activeQuery="deadbeef-23"
                        actualColumnPivotFields={
                          Array [
                            Array [
                              "hulud.net",
                            ],
                          ]
                        }
                        columnPivots={
                          Array [
                            Object {
                              "config": Object {
                                "limit": 15,
                              },
                              "field": "source",
                              "type": "values",
                            },
                          ]
                        }
                        fields={Immutable.List []}
                        rollup={true}
                        rowPivots={
                          Array [
                            Object {
                              "config": Object {
                                "interval": "auto",
                              },
                              "field": "timestamp",
                              "type": "time",
                            },
                          ]
                        }
                        series={
                          Array [
                            Object {
                              "config": Object {
                                "name": null,
                              },
                              "function": "count()",
                            },
                          ]
                        }
                      >
                        <tr
                          key="header-table-row-source"
                        >
                          <th
                            className="leftAligned"
                            colSpan={2}
                            key="spacer-1"
                          />
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="source-hulud.net"
                          >
                            <Value
                              field="source"
                              queryId="deadbeef-23"
                              render={[Function]}
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value="hulud.net"
                            >
                              <ValueActions
                                element="hulud.net"
                                field="source"
                                menuContainer={<body />}
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "unknown",
                                      "properties": Immutable.Set [],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                                value="hulud.net"
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle="hulud.net"
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    hulud.net
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </ValueActions>
                            </Value>
                          </th>
                        </tr>
                        <tr>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="timestamp"
                          >
                            <Field
                              disabled={false}
                              menuContainer={<body />}
                              name="timestamp"
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                            >
                              <FieldActions
                                disabled={false}
                                element="timestamp"
                                menuContainer={<body />}
                                name="timestamp"
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "unknown",
                                      "properties": Immutable.Set [],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle={
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      timestamp
                                    </FieldActions__FieldElement>
                                  }
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      <span
                                        className="c2 field-element"
                                        disabled={false}
                                      >
                                        timestamp
                                      </span>
                                    </FieldActions__FieldElement>
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </FieldActions>
                            </Field>
                          </th>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="count()"
                          >
                            <Field
                              disabled={false}
                              menuContainer={<body />}
                              name="count()"
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                            >
                              <FieldActions
                                disabled={false}
                                element="count()"
                                menuContainer={<body />}
                                name="count()"
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "long",
                                      "properties": Immutable.Set [
                                        "numeric",
                                        "enumerable",
                                      ],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle={
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      count()
                                    </FieldActions__FieldElement>
                                  }
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      <span
                                        className="c2 field-element"
                                        disabled={false}
                                      >
                                        count()
                                      </span>
                                    </FieldActions__FieldElement>
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </FieldActions>
                            </Field>
                          </th>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="hulud.netcount()"
                          >
                            <Field
                              disabled={false}
                              menuContainer={<body />}
                              name="count()"
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                            >
                              <FieldActions
                                disabled={false}
                                element="count()"
                                menuContainer={<body />}
                                name="count()"
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "long",
                                      "properties": Immutable.Set [
                                        "numeric",
                                        "enumerable",
                                      ],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle={
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      count()
                                    </FieldActions__FieldElement>
                                  }
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      <span
                                        className="c2 field-element"
                                        disabled={false}
                                      >
                                        count()
                                      </span>
                                    </FieldActions__FieldElement>
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </FieldActions>
                            </Field>
                          </th>
                        </tr>
                      </Headers>
                    </thead>
                    <DataTableEntry
                      columnPivotValues={
                        Array [
                          Array [
                            "hulud.net",
                          ],
                        ]
                      }
                      columnPivots={
                        Array [
                          "source",
                        ]
                      }
                      currentView={
                        Object {
                          "activeQuery": "deadbeef-23",
                        }
                      }
                      fields={
                        Immutable.OrderedSet [
                          "timestamp",
                          "count()",
                        ]
                      }
                      item={
                        Object {
                          "count()": 408,
                          "source": Object {
                            "hulud.net": Object {
                              "count()": 408,
                            },
                          },
                          "timestamp": "2018-10-04T09:43:50.000Z",
                        }
                      }
                      key="datatableentry-0"
                      series={
                        Array [
                          Object {
                            "config": Object {
                              "name": null,
                            },
                            "function": "count()",
                          },
                        ]
                      }
                      types={Immutable.List []}
                      valuePath={
                        Array [
                          Object {
                            "timestamp": "2018-10-04T09:43:50.000Z",
                          },
                        ]
                      }
                    >
                      <tbody
                        className="message-group"
                      >
                        <tr
                          className="fields-row"
                        >
                          <td
                            key="deadbeef-23-timestamp=2018-10-04T09:43:50.000Z-0"
                          >
                            <Provider
                              value={
                                Object {
                                  "valuePath": Array [
                                    Object {
                                      "timestamp": "2018-10-04T09:43:50.000Z",
                                    },
                                  ],
                                }
                              }
                            >
                              <CustomHighlighting
                                field="timestamp"
                                value="2018-10-04T09:43:50.000Z"
                              >
                                <Value
                                  field="timestamp"
                                  queryId="deadbeef-23"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "unknown",
                                        "properties": Immutable.Set [],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value="2018-10-04T09:43:50.000Z"
                                >
                                  <ValueActions
                                    element={
                                      <TypeSpecificValue
                                        field="timestamp"
                                        render={[Function]}
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "unknown",
                                              "properties": Immutable.Set [],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="2018-10-04T09:43:50.000Z"
                                      />
                                    }
                                    field="timestamp"
                                    menuContainer={<body />}
                                    queryId="deadbeef-23"
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "unknown",
                                          "properties": Immutable.Set [],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value="2018-10-04T09:43:50.000Z"
                                  >
                                    <OverlayDropdown
                                      menuContainer={<body />}
                                      onToggle={[Function]}
                                      placement="right"
                                      show={false}
                                      toggle={
                                        <TypeSpecificValue
                                          field="timestamp"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "unknown",
                                                "properties": Immutable.Set [],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="2018-10-04T09:43:50.000Z"
                                        />
                                      }
                                    >
                                      <span
                                        className="dropdowntoggle"
                                        onClick={[Function]}
                                        role="presentation"
                                      >
                                        <TypeSpecificValue
                                          field="timestamp"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "unknown",
                                                "properties": Immutable.Set [],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="2018-10-04T09:43:50.000Z"
                                        >
                                          <Component
                                            field="timestamp"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "unknown",
                                                  "properties": Immutable.Set [],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="2018-10-04T09:43:50.000Z"
                                          >
                                            <DecoratedValue
                                              field="timestamp"
                                              type={
                                                FieldType {
                                                  "value": Immutable.Map {
                                                    "type": "unknown",
                                                    "properties": Immutable.Set [],
                                                    "indexNames": Immutable.Set [],
                                                  },
                                                }
                                              }
                                              value="2018-10-04T09:43:50.000Z"
                                            >
                                              <Component
                                                field="timestamp"
                                                type={
                                                  FieldType {
                                                    "value": Immutable.Map {
                                                      "type": "unknown",
                                                      "properties": Immutable.Set [],
                                                      "indexNames": Immutable.Set [],
                                                    },
                                                  }
                                                }
                                                value="2018-10-04T09:43:50.000Z"
                                              >
                                                <Highlight
                                                  field="timestamp"
                                                  type={
                                                    FieldType {
                                                      "value": Immutable.Map {
                                                        "type": "unknown",
                                                        "properties": Immutable.Set [],
                                                        "indexNames": Immutable.Set [],
                                                      },
                                                    }
                                                  }
                                                  value="2018-10-04T09:43:50.000Z"
                                                >
                                                  <PossiblyHighlight
                                                    color="#ffec3d"
                                                    field="timestamp"
                                                    highlightRanges={Object {}}
                                                    value="2018-10-04T09:43:50.000Z"
                                                  >
                                                    2018-10-04T09:43:50.000Z
                                                  </PossiblyHighlight>
                                                </Highlight>
                                              </Component>
                                            </DecoratedValue>
                                          </Component>
                                        </TypeSpecificValue>
                                        <span
                                          className="caret"
                                        />
                                      </span>
                                    </OverlayDropdown>
                                  </ValueActions>
                                </Value>
                              </CustomHighlighting>
                            </Provider>
                          </td>
                          <td
                            key="deadbeef-23-count()=408-1"
                          >
                            <Provider
                              value={
                                Object {
                                  "valuePath": Array [
                                    Object {
                                      "timestamp": "2018-10-04T09:43:50.000Z",
                                    },
                                  ],
                                }
                              }
                            >
                              <CustomHighlighting
                                field="count()"
                                value={408}
                              >
                                <Value
                                  field="count()"
                                  queryId="deadbeef-23"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={408}
                                >
                                  <ValueActions
                                    element={
                                      <TypeSpecificValue
                                        field="count()"
                                        render={[Function]}
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value={408}
                                      />
                                    }
                                    field="count()"
                                    menuContainer={<body />}
                                    queryId="deadbeef-23"
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  >
                                    <OverlayDropdown
                                      menuContainer={<body />}
                                      onToggle={[Function]}
                                      placement="right"
                                      show={false}
                                      toggle={
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={408}
                                        />
                                      }
                                    >
                                      <span
                                        className="dropdowntoggle"
                                        onClick={[Function]}
                                        role="presentation"
                                      >
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={408}
                                        >
                                          <Component
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="408"
                                          >
                                            <DecoratedValue
                                              field="count()"
                                              type={
                                                FieldType {
                                                  "value": Immutable.Map {
                                                    "type": "long",
                                                    "properties": Immutable.Set [
                                                      "numeric",
                                                      "enumerable",
                                                    ],
                                                    "indexNames": Immutable.Set [],
                                                  },
                                                }
                                              }
                                              value="408"
                                            >
                                              <Component
                                                field="count()"
                                                type={
                                                  FieldType {
                                                    "value": Immutable.Map {
                                                      "type": "long",
                                                      "properties": Immutable.Set [
                                                        "numeric",
                                                        "enumerable",
                                                      ],
                                                      "indexNames": Immutable.Set [],
                                                    },
                                                  }
                                                }
                                                value="408"
                                              >
                                                <Highlight
                                                  field="count()"
                                                  type={
                                                    FieldType {
                                                      "value": Immutable.Map {
                                                        "type": "long",
                                                        "properties": Immutable.Set [
                                                          "numeric",
                                                          "enumerable",
                                                        ],
                                                        "indexNames": Immutable.Set [],
                                                      },
                                                    }
                                                  }
                                                  value="408"
                                                >
                                                  <PossiblyHighlight
                                                    color="#ffec3d"
                                                    field="count()"
                                                    highlightRanges={Object {}}
                                                    value="408"
                                                  >
                                                    408
                                                  </PossiblyHighlight>
                                                </Highlight>
                                              </Component>
                                            </DecoratedValue>
                                          </Component>
                                        </TypeSpecificValue>
                                        <span
                                          className="caret"
                                        />
                                      </span>
                                    </OverlayDropdown>
                                  </ValueActions>
                                </Value>
                              </CustomHighlighting>
                            </Provider>
                          </td>
                          <td
                            key="deadbeef-23-count()=408-2"
                          >
                            <Provider
                              value={
                                Object {
                                  "valuePath": Array [
                                    Object {
                                      "timestamp": "2018-10-04T09:43:50.000Z",
                                    },
                                    Object {
                                      "source": "hulud.net",
                                    },
                                  ],
                                }
                              }
                            >
                              <CustomHighlighting
                                field="count()"
                                value={408}
                              >
                                <Value
                                  field="count()"
                                  queryId="deadbeef-23"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={408}
                                >
                                  <ValueActions
                                    element={
                                      <TypeSpecificValue
                                        field="count()"
                                        render={[Function]}
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value={408}
                                      />
                                    }
                                    field="count()"
                                    menuContainer={<body />}
                                    queryId="deadbeef-23"
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  >
                                    <OverlayDropdown
                                      menuContainer={<body />}
                                      onToggle={[Function]}
                                      placement="right"
                                      show={false}
                                      toggle={
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={408}
                                        />
                                      }
                                    >
                                      <span
                                        className="dropdowntoggle"
                                        onClick={[Function]}
                                        role="presentation"
                                      >
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={408}
                                        >
                                          <Component
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="408"
                                          >
                                            <DecoratedValue
                                              field="count()"
                                              type={
                                                FieldType {
                                                  "value": Immutable.Map {
                                                    "type": "long",
                                                    "properties": Immutable.Set [
                                                      "numeric",
                                                      "enumerable",
                                                    ],
                                                    "indexNames": Immutable.Set [],
                                                  },
                                                }
                                              }
                                              value="408"
                                            >
                                              <Component
                                                field="count()"
                                                type={
                                                  FieldType {
                                                    "value": Immutable.Map {
                                                      "type": "long",
                                                      "properties": Immutable.Set [
                                                        "numeric",
                                                        "enumerable",
                                                      ],
                                                      "indexNames": Immutable.Set [],
                                                    },
                                                  }
                                                }
                                                value="408"
                                              >
                                                <Highlight
                                                  field="count()"
                                                  type={
                                                    FieldType {
                                                      "value": Immutable.Map {
                                                        "type": "long",
                                                        "properties": Immutable.Set [
                                                          "numeric",
                                                          "enumerable",
                                                        ],
                                                        "indexNames": Immutable.Set [],
                                                      },
                                                    }
                                                  }
                                                  value="408"
                                                >
                                                  <PossiblyHighlight
                                                    color="#ffec3d"
                                                    field="count()"
                                                    highlightRanges={Object {}}
                                                    value="408"
                                                  >
                                                    408
                                                  </PossiblyHighlight>
                                                </Highlight>
                                              </Component>
                                            </DecoratedValue>
                                          </Component>
                                        </TypeSpecificValue>
                                        <span
                                          className="caret"
                                        />
                                      </span>
                                    </OverlayDropdown>
                                  </ValueActions>
                                </Value>
                              </CustomHighlighting>
                            </Provider>
                          </td>
                        </tr>
                      </tbody>
                    </DataTableEntry>
                  </table>
                </Table>
              </MessagesTable__StyledTable>
            </div>
          </MessagesTable__MessagesContainer>
        </MessagesTable>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;

exports[`DataTable should render with filled data without rollup 1`] = `
.c0 {
  padding-right: 13px;
  width: 100%;
}

.c1 {
  position: relative;
  font-size: 0.889rem;
  margin-top: 15px;
  margin-bottom: 60px;
  border-collapse: collapse;
  padding-left: 13px;
  width: 100%;
  word-break: break-all;
}

.c1.table > thead > tr > th,
.c1.table > tbody > tr > th,
.c1.table > tfoot > tr > th,
.c1.table > thead > tr > td,
.c1.table > tbody > tr > td,
.c1.table > tfoot > tr > td {
  border-top-color: #f0f0f0;
}

.c1.table > thead > tr > th {
  border-bottom-color: #f0f0f0;
}

.c1.table > tbody > tr {
  background-color: #fafafa;
  -webkit-transition: background-color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out;
}

.c1.table > tbody + tbody {
  border-top-color: #f0f0f0;
}

.c1.table .table {
  background-color: #fafafa;
}

.c1.table-bordered {
  border-color: #f0f0f0;
}

.c1.table-bordered > thead > tr > td,
.c1.table-bordered > tfoot > tr > td,
.c1.table-bordered > tbody > tr > td,
.c1.table-bordered > thead > tr > th,
.c1.table-bordered > tfoot > tr > th,
.c1.table-bordered > tbody > tr > th {
  border-color: #f0f0f0;
}

.c1.table-striped > tbody > tr:nth-of-type(odd) {
  background-color: #f0f0f0;
}

.c1.table-hover > tbody > tr:hover {
  background-color: #f5f5f5;
}

.c1.table > thead > tr > td.active,
.c1.table > tfoot > tr > td.active,
.c1.table > tbody > tr > td.active,
.c1.table > thead > tr > th.active,
.c1.table > tfoot > tr > th.active,
.c1.table > tbody > tr > th.active,
.c1.table > thead > tr.active > td,
.c1.table > tfoot > tr.active > td,
.c1.table > tbody > tr.active > td,
.c1.table > thead > tr.active > th,
.c1.table > tfoot > tr.active > th,
.c1.table > tbody > tr.active > th {
  background-color: #e6e6e6;
}

.c1.table-hover > tbody > tr > td.active:hover,
.c1.table-hover > tbody > tr > th.active:hover,
.c1.table-hover > tbody > tr.active:hover > td,
.c1.table-hover > tbody > tr:hover > .active,
.c1.table-hover > tbody > tr.active:hover > th {
  background-color: #d0d0d0;
}

.c1.table > thead > tr > td.success,
.c1.table > tfoot > tr > td.success,
.c1.table > tbody > tr > td.success,
.c1.table > thead > tr > th.success,
.c1.table > tfoot > tr > th.success,
.c1.table > tbody > tr > th.success,
.c1.table > thead > tr.success > td,
.c1.table > tfoot > tr.success > td,
.c1.table > tbody > tr.success > td,
.c1.table > thead > tr.success > th,
.c1.table > tfoot > tr.success > th,
.c1.table > tbody > tr.success > th {
  background-color: #ddeddf;
}

.c1.table-hover > tbody > tr > td.success:hover,
.c1.table-hover > tbody > tr > th.success:hover,
.c1.table-hover > tbody > tr.success:hover > td,
.c1.table-hover > tbody > tr:hover > .success,
.c1.table-hover > tbody > tr.success:hover > th {
  background-color: #bddec2;
}

.c1.table > thead > tr > td.info,
.c1.table > tfoot > tr > td.info,
.c1.table > tbody > tr > td.info,
.c1.table > thead > tr > th.info,
.c1.table > tfoot > tr > th.info,
.c1.table > tbody > tr > th.info,
.c1.table > thead > tr.info > td,
.c1.table > tfoot > tr.info > td,
.c1.table > tbody > tr.info > td,
.c1.table > thead > tr.info > th,
.c1.table > tfoot > tr.info > th,
.c1.table > tbody > tr.info > th {
  background-color: #dde2f0;
}

.c1.table-hover > tbody > tr > td.info:hover,
.c1.table-hover > tbody > tr > th.info:hover,
.c1.table-hover > tbody > tr.info:hover > td,
.c1.table-hover > tbody > tr:hover > .info,
.c1.table-hover > tbody > tr.info:hover > th {
  background-color: #bdc8e4;
}

.c1.table > thead > tr > td.warning,
.c1.table > tfoot > tr > td.warning,
.c1.table > tbody > tr > td.warning,
.c1.table > thead > tr > th.warning,
.c1.table > tfoot > tr > th.warning,
.c1.table > tbody > tr > th.warning,
.c1.table > thead > tr.warning > td,
.c1.table > tfoot > tr.warning > td,
.c1.table > tbody > tr.warning > td,
.c1.table > thead > tr.warning > th,
.c1.table > tfoot > tr.warning > th,
.c1.table > tbody > tr.warning > th {
  background-color: #fff5dd;
}

.c1.table-hover > tbody > tr > td.warning:hover,
.c1.table-hover > tbody > tr > th.warning:hover,
.c1.table-hover > tbody > tr.warning:hover > td,
.c1.table-hover > tbody > tr:hover > .warning,
.c1.table-hover > tbody > tr.warning:hover > th {
  background-color: #ffecbd;
}

.c1.table > thead > tr > td.danger,
.c1.table > tfoot > tr > td.danger,
.c1.table > tbody > tr > td.danger,
.c1.table > thead > tr > th.danger,
.c1.table > tfoot > tr > th.danger,
.c1.table > tbody > tr > th.danger,
.c1.table > thead > tr.danger > td,
.c1.table > tfoot > tr.danger > td,
.c1.table > tbody > tr.danger > td,
.c1.table > thead > tr.danger > th,
.c1.table > tfoot > tr.danger > th,
.c1.table > tbody > tr.danger > th {
  background-color: #eddddd;
}

.c1.table-hover > tbody > tr > td.danger:hover,
.c1.table-hover > tbody > tr > th.danger:hover,
.c1.table-hover > tbody > tr.danger:hover > td,
.c1.table-hover > tbody > tr:hover > .danger,
.c1.table-hover > tbody > tr.danger:hover > th {
  background-color: #debdbd;
}

.c1 thead > tr {
  color: #fff;
}

.c1 td,
.c1 th {
  position: relative;
  left: 13px;
}

.c1 > thead th {
  border: 0;
  font-size: 0.889rem;
  font-weight: normal;
  background-color: #1f1f1f;
  white-space: nowrap;
}

.c1 tr {
  border: 0 !important;
}

.c1 tbody.message-group {
  border-top: 0;
}

.c1 tbody.message-group-toggled {
  border-left: 7px solid #7894ce;
}

.c1 tbody.message-highlight {
  border-left: 7px solid #78c385;
}

.c1 tr.fields-row {
  cursor: pointer;
}

.c1 tr.fields-row td {
  min-width: 50px;
  padding-top: 10px;
}

.c1 tr.message-row td {
  border-top: 0;
  padding-top: 0;
  padding-bottom: 5px;
  font-family: "Roboto Mono",Menlo,Monaco,Consolas,"Courier New",monospace;
  color: #0057a8;
}

.c1 tr.message-row {
  margin-bottom: 5px;
  cursor: pointer;
}

.c1 tr.message-row .message-wrapper {
  line-height: 1.5em;
  white-space: pre-line;
  max-height: 6em;
  overflow: hidden;
}

.c1 tr.message-row .message-wrapper::after {
  content: "";
  text-align: right;
  position: absolute;
  width: 99%;
  left: 5px;
  top: 4.5em;
  height: 1.5em;
  background: linear-gradient(to bottom,rgba(255,255,255,0),rgb(255,255,255) 95%);
}

.c1 tr.message-detail-row {
  display: none;
}

.c1 tr.message-detail-row td {
  padding-top: 5px;
  border-top: 0;
}

.c1 tr.message-detail-row .row {
  margin-right: 0;
}

.c1 tr.message-detail-row div[class*="col-"] {
  padding-right: 0;
}

.c1 th i.sort-order-desc {
  position: relative;
  top: -1px;
}

.c1 th i.sort-order-item {
  margin-right: 2px;
  color: #1f1f1f;
  visibility: hidden;
}

.c1 th i.sort-order-active,
.c1 th:hover i.sort-order-item {
  color: #fff;
}

.c2 {
  color: currentColor;
  opacity: 1;
}

<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [
        Object {
          "config": Object {
            "limit": 15,
          },
          "field": "source",
          "type": "values",
        },
      ],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": false,
      "row_pivots": Array [
        Object {
          "config": Object {
            "interval": "auto",
          },
          "field": "timestamp",
          "type": "time",
        },
      ],
      "series": Array [
        Object {
          "config": Object {
            "name": null,
          },
          "function": "count()",
        },
      ],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={
    Object {
      "chart": Array [
        Object {
          "key": Array [
            "2018-10-04T09:43:50.000Z",
          ],
          "source": "leaf",
          "values": Array [
            Object {
              "key": Array [
                "hulud.net",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 408,
            },
            Object {
              "key": Array [
                "count()",
              ],
              "rollup": true,
              "source": "row-leaf",
              "value": 408,
            },
          ],
        },
      ],
    }
  }
  effectiveTimerange={
    Object {
      "from": "2020-01-10T13:23:42.000Z",
      "to": "2020-01-10T14:23:42.000Z",
      "type": "absolute",
    }
  }
  fields={Immutable.List []}
  height={200}
  onChange={[Function]}
  toggleEdit={[Function]}
  width={300}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [
          Object {
            "config": Object {
              "limit": 15,
            },
            "field": "source",
            "type": "values",
          },
        ],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": false,
        "row_pivots": Array [
          Object {
            "config": Object {
              "interval": "auto",
            },
            "field": "timestamp",
            "type": "time",
          },
        ],
        "series": Array [
          Object {
            "config": Object {
              "name": null,
            },
            "function": "count()",
          },
        ],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={
      Object {
        "chart": Array [
          Object {
            "key": Array [
              "2018-10-04T09:43:50.000Z",
            ],
            "source": "leaf",
            "values": Array [
              Object {
                "key": Array [
                  "hulud.net",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 408,
              },
              Object {
                "key": Array [
                  "count()",
                ],
                "rollup": true,
                "source": "row-leaf",
                "value": 408,
              },
            ],
          },
        ],
      }
    }
    effectiveTimerange={
      Object {
        "from": "2020-01-10T13:23:42.000Z",
        "to": "2020-01-10T14:23:42.000Z",
        "type": "absolute",
      }
    }
    fields={Immutable.List []}
    height={200}
    onChange={[Function]}
    toggleEdit={[Function]}
    width={300}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <MessagesTable>
          <MessagesTable__MessagesContainer>
            <div
              className="c0"
            >
              <MessagesTable__StyledTable
                condensed={true}
              >
                <Table
                  bordered={false}
                  bsClass="table"
                  className="Table-ztr4bi-0 c1"
                  condensed={true}
                  hover={false}
                  responsive={false}
                  striped={false}
                >
                  <table
                    className="Table-ztr4bi-0 c1 table table-condensed"
                  >
                    <thead>
                      <Headers
                        activeQuery="deadbeef-23"
                        actualColumnPivotFields={
                          Array [
                            Array [
                              "hulud.net",
                            ],
                          ]
                        }
                        columnPivots={
                          Array [
                            Object {
                              "config": Object {
                                "limit": 15,
                              },
                              "field": "source",
                              "type": "values",
                            },
                          ]
                        }
                        fields={Immutable.List []}
                        rollup={false}
                        rowPivots={
                          Array [
                            Object {
                              "config": Object {
                                "interval": "auto",
                              },
                              "field": "timestamp",
                              "type": "time",
                            },
                          ]
                        }
                        series={
                          Array [
                            Object {
                              "config": Object {
                                "name": null,
                              },
                              "function": "count()",
                            },
                          ]
                        }
                      >
                        <tr
                          key="header-table-row-source"
                        >
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="spacer-1"
                          />
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="source-hulud.net"
                          >
                            <Value
                              field="source"
                              queryId="deadbeef-23"
                              render={[Function]}
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value="hulud.net"
                            >
                              <ValueActions
                                element="hulud.net"
                                field="source"
                                menuContainer={<body />}
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "unknown",
                                      "properties": Immutable.Set [],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                                value="hulud.net"
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle="hulud.net"
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    hulud.net
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </ValueActions>
                            </Value>
                          </th>
                        </tr>
                        <tr>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="timestamp"
                          >
                            <Field
                              disabled={false}
                              menuContainer={<body />}
                              name="timestamp"
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                            >
                              <FieldActions
                                disabled={false}
                                element="timestamp"
                                menuContainer={<body />}
                                name="timestamp"
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "unknown",
                                      "properties": Immutable.Set [],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle={
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      timestamp
                                    </FieldActions__FieldElement>
                                  }
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      <span
                                        className="c2 field-element"
                                        disabled={false}
                                      >
                                        timestamp
                                      </span>
                                    </FieldActions__FieldElement>
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </FieldActions>
                            </Field>
                          </th>
                          <th
                            className="leftAligned"
                            colSpan={1}
                            key="hulud.netcount()"
                          >
                            <Field
                              disabled={false}
                              menuContainer={<body />}
                              name="count()"
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                            >
                              <FieldActions
                                disabled={false}
                                element="count()"
                                menuContainer={<body />}
                                name="count()"
                                queryId="deadbeef-23"
                                type={
                                  FieldType {
                                    "value": Immutable.Map {
                                      "type": "long",
                                      "properties": Immutable.Set [
                                        "numeric",
                                        "enumerable",
                                      ],
                                      "indexNames": Immutable.Set [],
                                    },
                                  }
                                }
                              >
                                <OverlayDropdown
                                  menuContainer={<body />}
                                  onToggle={[Function]}
                                  placement="right"
                                  show={false}
                                  toggle={
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      count()
                                    </FieldActions__FieldElement>
                                  }
                                >
                                  <span
                                    className="dropdowntoggle"
                                    onClick={[Function]}
                                    role="presentation"
                                  >
                                    <FieldActions__FieldElement
                                      active={false}
                                      disabled={false}
                                    >
                                      <span
                                        className="c2 field-element"
                                        disabled={false}
                                      >
                                        count()
                                      </span>
                                    </FieldActions__FieldElement>
                                    <span
                                      className="caret"
                                    />
                                  </span>
                                </OverlayDropdown>
                              </FieldActions>
                            </Field>
                          </th>
                        </tr>
                      </Headers>
                    </thead>
                    <DataTableEntry
                      columnPivotValues={
                        Array [
                          Array [
                            "hulud.net",
                          ],
                        ]
                      }
                      columnPivots={
                        Array [
                          "source",
                        ]
                      }
                      currentView={
                        Object {
                          "activeQuery": "deadbeef-23",
                        }
                      }
                      fields={
                        Immutable.OrderedSet [
                          "timestamp",
                        ]
                      }
                      item={
                        Object {
                          "count()": 408,
                          "source": Object {
                            "hulud.net": Object {
                              "count()": 408,
                            },
                          },
                          "timestamp": "2018-10-04T09:43:50.000Z",
                        }
                      }
                      key="datatableentry-0"
                      series={
                        Array [
                          Object {
                            "config": Object {
                              "name": null,
                            },
                            "function": "count()",
                          },
                        ]
                      }
                      types={Immutable.List []}
                      valuePath={
                        Array [
                          Object {
                            "timestamp": "2018-10-04T09:43:50.000Z",
                          },
                        ]
                      }
                    >
                      <tbody
                        className="message-group"
                      >
                        <tr
                          className="fields-row"
                        >
                          <td
                            key="deadbeef-23-timestamp=2018-10-04T09:43:50.000Z-0"
                          >
                            <Provider
                              value={
                                Object {
                                  "valuePath": Array [
                                    Object {
                                      "timestamp": "2018-10-04T09:43:50.000Z",
                                    },
                                  ],
                                }
                              }
                            >
                              <CustomHighlighting
                                field="timestamp"
                                value="2018-10-04T09:43:50.000Z"
                              >
                                <Value
                                  field="timestamp"
                                  queryId="deadbeef-23"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "unknown",
                                        "properties": Immutable.Set [],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value="2018-10-04T09:43:50.000Z"
                                >
                                  <ValueActions
                                    element={
                                      <TypeSpecificValue
                                        field="timestamp"
                                        render={[Function]}
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "unknown",
                                              "properties": Immutable.Set [],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="2018-10-04T09:43:50.000Z"
                                      />
                                    }
                                    field="timestamp"
                                    menuContainer={<body />}
                                    queryId="deadbeef-23"
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "unknown",
                                          "properties": Immutable.Set [],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value="2018-10-04T09:43:50.000Z"
                                  >
                                    <OverlayDropdown
                                      menuContainer={<body />}
                                      onToggle={[Function]}
                                      placement="right"
                                      show={false}
                                      toggle={
                                        <TypeSpecificValue
                                          field="timestamp"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "unknown",
                                                "properties": Immutable.Set [],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="2018-10-04T09:43:50.000Z"
                                        />
                                      }
                                    >
                                      <span
                                        className="dropdowntoggle"
                                        onClick={[Function]}
                                        role="presentation"
                                      >
                                        <TypeSpecificValue
                                          field="timestamp"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "unknown",
                                                "properties": Immutable.Set [],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="2018-10-04T09:43:50.000Z"
                                        >
                                          <Component
                                            field="timestamp"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "unknown",
                                                  "properties": Immutable.Set [],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="2018-10-04T09:43:50.000Z"
                                          >
                                            <DecoratedValue
                                              field="timestamp"
                                              type={
                                                FieldType {
                                                  "value": Immutable.Map {
                                                    "type": "unknown",
                                                    "properties": Immutable.Set [],
                                                    "indexNames": Immutable.Set [],
                                                  },
                                                }
                                              }
                                              value="2018-10-04T09:43:50.000Z"
                                            >
                                              <Component
                                                field="timestamp"
                                                type={
                                                  FieldType {
                                                    "value": Immutable.Map {
                                                      "type": "unknown",
                                                      "properties": Immutable.Set [],
                                                      "indexNames": Immutable.Set [],
                                                    },
                                                  }
                                                }
                                                value="2018-10-04T09:43:50.000Z"
                                              >
                                                <Highlight
                                                  field="timestamp"
                                                  type={
                                                    FieldType {
                                                      "value": Immutable.Map {
                                                        "type": "unknown",
                                                        "properties": Immutable.Set [],
                                                        "indexNames": Immutable.Set [],
                                                      },
                                                    }
                                                  }
                                                  value="2018-10-04T09:43:50.000Z"
                                                >
                                                  <PossiblyHighlight
                                                    color="#ffec3d"
                                                    field="timestamp"
                                                    highlightRanges={Object {}}
                                                    value="2018-10-04T09:43:50.000Z"
                                                  >
                                                    2018-10-04T09:43:50.000Z
                                                  </PossiblyHighlight>
                                                </Highlight>
                                              </Component>
                                            </DecoratedValue>
                                          </Component>
                                        </TypeSpecificValue>
                                        <span
                                          className="caret"
                                        />
                                      </span>
                                    </OverlayDropdown>
                                  </ValueActions>
                                </Value>
                              </CustomHighlighting>
                            </Provider>
                          </td>
                          <td
                            key="deadbeef-23-count()=408-1"
                          >
                            <Provider
                              value={
                                Object {
                                  "valuePath": Array [
                                    Object {
                                      "timestamp": "2018-10-04T09:43:50.000Z",
                                    },
                                    Object {
                                      "source": "hulud.net",
                                    },
                                  ],
                                }
                              }
                            >
                              <CustomHighlighting
                                field="count()"
                                value={408}
                              >
                                <Value
                                  field="count()"
                                  queryId="deadbeef-23"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={408}
                                >
                                  <ValueActions
                                    element={
                                      <TypeSpecificValue
                                        field="count()"
                                        render={[Function]}
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value={408}
                                      />
                                    }
                                    field="count()"
                                    menuContainer={<body />}
                                    queryId="deadbeef-23"
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  >
                                    <OverlayDropdown
                                      menuContainer={<body />}
                                      onToggle={[Function]}
                                      placement="right"
                                      show={false}
                                      toggle={
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={408}
                                        />
                                      }
                                    >
                                      <span
                                        className="dropdowntoggle"
                                        onClick={[Function]}
                                        role="presentation"
                                      >
                                        <TypeSpecificValue
                                          field="count()"
                                          render={[Function]}
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value={408}
                                        >
                                          <Component
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="408"
                                          >
                                            <DecoratedValue
                                              field="count()"
                                              type={
                                                FieldType {
                                                  "value": Immutable.Map {
                                                    "type": "long",
                                                    "properties": Immutable.Set [
                                                      "numeric",
                                                      "enumerable",
                                                    ],
                                                    "indexNames": Immutable.Set [],
                                                  },
                                                }
                                              }
                                              value="408"
                                            >
                                              <Component
                                                field="count()"
                                                type={
                                                  FieldType {
                                                    "value": Immutable.Map {
                                                      "type": "long",
                                                      "properties": Immutable.Set [
                                                        "numeric",
                                                        "enumerable",
                                                      ],
                                                      "indexNames": Immutable.Set [],
                                                    },
                                                  }
                                                }
                                                value="408"
                                              >
                                                <Highlight
                                                  field="count()"
                                                  type={
                                                    FieldType {
                                                      "value": Immutable.Map {
                                                        "type": "long",
                                                        "properties": Immutable.Set [
                                                          "numeric",
                                                          "enumerable",
                                                        ],
                                                        "indexNames": Immutable.Set [],
                                                      },
                                                    }
                                                  }
                                                  value="408"
                                                >
                                                  <PossiblyHighlight
                                                    color="#ffec3d"
                                                    field="count()"
                                                    highlightRanges={Object {}}
                                                    value="408"
                                                  >
                                                    408
                                                  </PossiblyHighlight>
                                                </Highlight>
                                              </Component>
                                            </DecoratedValue>
                                          </Component>
                                        </TypeSpecificValue>
                                        <span
                                          className="caret"
                                        />
                                      </span>
                                    </OverlayDropdown>
                                  </ValueActions>
                                </Value>
                              </CustomHighlighting>
                            </Provider>
                          </td>
                        </tr>
                      </tbody>
                    </DataTableEntry>
                  </table>
                </Table>
              </MessagesTable__StyledTable>
            </div>
          </MessagesTable__MessagesContainer>
        </MessagesTable>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;
