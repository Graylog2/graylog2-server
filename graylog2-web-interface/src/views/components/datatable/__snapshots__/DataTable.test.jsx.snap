// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataTable renders column pivot header without offset when rollup is disabled 1`] = `
<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [
        Object {
          "config": Object {
            "limit": 15,
          },
          "field": "nf_proto_name",
          "type": "values",
        },
      ],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": false,
      "row_pivots": Array [],
      "series": Array [
        Object {
          "config": Object {
            "name": null,
          },
          "function": "count()",
        },
      ],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={
    Object {
      "chart": Array [
        Object {
          "key": Array [],
          "source": "leaf",
          "values": Array [
            Object {
              "key": Array [
                "TCP",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 239,
            },
            Object {
              "key": Array [
                "UDP",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 226,
            },
          ],
        },
      ],
    }
  }
  fields={Immutable.List []}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [
          Object {
            "config": Object {
              "limit": 15,
            },
            "field": "nf_proto_name",
            "type": "values",
          },
        ],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": false,
        "row_pivots": Array [],
        "series": Array [
          Object {
            "config": Object {
              "name": null,
            },
            "function": "count()",
          },
        ],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={
      Object {
        "chart": Array [
          Object {
            "key": Array [],
            "source": "leaf",
            "values": Array [
              Object {
                "key": Array [
                  "TCP",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 239,
              },
              Object {
                "key": Array [
                  "UDP",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 226,
              },
            ],
          },
        ],
      }
    }
    fields={Immutable.List []}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <div
          className="messages-container"
        >
          <table
            className="table table-condensed messages"
          >
            <thead>
              <Headers
                activeQuery="deadbeef-23"
                actualColumnPivotFields={
                  Array [
                    Array [
                      "TCP",
                    ],
                    Array [
                      "UDP",
                    ],
                  ]
                }
                columnPivots={
                  Array [
                    Object {
                      "config": Object {
                        "limit": 15,
                      },
                      "field": "nf_proto_name",
                      "type": "values",
                    },
                  ]
                }
                fields={Immutable.List []}
                rollup={false}
                rowPivots={Array []}
                series={
                  Array [
                    Object {
                      "config": Object {
                        "name": null,
                      },
                      "function": "count()",
                    },
                  ]
                }
              >
                <tr
                  key="header-table-row-nf_proto_name"
                >
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="nf_proto_name-TCP"
                  >
                    <Value
                      field="nf_proto_name"
                      queryId="deadbeef-23"
                      render={[Function]}
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "unknown",
                            "properties": Immutable.Set [],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                      value="TCP"
                    >
                      <ValueActions
                        element="TCP"
                        field="nf_proto_name"
                        menuContainer={<body />}
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "unknown",
                              "properties": Immutable.Set [],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                        value="TCP"
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle="TCP"
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            TCP
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </ValueActions>
                    </Value>
                  </th>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="nf_proto_name-UDP"
                  >
                    <Value
                      field="nf_proto_name"
                      queryId="deadbeef-23"
                      render={[Function]}
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "unknown",
                            "properties": Immutable.Set [],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                      value="UDP"
                    >
                      <ValueActions
                        element="UDP"
                        field="nf_proto_name"
                        menuContainer={<body />}
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "unknown",
                              "properties": Immutable.Set [],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                        value="UDP"
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle="UDP"
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            UDP
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </ValueActions>
                    </Value>
                  </th>
                </tr>
                <tr>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="TCPcount()"
                  >
                    <Field
                      disabled={false}
                      menuContainer={<body />}
                      name="count()"
                      queryId="deadbeef-23"
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "long",
                            "properties": Immutable.Set [
                              "numeric",
                              "enumerable",
                            ],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                    >
                      <FieldActions
                        disabled={false}
                        element="count()"
                        menuContainer={<body />}
                        name="count()"
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "long",
                              "properties": Immutable.Set [
                                "numeric",
                                "enumerable",
                              ],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle={
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                          }
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </FieldActions>
                    </Field>
                  </th>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="UDPcount()"
                  >
                    <Field
                      disabled={false}
                      menuContainer={<body />}
                      name="count()"
                      queryId="deadbeef-23"
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "long",
                            "properties": Immutable.Set [
                              "numeric",
                              "enumerable",
                            ],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                    >
                      <FieldActions
                        disabled={false}
                        element="count()"
                        menuContainer={<body />}
                        name="count()"
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "long",
                              "properties": Immutable.Set [
                                "numeric",
                                "enumerable",
                              ],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle={
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                          }
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </FieldActions>
                    </Field>
                  </th>
                </tr>
              </Headers>
            </thead>
            <DataTableEntry
              columnPivotValues={
                Array [
                  Array [
                    "TCP",
                  ],
                  Array [
                    "UDP",
                  ],
                ]
              }
              columnPivots={
                Array [
                  "nf_proto_name",
                ]
              }
              currentView={
                Object {
                  "activeQuery": "deadbeef-23",
                }
              }
              fields={Immutable.OrderedSet []}
              item={
                Object {
                  "nf_proto_name": Object {
                    "TCP": Object {
                      "count()": 239,
                    },
                    "UDP": Object {
                      "count()": 226,
                    },
                  },
                }
              }
              key="datatableentry-0"
              series={
                Array [
                  Object {
                    "config": Object {
                      "name": null,
                    },
                    "function": "count()",
                  },
                ]
              }
              types={Immutable.List []}
              valuePath={Array []}
            >
              <tbody
                className="message-group"
              >
                <tr
                  className="fields-row"
                >
                  <td
                    key="deadbeef-23-count()=239-0"
                  >
                    <Provider
                      value={
                        Object {
                          "valuePath": Array [
                            Object {
                              "nf_proto_name": "TCP",
                            },
                          ],
                        }
                      }
                    >
                      <ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules
                        field="count()"
                        value={239}
                      >
                        <CustomHighlighting
                          field="count()"
                          highlightingRules={Object {}}
                          value={239}
                        >
                          <Value
                            field="count()"
                            queryId="deadbeef-23"
                            render={[Function]}
                            type={
                              FieldType {
                                "value": Immutable.Map {
                                  "type": "long",
                                  "properties": Immutable.Set [
                                    "numeric",
                                    "enumerable",
                                  ],
                                  "indexNames": Immutable.Set [],
                                },
                              }
                            }
                            value={239}
                          >
                            <ValueActions
                              element={
                                <TypeSpecificValue
                                  field="count()"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={239}
                                />
                              }
                              field="count()"
                              menuContainer={<body />}
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value={239}
                            >
                              <OverlayDropdown
                                menuContainer={<body />}
                                onToggle={[Function]}
                                placement="right"
                                show={false}
                                toggle={
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={239}
                                  />
                                }
                              >
                                <span
                                  className="dropdowntoggle"
                                  onClick={[Function]}
                                  role="presentation"
                                >
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={239}
                                  >
                                    <Component
                                      field="count()"
                                      type={
                                        FieldType {
                                          "value": Immutable.Map {
                                            "type": "long",
                                            "properties": Immutable.Set [
                                              "numeric",
                                              "enumerable",
                                            ],
                                            "indexNames": Immutable.Set [],
                                          },
                                        }
                                      }
                                      value="239"
                                    >
                                      <DecoratedValue
                                        field="count()"
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="239"
                                      >
                                        <Component
                                          field="count()"
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="239"
                                        >
                                          <Highlight
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="239"
                                          >
                                            <PossiblyHighlight
                                              color="#ffec3d"
                                              field="count()"
                                              highlightRanges={Object {}}
                                              value="239"
                                            >
                                              239
                                            </PossiblyHighlight>
                                          </Highlight>
                                        </Component>
                                      </DecoratedValue>
                                    </Component>
                                  </TypeSpecificValue>
                                  <span
                                    className="caret"
                                  />
                                </span>
                              </OverlayDropdown>
                            </ValueActions>
                          </Value>
                        </CustomHighlighting>
                      </ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules>
                    </Provider>
                  </td>
                  <td
                    key="deadbeef-23-count()=226-1"
                  >
                    <Provider
                      value={
                        Object {
                          "valuePath": Array [
                            Object {
                              "nf_proto_name": "UDP",
                            },
                          ],
                        }
                      }
                    >
                      <ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules
                        field="count()"
                        value={226}
                      >
                        <CustomHighlighting
                          field="count()"
                          highlightingRules={Object {}}
                          value={226}
                        >
                          <Value
                            field="count()"
                            queryId="deadbeef-23"
                            render={[Function]}
                            type={
                              FieldType {
                                "value": Immutable.Map {
                                  "type": "long",
                                  "properties": Immutable.Set [
                                    "numeric",
                                    "enumerable",
                                  ],
                                  "indexNames": Immutable.Set [],
                                },
                              }
                            }
                            value={226}
                          >
                            <ValueActions
                              element={
                                <TypeSpecificValue
                                  field="count()"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={226}
                                />
                              }
                              field="count()"
                              menuContainer={<body />}
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value={226}
                            >
                              <OverlayDropdown
                                menuContainer={<body />}
                                onToggle={[Function]}
                                placement="right"
                                show={false}
                                toggle={
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={226}
                                  />
                                }
                              >
                                <span
                                  className="dropdowntoggle"
                                  onClick={[Function]}
                                  role="presentation"
                                >
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={226}
                                  >
                                    <Component
                                      field="count()"
                                      type={
                                        FieldType {
                                          "value": Immutable.Map {
                                            "type": "long",
                                            "properties": Immutable.Set [
                                              "numeric",
                                              "enumerable",
                                            ],
                                            "indexNames": Immutable.Set [],
                                          },
                                        }
                                      }
                                      value="226"
                                    >
                                      <DecoratedValue
                                        field="count()"
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="226"
                                      >
                                        <Component
                                          field="count()"
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="226"
                                        >
                                          <Highlight
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="226"
                                          >
                                            <PossiblyHighlight
                                              color="#ffec3d"
                                              field="count()"
                                              highlightRanges={Object {}}
                                              value="226"
                                            >
                                              226
                                            </PossiblyHighlight>
                                          </Highlight>
                                        </Component>
                                      </DecoratedValue>
                                    </Component>
                                  </TypeSpecificValue>
                                  <span
                                    className="caret"
                                  />
                                </span>
                              </OverlayDropdown>
                            </ValueActions>
                          </Value>
                        </CustomHighlighting>
                      </ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules>
                    </Provider>
                  </td>
                </tr>
              </tbody>
            </DataTableEntry>
          </table>
        </div>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;

exports[`DataTable should render with empty data 1`] = `
<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": true,
      "row_pivots": Array [],
      "series": Array [],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={Object {}}
  fields={Immutable.List []}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": true,
        "row_pivots": Array [],
        "series": Array [],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={Object {}}
    fields={Immutable.List []}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <div
          className="messages-container"
        >
          <table
            className="table table-condensed messages"
          >
            <thead>
              <Headers
                activeQuery="deadbeef-23"
                actualColumnPivotFields={Array []}
                columnPivots={Array []}
                fields={Immutable.List []}
                rollup={true}
                rowPivots={Array []}
                series={Array []}
              >
                <tr />
              </Headers>
            </thead>
          </table>
        </div>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;

exports[`DataTable should render with filled data with rollup 1`] = `
<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [
        Object {
          "config": Object {
            "limit": 15,
          },
          "field": "source",
          "type": "values",
        },
      ],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": true,
      "row_pivots": Array [
        Object {
          "config": Object {
            "interval": "auto",
          },
          "field": "timestamp",
          "type": "time",
        },
      ],
      "series": Array [
        Object {
          "config": Object {
            "name": null,
          },
          "function": "count()",
        },
      ],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={
    Object {
      "chart": Array [
        Object {
          "key": Array [
            "2018-10-04T09:43:50.000Z",
          ],
          "source": "leaf",
          "values": Array [
            Object {
              "key": Array [
                "hulud.net",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 408,
            },
            Object {
              "key": Array [
                "count()",
              ],
              "rollup": true,
              "source": "row-leaf",
              "value": 408,
            },
          ],
        },
      ],
    }
  }
  fields={Immutable.List []}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [
          Object {
            "config": Object {
              "limit": 15,
            },
            "field": "source",
            "type": "values",
          },
        ],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": true,
        "row_pivots": Array [
          Object {
            "config": Object {
              "interval": "auto",
            },
            "field": "timestamp",
            "type": "time",
          },
        ],
        "series": Array [
          Object {
            "config": Object {
              "name": null,
            },
            "function": "count()",
          },
        ],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={
      Object {
        "chart": Array [
          Object {
            "key": Array [
              "2018-10-04T09:43:50.000Z",
            ],
            "source": "leaf",
            "values": Array [
              Object {
                "key": Array [
                  "hulud.net",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 408,
              },
              Object {
                "key": Array [
                  "count()",
                ],
                "rollup": true,
                "source": "row-leaf",
                "value": 408,
              },
            ],
          },
        ],
      }
    }
    fields={Immutable.List []}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <div
          className="messages-container"
        >
          <table
            className="table table-condensed messages"
          >
            <thead>
              <Headers
                activeQuery="deadbeef-23"
                actualColumnPivotFields={
                  Array [
                    Array [
                      "hulud.net",
                    ],
                  ]
                }
                columnPivots={
                  Array [
                    Object {
                      "config": Object {
                        "limit": 15,
                      },
                      "field": "source",
                      "type": "values",
                    },
                  ]
                }
                fields={Immutable.List []}
                rollup={true}
                rowPivots={
                  Array [
                    Object {
                      "config": Object {
                        "interval": "auto",
                      },
                      "field": "timestamp",
                      "type": "time",
                    },
                  ]
                }
                series={
                  Array [
                    Object {
                      "config": Object {
                        "name": null,
                      },
                      "function": "count()",
                    },
                  ]
                }
              >
                <tr
                  key="header-table-row-source"
                >
                  <th
                    className="leftAligned"
                    colSpan={2}
                    key="spacer-1"
                  />
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="source-hulud.net"
                  >
                    <Value
                      field="source"
                      queryId="deadbeef-23"
                      render={[Function]}
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "unknown",
                            "properties": Immutable.Set [],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                      value="hulud.net"
                    >
                      <ValueActions
                        element="hulud.net"
                        field="source"
                        menuContainer={<body />}
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "unknown",
                              "properties": Immutable.Set [],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                        value="hulud.net"
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle="hulud.net"
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            hulud.net
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </ValueActions>
                    </Value>
                  </th>
                </tr>
                <tr>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="timestamp"
                  >
                    <Field
                      disabled={false}
                      menuContainer={<body />}
                      name="timestamp"
                      queryId="deadbeef-23"
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "unknown",
                            "properties": Immutable.Set [],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                    >
                      <FieldActions
                        disabled={false}
                        element="timestamp"
                        menuContainer={<body />}
                        name="timestamp"
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "unknown",
                              "properties": Immutable.Set [],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle={
                            <span
                              className="field-element  "
                            >
                              timestamp
                            </span>
                          }
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            <span
                              className="field-element  "
                            >
                              timestamp
                            </span>
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </FieldActions>
                    </Field>
                  </th>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="count()"
                  >
                    <Field
                      disabled={false}
                      menuContainer={<body />}
                      name="count()"
                      queryId="deadbeef-23"
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "long",
                            "properties": Immutable.Set [
                              "numeric",
                              "enumerable",
                            ],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                    >
                      <FieldActions
                        disabled={false}
                        element="count()"
                        menuContainer={<body />}
                        name="count()"
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "long",
                              "properties": Immutable.Set [
                                "numeric",
                                "enumerable",
                              ],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle={
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                          }
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </FieldActions>
                    </Field>
                  </th>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="hulud.netcount()"
                  >
                    <Field
                      disabled={false}
                      menuContainer={<body />}
                      name="count()"
                      queryId="deadbeef-23"
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "long",
                            "properties": Immutable.Set [
                              "numeric",
                              "enumerable",
                            ],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                    >
                      <FieldActions
                        disabled={false}
                        element="count()"
                        menuContainer={<body />}
                        name="count()"
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "long",
                              "properties": Immutable.Set [
                                "numeric",
                                "enumerable",
                              ],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle={
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                          }
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </FieldActions>
                    </Field>
                  </th>
                </tr>
              </Headers>
            </thead>
            <DataTableEntry
              columnPivotValues={
                Array [
                  Array [
                    "hulud.net",
                  ],
                ]
              }
              columnPivots={
                Array [
                  "source",
                ]
              }
              currentView={
                Object {
                  "activeQuery": "deadbeef-23",
                }
              }
              fields={
                Immutable.OrderedSet [
                  "timestamp",
                  "count()",
                ]
              }
              item={
                Object {
                  "count()": 408,
                  "source": Object {
                    "hulud.net": Object {
                      "count()": 408,
                    },
                  },
                  "timestamp": "2018-10-04T09:43:50.000Z",
                }
              }
              key="datatableentry-0"
              series={
                Array [
                  Object {
                    "config": Object {
                      "name": null,
                    },
                    "function": "count()",
                  },
                ]
              }
              types={Immutable.List []}
              valuePath={
                Array [
                  Object {
                    "timestamp": "2018-10-04T09:43:50.000Z",
                  },
                ]
              }
            >
              <tbody
                className="message-group"
              >
                <tr
                  className="fields-row"
                >
                  <td
                    key="deadbeef-23-timestamp=2018-10-04T09:43:50.000Z-0"
                  >
                    <Provider
                      value={
                        Object {
                          "valuePath": Array [
                            Object {
                              "timestamp": "2018-10-04T09:43:50.000Z",
                            },
                          ],
                        }
                      }
                    >
                      <ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules
                        field="timestamp"
                        value="2018-10-04T09:43:50.000Z"
                      >
                        <CustomHighlighting
                          field="timestamp"
                          highlightingRules={Object {}}
                          value="2018-10-04T09:43:50.000Z"
                        >
                          <Value
                            field="timestamp"
                            queryId="deadbeef-23"
                            render={[Function]}
                            type={
                              FieldType {
                                "value": Immutable.Map {
                                  "type": "unknown",
                                  "properties": Immutable.Set [],
                                  "indexNames": Immutable.Set [],
                                },
                              }
                            }
                            value="2018-10-04T09:43:50.000Z"
                          >
                            <ValueActions
                              element={
                                <TypeSpecificValue
                                  field="timestamp"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "unknown",
                                        "properties": Immutable.Set [],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value="2018-10-04T09:43:50.000Z"
                                />
                              }
                              field="timestamp"
                              menuContainer={<body />}
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value="2018-10-04T09:43:50.000Z"
                            >
                              <OverlayDropdown
                                menuContainer={<body />}
                                onToggle={[Function]}
                                placement="right"
                                show={false}
                                toggle={
                                  <TypeSpecificValue
                                    field="timestamp"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "unknown",
                                          "properties": Immutable.Set [],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value="2018-10-04T09:43:50.000Z"
                                  />
                                }
                              >
                                <span
                                  className="dropdowntoggle"
                                  onClick={[Function]}
                                  role="presentation"
                                >
                                  <TypeSpecificValue
                                    field="timestamp"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "unknown",
                                          "properties": Immutable.Set [],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value="2018-10-04T09:43:50.000Z"
                                  >
                                    <Component
                                      field="timestamp"
                                      type={
                                        FieldType {
                                          "value": Immutable.Map {
                                            "type": "unknown",
                                            "properties": Immutable.Set [],
                                            "indexNames": Immutable.Set [],
                                          },
                                        }
                                      }
                                      value="2018-10-04T09:43:50.000Z"
                                    >
                                      <DecoratedValue
                                        field="timestamp"
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "unknown",
                                              "properties": Immutable.Set [],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="2018-10-04T09:43:50.000Z"
                                      >
                                        <Component
                                          field="timestamp"
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "unknown",
                                                "properties": Immutable.Set [],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="2018-10-04T09:43:50.000Z"
                                        >
                                          <Highlight
                                            field="timestamp"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "unknown",
                                                  "properties": Immutable.Set [],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="2018-10-04T09:43:50.000Z"
                                          >
                                            <PossiblyHighlight
                                              color="#ffec3d"
                                              field="timestamp"
                                              highlightRanges={Object {}}
                                              value="2018-10-04T09:43:50.000Z"
                                            >
                                              2018-10-04T09:43:50.000Z
                                            </PossiblyHighlight>
                                          </Highlight>
                                        </Component>
                                      </DecoratedValue>
                                    </Component>
                                  </TypeSpecificValue>
                                  <span
                                    className="caret"
                                  />
                                </span>
                              </OverlayDropdown>
                            </ValueActions>
                          </Value>
                        </CustomHighlighting>
                      </ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules>
                    </Provider>
                  </td>
                  <td
                    key="deadbeef-23-count()=408-1"
                  >
                    <Provider
                      value={
                        Object {
                          "valuePath": Array [
                            Object {
                              "timestamp": "2018-10-04T09:43:50.000Z",
                            },
                          ],
                        }
                      }
                    >
                      <ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules
                        field="count()"
                        value={408}
                      >
                        <CustomHighlighting
                          field="count()"
                          highlightingRules={Object {}}
                          value={408}
                        >
                          <Value
                            field="count()"
                            queryId="deadbeef-23"
                            render={[Function]}
                            type={
                              FieldType {
                                "value": Immutable.Map {
                                  "type": "long",
                                  "properties": Immutable.Set [
                                    "numeric",
                                    "enumerable",
                                  ],
                                  "indexNames": Immutable.Set [],
                                },
                              }
                            }
                            value={408}
                          >
                            <ValueActions
                              element={
                                <TypeSpecificValue
                                  field="count()"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={408}
                                />
                              }
                              field="count()"
                              menuContainer={<body />}
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value={408}
                            >
                              <OverlayDropdown
                                menuContainer={<body />}
                                onToggle={[Function]}
                                placement="right"
                                show={false}
                                toggle={
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  />
                                }
                              >
                                <span
                                  className="dropdowntoggle"
                                  onClick={[Function]}
                                  role="presentation"
                                >
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  >
                                    <Component
                                      field="count()"
                                      type={
                                        FieldType {
                                          "value": Immutable.Map {
                                            "type": "long",
                                            "properties": Immutable.Set [
                                              "numeric",
                                              "enumerable",
                                            ],
                                            "indexNames": Immutable.Set [],
                                          },
                                        }
                                      }
                                      value="408"
                                    >
                                      <DecoratedValue
                                        field="count()"
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="408"
                                      >
                                        <Component
                                          field="count()"
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="408"
                                        >
                                          <Highlight
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="408"
                                          >
                                            <PossiblyHighlight
                                              color="#ffec3d"
                                              field="count()"
                                              highlightRanges={Object {}}
                                              value="408"
                                            >
                                              408
                                            </PossiblyHighlight>
                                          </Highlight>
                                        </Component>
                                      </DecoratedValue>
                                    </Component>
                                  </TypeSpecificValue>
                                  <span
                                    className="caret"
                                  />
                                </span>
                              </OverlayDropdown>
                            </ValueActions>
                          </Value>
                        </CustomHighlighting>
                      </ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules>
                    </Provider>
                  </td>
                  <td
                    key="deadbeef-23-count()=408-2"
                  >
                    <Provider
                      value={
                        Object {
                          "valuePath": Array [
                            Object {
                              "timestamp": "2018-10-04T09:43:50.000Z",
                            },
                            Object {
                              "source": "hulud.net",
                            },
                          ],
                        }
                      }
                    >
                      <ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules
                        field="count()"
                        value={408}
                      >
                        <CustomHighlighting
                          field="count()"
                          highlightingRules={Object {}}
                          value={408}
                        >
                          <Value
                            field="count()"
                            queryId="deadbeef-23"
                            render={[Function]}
                            type={
                              FieldType {
                                "value": Immutable.Map {
                                  "type": "long",
                                  "properties": Immutable.Set [
                                    "numeric",
                                    "enumerable",
                                  ],
                                  "indexNames": Immutable.Set [],
                                },
                              }
                            }
                            value={408}
                          >
                            <ValueActions
                              element={
                                <TypeSpecificValue
                                  field="count()"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={408}
                                />
                              }
                              field="count()"
                              menuContainer={<body />}
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value={408}
                            >
                              <OverlayDropdown
                                menuContainer={<body />}
                                onToggle={[Function]}
                                placement="right"
                                show={false}
                                toggle={
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  />
                                }
                              >
                                <span
                                  className="dropdowntoggle"
                                  onClick={[Function]}
                                  role="presentation"
                                >
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  >
                                    <Component
                                      field="count()"
                                      type={
                                        FieldType {
                                          "value": Immutable.Map {
                                            "type": "long",
                                            "properties": Immutable.Set [
                                              "numeric",
                                              "enumerable",
                                            ],
                                            "indexNames": Immutable.Set [],
                                          },
                                        }
                                      }
                                      value="408"
                                    >
                                      <DecoratedValue
                                        field="count()"
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="408"
                                      >
                                        <Component
                                          field="count()"
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="408"
                                        >
                                          <Highlight
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="408"
                                          >
                                            <PossiblyHighlight
                                              color="#ffec3d"
                                              field="count()"
                                              highlightRanges={Object {}}
                                              value="408"
                                            >
                                              408
                                            </PossiblyHighlight>
                                          </Highlight>
                                        </Component>
                                      </DecoratedValue>
                                    </Component>
                                  </TypeSpecificValue>
                                  <span
                                    className="caret"
                                  />
                                </span>
                              </OverlayDropdown>
                            </ValueActions>
                          </Value>
                        </CustomHighlighting>
                      </ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules>
                    </Provider>
                  </td>
                </tr>
              </tbody>
            </DataTableEntry>
          </table>
        </div>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;

exports[`DataTable should render with filled data without rollup 1`] = `
<ConnectStoresWrapper[DataTable] stores=currentView
  config={
    Object {
      "column_pivots": Array [
        Object {
          "config": Object {
            "limit": 15,
          },
          "field": "source",
          "type": "values",
        },
      ],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": false,
      "row_pivots": Array [
        Object {
          "config": Object {
            "interval": "auto",
          },
          "field": "timestamp",
          "type": "time",
        },
      ],
      "series": Array [
        Object {
          "config": Object {
            "name": null,
          },
          "function": "count()",
        },
      ],
      "sort": Array [],
      "visualization": "table",
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "deadbeef-23",
    }
  }
  data={
    Object {
      "chart": Array [
        Object {
          "key": Array [
            "2018-10-04T09:43:50.000Z",
          ],
          "source": "leaf",
          "values": Array [
            Object {
              "key": Array [
                "hulud.net",
                "count()",
              ],
              "rollup": false,
              "source": "col-leaf",
              "value": 408,
            },
            Object {
              "key": Array [
                "count()",
              ],
              "rollup": true,
              "source": "row-leaf",
              "value": 408,
            },
          ],
        },
      ],
    }
  }
  fields={Immutable.List []}
>
  <DataTable
    config={
      Object {
        "column_pivots": Array [
          Object {
            "config": Object {
              "limit": 15,
            },
            "field": "source",
            "type": "values",
          },
        ],
        "event_annotation": false,
        "formatting_settings": undefined,
        "rollup": false,
        "row_pivots": Array [
          Object {
            "config": Object {
              "interval": "auto",
            },
            "field": "timestamp",
            "type": "time",
          },
        ],
        "series": Array [
          Object {
            "config": Object {
              "name": null,
            },
            "function": "count()",
          },
        ],
        "sort": Array [],
        "visualization": "table",
        "visualization_config": undefined,
      }
    }
    currentView={
      Object {
        "activeQuery": "deadbeef-23",
      }
    }
    data={
      Object {
        "chart": Array [
          Object {
            "key": Array [
              "2018-10-04T09:43:50.000Z",
            ],
            "source": "leaf",
            "values": Array [
              Object {
                "key": Array [
                  "hulud.net",
                  "count()",
                ],
                "rollup": false,
                "source": "col-leaf",
                "value": 408,
              },
              Object {
                "key": Array [
                  "count()",
                ],
                "rollup": true,
                "source": "row-leaf",
                "value": 408,
              },
            ],
          },
        ],
      }
    }
    fields={Immutable.List []}
  >
    <div
      className="container"
    >
      <div
        className="scrollContainer"
      >
        <div
          className="messages-container"
        >
          <table
            className="table table-condensed messages"
          >
            <thead>
              <Headers
                activeQuery="deadbeef-23"
                actualColumnPivotFields={
                  Array [
                    Array [
                      "hulud.net",
                    ],
                  ]
                }
                columnPivots={
                  Array [
                    Object {
                      "config": Object {
                        "limit": 15,
                      },
                      "field": "source",
                      "type": "values",
                    },
                  ]
                }
                fields={Immutable.List []}
                rollup={false}
                rowPivots={
                  Array [
                    Object {
                      "config": Object {
                        "interval": "auto",
                      },
                      "field": "timestamp",
                      "type": "time",
                    },
                  ]
                }
                series={
                  Array [
                    Object {
                      "config": Object {
                        "name": null,
                      },
                      "function": "count()",
                    },
                  ]
                }
              >
                <tr
                  key="header-table-row-source"
                >
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="spacer-1"
                  />
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="source-hulud.net"
                  >
                    <Value
                      field="source"
                      queryId="deadbeef-23"
                      render={[Function]}
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "unknown",
                            "properties": Immutable.Set [],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                      value="hulud.net"
                    >
                      <ValueActions
                        element="hulud.net"
                        field="source"
                        menuContainer={<body />}
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "unknown",
                              "properties": Immutable.Set [],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                        value="hulud.net"
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle="hulud.net"
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            hulud.net
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </ValueActions>
                    </Value>
                  </th>
                </tr>
                <tr>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="timestamp"
                  >
                    <Field
                      disabled={false}
                      menuContainer={<body />}
                      name="timestamp"
                      queryId="deadbeef-23"
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "unknown",
                            "properties": Immutable.Set [],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                    >
                      <FieldActions
                        disabled={false}
                        element="timestamp"
                        menuContainer={<body />}
                        name="timestamp"
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "unknown",
                              "properties": Immutable.Set [],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle={
                            <span
                              className="field-element  "
                            >
                              timestamp
                            </span>
                          }
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            <span
                              className="field-element  "
                            >
                              timestamp
                            </span>
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </FieldActions>
                    </Field>
                  </th>
                  <th
                    className="leftAligned"
                    colSpan={1}
                    key="hulud.netcount()"
                  >
                    <Field
                      disabled={false}
                      menuContainer={<body />}
                      name="count()"
                      queryId="deadbeef-23"
                      type={
                        FieldType {
                          "value": Immutable.Map {
                            "type": "long",
                            "properties": Immutable.Set [
                              "numeric",
                              "enumerable",
                            ],
                            "indexNames": Immutable.Set [],
                          },
                        }
                      }
                    >
                      <FieldActions
                        disabled={false}
                        element="count()"
                        menuContainer={<body />}
                        name="count()"
                        queryId="deadbeef-23"
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "long",
                              "properties": Immutable.Set [
                                "numeric",
                                "enumerable",
                              ],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                      >
                        <OverlayDropdown
                          menuContainer={<body />}
                          onToggle={[Function]}
                          placement="right"
                          show={false}
                          toggle={
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                          }
                        >
                          <span
                            className="dropdowntoggle"
                            onClick={[Function]}
                            role="presentation"
                          >
                            <span
                              className="field-element  "
                            >
                              count()
                            </span>
                            <span
                              className="caret"
                            />
                          </span>
                        </OverlayDropdown>
                      </FieldActions>
                    </Field>
                  </th>
                </tr>
              </Headers>
            </thead>
            <DataTableEntry
              columnPivotValues={
                Array [
                  Array [
                    "hulud.net",
                  ],
                ]
              }
              columnPivots={
                Array [
                  "source",
                ]
              }
              currentView={
                Object {
                  "activeQuery": "deadbeef-23",
                }
              }
              fields={
                Immutable.OrderedSet [
                  "timestamp",
                ]
              }
              item={
                Object {
                  "count()": 408,
                  "source": Object {
                    "hulud.net": Object {
                      "count()": 408,
                    },
                  },
                  "timestamp": "2018-10-04T09:43:50.000Z",
                }
              }
              key="datatableentry-0"
              series={
                Array [
                  Object {
                    "config": Object {
                      "name": null,
                    },
                    "function": "count()",
                  },
                ]
              }
              types={Immutable.List []}
              valuePath={
                Array [
                  Object {
                    "timestamp": "2018-10-04T09:43:50.000Z",
                  },
                ]
              }
            >
              <tbody
                className="message-group"
              >
                <tr
                  className="fields-row"
                >
                  <td
                    key="deadbeef-23-timestamp=2018-10-04T09:43:50.000Z-0"
                  >
                    <Provider
                      value={
                        Object {
                          "valuePath": Array [
                            Object {
                              "timestamp": "2018-10-04T09:43:50.000Z",
                            },
                          ],
                        }
                      }
                    >
                      <ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules
                        field="timestamp"
                        value="2018-10-04T09:43:50.000Z"
                      >
                        <CustomHighlighting
                          field="timestamp"
                          highlightingRules={Object {}}
                          value="2018-10-04T09:43:50.000Z"
                        >
                          <Value
                            field="timestamp"
                            queryId="deadbeef-23"
                            render={[Function]}
                            type={
                              FieldType {
                                "value": Immutable.Map {
                                  "type": "unknown",
                                  "properties": Immutable.Set [],
                                  "indexNames": Immutable.Set [],
                                },
                              }
                            }
                            value="2018-10-04T09:43:50.000Z"
                          >
                            <ValueActions
                              element={
                                <TypeSpecificValue
                                  field="timestamp"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "unknown",
                                        "properties": Immutable.Set [],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value="2018-10-04T09:43:50.000Z"
                                />
                              }
                              field="timestamp"
                              menuContainer={<body />}
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "unknown",
                                    "properties": Immutable.Set [],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value="2018-10-04T09:43:50.000Z"
                            >
                              <OverlayDropdown
                                menuContainer={<body />}
                                onToggle={[Function]}
                                placement="right"
                                show={false}
                                toggle={
                                  <TypeSpecificValue
                                    field="timestamp"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "unknown",
                                          "properties": Immutable.Set [],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value="2018-10-04T09:43:50.000Z"
                                  />
                                }
                              >
                                <span
                                  className="dropdowntoggle"
                                  onClick={[Function]}
                                  role="presentation"
                                >
                                  <TypeSpecificValue
                                    field="timestamp"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "unknown",
                                          "properties": Immutable.Set [],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value="2018-10-04T09:43:50.000Z"
                                  >
                                    <Component
                                      field="timestamp"
                                      type={
                                        FieldType {
                                          "value": Immutable.Map {
                                            "type": "unknown",
                                            "properties": Immutable.Set [],
                                            "indexNames": Immutable.Set [],
                                          },
                                        }
                                      }
                                      value="2018-10-04T09:43:50.000Z"
                                    >
                                      <DecoratedValue
                                        field="timestamp"
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "unknown",
                                              "properties": Immutable.Set [],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="2018-10-04T09:43:50.000Z"
                                      >
                                        <Component
                                          field="timestamp"
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "unknown",
                                                "properties": Immutable.Set [],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="2018-10-04T09:43:50.000Z"
                                        >
                                          <Highlight
                                            field="timestamp"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "unknown",
                                                  "properties": Immutable.Set [],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="2018-10-04T09:43:50.000Z"
                                          >
                                            <PossiblyHighlight
                                              color="#ffec3d"
                                              field="timestamp"
                                              highlightRanges={Object {}}
                                              value="2018-10-04T09:43:50.000Z"
                                            >
                                              2018-10-04T09:43:50.000Z
                                            </PossiblyHighlight>
                                          </Highlight>
                                        </Component>
                                      </DecoratedValue>
                                    </Component>
                                  </TypeSpecificValue>
                                  <span
                                    className="caret"
                                  />
                                </span>
                              </OverlayDropdown>
                            </ValueActions>
                          </Value>
                        </CustomHighlighting>
                      </ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules>
                    </Provider>
                  </td>
                  <td
                    key="deadbeef-23-count()=408-1"
                  >
                    <Provider
                      value={
                        Object {
                          "valuePath": Array [
                            Object {
                              "timestamp": "2018-10-04T09:43:50.000Z",
                            },
                            Object {
                              "source": "hulud.net",
                            },
                          ],
                        }
                      }
                    >
                      <ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules
                        field="count()"
                        value={408}
                      >
                        <CustomHighlighting
                          field="count()"
                          highlightingRules={Object {}}
                          value={408}
                        >
                          <Value
                            field="count()"
                            queryId="deadbeef-23"
                            render={[Function]}
                            type={
                              FieldType {
                                "value": Immutable.Map {
                                  "type": "long",
                                  "properties": Immutable.Set [
                                    "numeric",
                                    "enumerable",
                                  ],
                                  "indexNames": Immutable.Set [],
                                },
                              }
                            }
                            value={408}
                          >
                            <ValueActions
                              element={
                                <TypeSpecificValue
                                  field="count()"
                                  render={[Function]}
                                  type={
                                    FieldType {
                                      "value": Immutable.Map {
                                        "type": "long",
                                        "properties": Immutable.Set [
                                          "numeric",
                                          "enumerable",
                                        ],
                                        "indexNames": Immutable.Set [],
                                      },
                                    }
                                  }
                                  value={408}
                                />
                              }
                              field="count()"
                              menuContainer={<body />}
                              queryId="deadbeef-23"
                              type={
                                FieldType {
                                  "value": Immutable.Map {
                                    "type": "long",
                                    "properties": Immutable.Set [
                                      "numeric",
                                      "enumerable",
                                    ],
                                    "indexNames": Immutable.Set [],
                                  },
                                }
                              }
                              value={408}
                            >
                              <OverlayDropdown
                                menuContainer={<body />}
                                onToggle={[Function]}
                                placement="right"
                                show={false}
                                toggle={
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  />
                                }
                              >
                                <span
                                  className="dropdowntoggle"
                                  onClick={[Function]}
                                  role="presentation"
                                >
                                  <TypeSpecificValue
                                    field="count()"
                                    render={[Function]}
                                    type={
                                      FieldType {
                                        "value": Immutable.Map {
                                          "type": "long",
                                          "properties": Immutable.Set [
                                            "numeric",
                                            "enumerable",
                                          ],
                                          "indexNames": Immutable.Set [],
                                        },
                                      }
                                    }
                                    value={408}
                                  >
                                    <Component
                                      field="count()"
                                      type={
                                        FieldType {
                                          "value": Immutable.Map {
                                            "type": "long",
                                            "properties": Immutable.Set [
                                              "numeric",
                                              "enumerable",
                                            ],
                                            "indexNames": Immutable.Set [],
                                          },
                                        }
                                      }
                                      value="408"
                                    >
                                      <DecoratedValue
                                        field="count()"
                                        type={
                                          FieldType {
                                            "value": Immutable.Map {
                                              "type": "long",
                                              "properties": Immutable.Set [
                                                "numeric",
                                                "enumerable",
                                              ],
                                              "indexNames": Immutable.Set [],
                                            },
                                          }
                                        }
                                        value="408"
                                      >
                                        <Component
                                          field="count()"
                                          type={
                                            FieldType {
                                              "value": Immutable.Map {
                                                "type": "long",
                                                "properties": Immutable.Set [
                                                  "numeric",
                                                  "enumerable",
                                                ],
                                                "indexNames": Immutable.Set [],
                                              },
                                            }
                                          }
                                          value="408"
                                        >
                                          <Highlight
                                            field="count()"
                                            type={
                                              FieldType {
                                                "value": Immutable.Map {
                                                  "type": "long",
                                                  "properties": Immutable.Set [
                                                    "numeric",
                                                    "enumerable",
                                                  ],
                                                  "indexNames": Immutable.Set [],
                                                },
                                              }
                                            }
                                            value="408"
                                          >
                                            <PossiblyHighlight
                                              color="#ffec3d"
                                              field="count()"
                                              highlightRanges={Object {}}
                                              value="408"
                                            >
                                              408
                                            </PossiblyHighlight>
                                          </Highlight>
                                        </Component>
                                      </DecoratedValue>
                                    </Component>
                                  </TypeSpecificValue>
                                  <span
                                    className="caret"
                                  />
                                </span>
                              </OverlayDropdown>
                            </ValueActions>
                          </Value>
                        </CustomHighlighting>
                      </ConnectStoresWrapper[CustomHighlighting] stores=highlightingRules>
                    </Provider>
                  </td>
                </tr>
              </tbody>
            </DataTableEntry>
          </table>
        </div>
      </div>
    </div>
  </DataTable>
</ConnectStoresWrapper[DataTable] stores=currentView>
`;
