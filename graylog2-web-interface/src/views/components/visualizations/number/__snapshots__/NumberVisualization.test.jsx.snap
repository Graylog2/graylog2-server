// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NumberVisualization should render a number visualization 1`] = `
.c0 {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  grid-column-gap: 0;
  grid-row-gap: 0;
  height: 100%;
  width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: 100%;
  width: 100%;
  text-align: center;
  padding-bottom: 10px;
}

<NumberVisualization
  config={
    Object {
      "column_pivots": Array [],
      "event_annotation": false,
      "formatting_settings": undefined,
      "rollup": true,
      "row_pivots": Array [],
      "series": Array [],
      "sort": Array [],
      "visualization": undefined,
      "visualization_config": undefined,
    }
  }
  currentView={
    Object {
      "activeQuery": "dead-beef",
    }
  }
  data={
    Object {
      "chart": Array [
        Object {
          "key": Array [],
          "source": "leaf",
          "values": Array [
            Object {
              "key": Array [
                "sum(lines_add)",
              ],
              "rollup": true,
              "source": "row-leaf",
              "value": 2134342,
            },
          ],
        },
      ],
    }
  }
  effectiveTimerange={
    Object {
      "range": 300,
      "type": "relative",
    }
  }
  fields={
    Immutable.List [
      FieldTypeMapping {
        "value": Object {
          "name": "lines_add",
          "type": FieldType {
            "value": Immutable.Map {
              "type": "int",
              "properties": Immutable.Set [
                "numeric",
                "enumerable",
              ],
              "indexNames": Immutable.Set [],
            },
          },
        },
      },
    ]
  }
  height={200}
  onChange={[Function]}
  toggleEdit={[Function]}
  width={200}
>
  <NumberVisualization__SingleItemGrid>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "NumberVisualization__SingleItemGrid-lb6dwm-1",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "display:grid;grid-template-columns:1fr;grid-template-rows:1fr;grid-column-gap:0;grid-row-gap:0;height:100%;width:100%;",
            ],
          },
          "displayName": "NumberVisualization__SingleItemGrid",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "NumberVisualization__SingleItemGrid-lb6dwm-1",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c0"
      >
        <NumberVisualization__NumberBox>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "NumberVisualization__NumberBox-lb6dwm-2",
                  "isStatic": false,
                  "lastClassName": "c1",
                  "rules": Array [
                    "display:flex;justify-content:center;align-items:center;height:100%;width:100%;text-align:center;padding-bottom:10px;",
                  ],
                },
                "displayName": "NumberVisualization__NumberBox",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "NumberVisualization__NumberBox-lb6dwm-2",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c1"
            >
              <SizeMe
                monitorHeight={true}
                monitorWidth={true}
              >
                <Component
                  height={240}
                  width={320}
                >
                  <Component
                    field="sum(lines_add)"
                    value={2134342}
                  >
                    <div>
                      <Component
                        field="sum(lines_add)"
                        queryId="dead-beef"
                        render={[Function]}
                        type={
                          FieldType {
                            "value": Immutable.Map {
                              "type": "float",
                              "properties": Immutable.Set [
                                "numeric",
                                "enumerable",
                              ],
                              "indexNames": Immutable.Set [],
                            },
                          }
                        }
                        value={2134342}
                      >
                        <div>
                          2134342
                        </div>
                      </Component>
                    </div>
                  </Component>
                </Component>
              </SizeMe>
            </div>
          </StyledComponent>
        </NumberVisualization__NumberBox>
      </div>
    </StyledComponent>
  </NumberVisualization__SingleItemGrid>
</NumberVisualization>
`;
