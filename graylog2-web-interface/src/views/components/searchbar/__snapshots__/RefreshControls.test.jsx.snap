// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RefreshControls rendering it renders refresh controlls with enabled: false and interval: 1000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": false,
      "interval": 1000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": false,
        "interval": 1000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="play"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "play",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-play"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    Not updating
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      Not updating
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Not updating
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: false and interval: 300000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": false,
      "interval": 300000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": false,
        "interval": 300000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="play"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "play",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-play"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    Not updating
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      Not updating
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Not updating
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: true and interval: 1000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": true,
      "interval": 1000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": true,
        "interval": 1000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="pause"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "pause",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-pause"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    <React.Fragment>
                      Update every 
                      <span>
                        1
                         
                        <Pluralize
                          plural="seconds"
                          singular="second"
                          value={1}
                        />
                      </span>
                    </React.Fragment>
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      <React.Fragment>
                        Update every 
                        <span>
                          1
                           
                          <Pluralize
                            plural="seconds"
                            singular="second"
                            value={1}
                          />
                        </span>
                      </React.Fragment>
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Update every 
                                      <span>
                                        1
                                         
                                        <Pluralize
                                          plural="seconds"
                                          singular="second"
                                          value={1}
                                        >
                                          <span>
                                            second
                                          </span>
                                        </Pluralize>
                                      </span>
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: true and interval: 2000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": true,
      "interval": 2000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": true,
        "interval": 2000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="pause"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "pause",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-pause"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    <React.Fragment>
                      Update every 
                      <span>
                        2
                         
                        <Pluralize
                          plural="seconds"
                          singular="second"
                          value={2}
                        />
                      </span>
                    </React.Fragment>
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      <React.Fragment>
                        Update every 
                        <span>
                          2
                           
                          <Pluralize
                            plural="seconds"
                            singular="second"
                            value={2}
                          />
                        </span>
                      </React.Fragment>
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Update every 
                                      <span>
                                        2
                                         
                                        <Pluralize
                                          plural="seconds"
                                          singular="second"
                                          value={2}
                                        >
                                          <span>
                                            seconds
                                          </span>
                                        </Pluralize>
                                      </span>
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: true and interval: 5000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": true,
      "interval": 5000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": true,
        "interval": 5000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="pause"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "pause",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-pause"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    <React.Fragment>
                      Update every 
                      <span>
                        5
                         
                        <Pluralize
                          plural="seconds"
                          singular="second"
                          value={5}
                        />
                      </span>
                    </React.Fragment>
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      <React.Fragment>
                        Update every 
                        <span>
                          5
                           
                          <Pluralize
                            plural="seconds"
                            singular="second"
                            value={5}
                          />
                        </span>
                      </React.Fragment>
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Update every 
                                      <span>
                                        5
                                         
                                        <Pluralize
                                          plural="seconds"
                                          singular="second"
                                          value={5}
                                        >
                                          <span>
                                            seconds
                                          </span>
                                        </Pluralize>
                                      </span>
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: true and interval: 10000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": true,
      "interval": 10000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": true,
        "interval": 10000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="pause"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "pause",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-pause"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    <React.Fragment>
                      Update every 
                      <span>
                        10
                         
                        <Pluralize
                          plural="seconds"
                          singular="second"
                          value={10}
                        />
                      </span>
                    </React.Fragment>
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      <React.Fragment>
                        Update every 
                        <span>
                          10
                           
                          <Pluralize
                            plural="seconds"
                            singular="second"
                            value={10}
                          />
                        </span>
                      </React.Fragment>
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Update every 
                                      <span>
                                        10
                                         
                                        <Pluralize
                                          plural="seconds"
                                          singular="second"
                                          value={10}
                                        >
                                          <span>
                                            seconds
                                          </span>
                                        </Pluralize>
                                      </span>
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: true and interval: 30000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": true,
      "interval": 30000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": true,
        "interval": 30000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="pause"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "pause",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-pause"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    <React.Fragment>
                      Update every 
                      <span>
                        30
                         
                        <Pluralize
                          plural="seconds"
                          singular="second"
                          value={30}
                        />
                      </span>
                    </React.Fragment>
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      <React.Fragment>
                        Update every 
                        <span>
                          30
                           
                          <Pluralize
                            plural="seconds"
                            singular="second"
                            value={30}
                          />
                        </span>
                      </React.Fragment>
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Update every 
                                      <span>
                                        30
                                         
                                        <Pluralize
                                          plural="seconds"
                                          singular="second"
                                          value={30}
                                        >
                                          <span>
                                            seconds
                                          </span>
                                        </Pluralize>
                                      </span>
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: true and interval: 60000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": true,
      "interval": 60000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": true,
        "interval": 60000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="pause"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "pause",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-pause"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    <React.Fragment>
                      Update every 
                      <span>
                        1
                         
                        <Pluralize
                          plural="minutes"
                          singular="minute"
                          value={1}
                        />
                      </span>
                    </React.Fragment>
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      <React.Fragment>
                        Update every 
                        <span>
                          1
                           
                          <Pluralize
                            plural="minutes"
                            singular="minute"
                            value={1}
                          />
                        </span>
                      </React.Fragment>
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Update every 
                                      <span>
                                        1
                                         
                                        <Pluralize
                                          plural="minutes"
                                          singular="minute"
                                          value={1}
                                        >
                                          <span>
                                            minute
                                          </span>
                                        </Pluralize>
                                      </span>
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;

exports[`RefreshControls rendering it renders refresh controlls with enabled: true and interval: 300000 1`] = `
.c2.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c2.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c2.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c2.btn-danger[disabled],
.c2.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-danger[disabled]:hover,
.c2.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c2.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c2.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c2.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c2.btn-default[disabled],
.c2.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-default[disabled]:hover,
.c2.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c2.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c2.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c2.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c2.btn-info[disabled],
.c2.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-info[disabled]:hover,
.c2.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c2.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c2.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c2.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c2.btn-link[disabled],
.c2.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-link[disabled]:hover,
.c2.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c2.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c2.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c2.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c2.btn-primary[disabled],
.c2.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-primary[disabled]:hover,
.c2.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c2.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c2.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c2.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c2.btn-success[disabled],
.c2.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-success[disabled]:hover,
.c2.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c2.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c2.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c2.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c2.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c2.btn-warning[disabled],
.c2.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c2.btn-warning[disabled]:hover,
.c2.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-danger {
  background-color: #ad0707;
  border-color: #b23939;
  color: rgb(252,249,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-danger:hover {
  background-color: #a00e0e;
  border-color: #a53636;
  color: #e9e6e6;
}

.c3.btn-danger.active {
  background-color: #b75151;
  border-color: #bc6363;
  color: rgb(252,249,249);
}

.c3.btn-danger.active:hover {
  background-color: #a94c4c;
  border-color: #ad5c5c;
  color: #e9e6e6;
}

.c3.btn-danger[disabled],
.c3.btn-danger.disabled {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-danger[disabled]:hover,
.c3.btn-danger.disabled:hover {
  background-color: #c07272;
  border-color: #bc6363;
  color: rgb(252,250,250);
}

.c3.btn-default {
  background-color: #e6e6e6;
  border-color: #e0e0e0;
  color: rgb(73,73,73);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-default:hover {
  background-color: #d4d4d4;
  border-color: #cfcfcf;
  color: #444444;
}

.c3.btn-default.active {
  background-color: #dadada;
  border-color: #d4d4d4;
  color: rgb(49,49,49);
}

.c3.btn-default.active:hover {
  background-color: #cacaca;
  border-color: #c4c4c4;
  color: #2f2f2f;
}

.c3.btn-default[disabled],
.c3.btn-default.disabled {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-default[disabled]:hover,
.c3.btn-default.disabled:hover {
  background-color: #cecece;
  border-color: #d4d4d4;
  color: rgb(80,80,80);
}

.c3.btn-info {
  background-color: #0063be;
  border-color: #3970c2;
  color: rgb(249,250,252);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-info:hover {
  background-color: #0c5cb0;
  border-color: #3668b3;
  color: #e6e7e9;
}

.c3.btn-info.active {
  background-color: #517cc5;
  border-color: #6386c9;
  color: rgb(249,250,252);
}

.c3.btn-info.active:hover {
  background-color: #4b73b6;
  border-color: #5c7dba;
  color: #e6e7e9;
}

.c3.btn-info[disabled],
.c3.btn-info.disabled {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-info[disabled]:hover,
.c3.btn-info.disabled:hover {
  background-color: #7290cd;
  border-color: #6386c9;
  color: rgb(250,251,253);
}

.c3.btn-link {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-link:hover {
  background-color: #ebebeb26;
  border-color: #ebebeb26;
  color: #68267b;
}

.c3.btn-link.active {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #410057;
}

.c3.btn-link.active:hover {
  background-color: rgba(255,255,255,0);
  border-color: #ebebeb26;
  color: #3d0c51;
}

.c3.btn-link[disabled],
.c3.btn-link.disabled {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-link[disabled]:hover,
.c3.btn-link.disabled:hover {
  background-color: rgba(255,255,255,0);
  border-color: rgba(255,255,255,0);
  color: #702785;
}

.c3.btn-primary {
  background-color: #702785;
  border-color: #7b458e;
  color: rgb(234,229,236);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-primary:hover {
  background-color: #68267b;
  border-color: #724083;
  color: #d8d3da;
}

.c3.btn-primary.active {
  background-color: #855996;
  border-color: #8f699d;
  color: rgb(250,249,251);
}

.c3.btn-primary.active:hover {
  background-color: #7c538b;
  border-color: #846292;
  color: #e7e6e8;
}

.c3.btn-primary[disabled],
.c3.btn-primary.disabled {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-primary[disabled]:hover,
.c3.btn-primary.disabled:hover {
  background-color: #9877a5;
  border-color: #8f699d;
  color: rgb(251,250,251);
}

.c3.btn-success {
  background-color: #00ae42;
  border-color: #39b356;
  color: rgb(249,252,249);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-success:hover {
  background-color: #0ca13e;
  border-color: #36a550;
  color: #e6e9e6;
}

.c3.btn-success.active {
  background-color: #51b866;
  border-color: #63bc74;
  color: rgb(249,252,250);
}

.c3.btn-success.active:hover {
  background-color: #4baa5f;
  border-color: #5cae6c;
  color: #e6e9e7;
}

.c3.btn-success[disabled],
.c3.btn-success.disabled {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-success[disabled]:hover,
.c3.btn-success.disabled:hover {
  background-color: #72c180;
  border-color: #63bc74;
  color: rgb(250,252,250);
}

.c3.btn-warning {
  background-color: #ffd200;
  border-color: #f9cd07;
  color: rgb(57,47,0);
  -webkit-transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
  transition: background-color 150ms ease-in-out,border 150ms ease-in-out,color 150ms ease-in-out;
}

.c3.btn-warning:hover {
  background-color: #ebc20c;
  border-color: #e6bd0e;
  color: #362d0c;
}

.c3.btn-warning.active {
  background-color: #f2c70a;
  border-color: #ebc20c;
  color: rgb(54,45,2);
}

.c3.btn-warning.active:hover {
  background-color: #e0b80f;
  border-color: #d9b310;
  color: #332b0c;
}

.c3.btn-warning[disabled],
.c3.btn-warning.disabled {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3.btn-warning[disabled]:hover,
.c3.btn-warning.disabled:hover {
  background-color: #e4bc0e;
  border-color: #ebc20c;
  color: rgb(88,73,5);
}

.c3 ~ .dropdown-menu {
  background-color: #fff;
  box-shadow: 0 3px 3px rgba(115,115,115,0.25);
}

.c3 ~ .dropdown-menu > li > a {
  color: #1f1f1f;
}

.c3 ~ .dropdown-menu > li > a:hover,
.c3 ~ .dropdown-menu > li > a:focus {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a {
  color: #575757;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .active > a:hover,
.c3 ~ .dropdown-menu > .active > a:focus {
  color: #2d2d2d;
  background-color: #d0d0d0;
}

.c3 ~ .dropdown-menu > .disabled > a {
  color: #737373;
  background-color: #f3f3f3;
}

.c3 ~ .dropdown-menu > .disabled > a:hover,
.c3 ~ .dropdown-menu > .disabled > a:focus {
  color: #737373;
  background-color: #f3f3f3;
}

.c0 {
  max-width: 100%;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c1 > .btn-group .btn:first-child {
  max-width: 100%;
}

.c4 {
  display: inline-block;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: calc(100% - 9px);
  vertical-align: inherit;
}

<Component
  refreshConfig={
    Object {
      "enabled": true,
      "interval": 300000,
    }
  }
>
  <RefreshControls
    refreshConfig={
      Object {
        "enabled": true,
        "interval": 300000,
      }
    }
  >
    <RefreshControls__ControlsContainer
      className="pull-right"
    >
      <div
        className="c0 pull-right"
      >
        <RefreshControls__FlexibleButtonGroup>
          <ButtonGroup
            block={false}
            bsClass="btn-group"
            className="c1"
            justified={false}
            vertical={false}
          >
            <div
              className="c1 btn-group"
            >
              <Button
                onClick={[Function]}
              >
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="c2"
                  disabled={false}
                  onClick={[Function]}
                >
                  <button
                    className="c2 btn btn-default"
                    disabled={false}
                    onClick={[Function]}
                    type="button"
                  >
                    <Icon
                      name="pause"
                      type="solid"
                    >
                      <FontAwesomeIcon
                        icon={
                          Object {
                            "iconName": "pause",
                            "prefix": "fas",
                          }
                        }
                      >
                        <svg
                          className="svg-inline--fa fa-pause"
                        />
                      </FontAwesomeIcon>
                    </Icon>
                  </button>
                </Button>
              </Button>
              <DropdownButton
                id="refresh-options-dropdown"
                title={
                  <RefreshControls__ButtonLabel>
                    <React.Fragment>
                      Update every 
                      <span>
                        5
                         
                        <Pluralize
                          plural="minutes"
                          singular="minute"
                          value={5}
                        />
                      </span>
                    </React.Fragment>
                  </RefreshControls__ButtonLabel>
                }
              >
                <DropdownButton
                  className="c3"
                  id="refresh-options-dropdown"
                  title={
                    <RefreshControls__ButtonLabel>
                      <React.Fragment>
                        Update every 
                        <span>
                          5
                           
                          <Pluralize
                            plural="minutes"
                            singular="minute"
                            value={5}
                          />
                        </span>
                      </React.Fragment>
                    </RefreshControls__ButtonLabel>
                  }
                >
                  <ForwardRef
                    id="refresh-options-dropdown"
                  >
                    <Uncontrolled(Dropdown)
                      id="refresh-options-dropdown"
                      innerRef={null}
                    >
                      <Dropdown
                        bsClass="dropdown"
                        componentClass={[Function]}
                        id="refresh-options-dropdown"
                        onToggle={[Function]}
                      >
                        <ButtonGroup
                          block={false}
                          bsClass="btn-group"
                          className="dropdown"
                          justified={false}
                          vertical={false}
                        >
                          <div
                            className="dropdown btn-group"
                          >
                            <DropdownToggle
                              bsClass="dropdown-toggle"
                              bsRole="toggle"
                              className="c3"
                              id="refresh-options-dropdown"
                              key=".0"
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              open={false}
                              useAnchor={false}
                            >
                              <Button
                                active={false}
                                aria-expanded={false}
                                aria-haspopup={true}
                                block={false}
                                bsClass="btn"
                                bsStyle="default"
                                className="c3 dropdown-toggle"
                                disabled={false}
                                id="refresh-options-dropdown"
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                role="button"
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  className="c3 dropdown-toggle btn btn-default"
                                  disabled={false}
                                  id="refresh-options-dropdown"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  role="button"
                                  type="button"
                                >
                                  <RefreshControls__ButtonLabel>
                                    <div
                                      className="c4"
                                    >
                                      Update every 
                                      <span>
                                        5
                                         
                                        <Pluralize
                                          plural="minutes"
                                          singular="minute"
                                          value={5}
                                        >
                                          <span>
                                            minutes
                                          </span>
                                        </Pluralize>
                                      </span>
                                    </div>
                                  </RefreshControls__ButtonLabel>
                                   
                                  <span
                                    className="caret"
                                  />
                                </button>
                              </Button>
                            </DropdownToggle>
                            <DropdownMenu
                              bsClass="dropdown-menu"
                              bsRole="menu"
                              key=".1"
                              labelledBy="refresh-options-dropdown"
                              onClose={[Function]}
                              onSelect={[Function]}
                              pullRight={false}
                            >
                              <RootCloseWrapper
                                disabled={true}
                                event="click"
                                onRootClose={[Function]}
                              >
                                <ul
                                  aria-labelledby="refresh-options-dropdown"
                                  className="dropdown-menu"
                                  role="menu"
                                >
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Second"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Second
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-2 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          2 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-10 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          10 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-30 Seconds"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          30 Seconds
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-1 Minute"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          1 Minute
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                  <MenuItem
                                    bsClass="dropdown"
                                    disabled={false}
                                    divider={false}
                                    header={false}
                                    key=".$RefreshControls-5 Minutes"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onSelect={[Function]}
                                  >
                                    <li
                                      className=""
                                      role="presentation"
                                    >
                                      <SafeAnchor
                                        componentClass="a"
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        role="menuitem"
                                        tabIndex="-1"
                                      >
                                        <a
                                          href="#"
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          role="menuitem"
                                          tabIndex="-1"
                                        >
                                          5 Minutes
                                        </a>
                                      </SafeAnchor>
                                    </li>
                                  </MenuItem>
                                </ul>
                              </RootCloseWrapper>
                            </DropdownMenu>
                          </div>
                        </ButtonGroup>
                      </Dropdown>
                    </Uncontrolled(Dropdown)>
                  </ForwardRef>
                </DropdownButton>
              </DropdownButton>
            </div>
          </ButtonGroup>
        </RefreshControls__FlexibleButtonGroup>
      </div>
    </RefreshControls__ControlsContainer>
  </RefreshControls>
</Component>
`;
