/*
 * Copyright (C) 2020 Graylog, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Server Side Public License, version 1,
 * as published by MongoDB, Inc.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Server Side Public License for more details.
 *
 * You should have received a copy of the Server Side Public License
 * along with this program. If not, see
 * <http://www.mongodb.com/licensing/server-side-public-license>.
 */
package org.graylog2.rest.resources.system;

import com.codahale.metrics.annotation.Timed;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import jakarta.inject.Inject;
import jakarta.ws.rs.BadRequestException;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.core.MediaType;
import org.apache.shiro.authz.annotation.RequiresAuthentication;
import org.graylog2.audit.AuditEventTypes;
import org.graylog2.audit.jersey.AuditEvent;
import org.graylog2.notifications.Notification;
import org.graylog2.notifications.NotificationService;
import org.graylog2.shared.rest.resources.RestResource;
import org.graylog2.shared.security.RestPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nullable;
import java.util.List;
import java.util.Locale;

import static org.graylog2.shared.rest.documentation.generator.Generator.CLOUD_VISIBLE;

@RequiresAuthentication
@Api(value = "System/Notifications", description = "Notifications generated by the system", tags = {CLOUD_VISIBLE})
@Path("/system/notifications")
public class NotificationsResource extends RestResource {

    private static final Logger LOG = LoggerFactory.getLogger(NotificationsResource.class);

    private final NotificationService notificationService;

    @Inject
    public NotificationsResource(NotificationService notificationService) {
        this.notificationService = notificationService;
    }

    public record NotificationsResponse(int total, List<Notification> notifications) {
        static NotificationsResponse create(List<Notification> notifications) {
            return new NotificationsResponse(notifications.size(), notifications);
        }
    }

    @GET
    @Timed
    @ApiOperation(value = "Get all active notifications")
    @Produces(MediaType.APPLICATION_JSON)
    public NotificationsResponse listNotifications() {
        final var notifications = notificationService.all().stream()
                .filter(notification -> isPermitted(RestPermissions.NOTIFICATIONS_READ, notification.getType().toString()))
                .toList();

        return NotificationsResponse.create(notifications);
    }

    @DELETE
    @Timed
    @Path("/{notificationType}")
    @ApiOperation(value = "Delete a notification by type")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such notification type.")
    })
    @AuditEvent(type = AuditEventTypes.SYSTEM_NOTIFICATION_DELETE)
    public void deleteNotification(@ApiParam(name = "notificationType")
                                   @PathParam("notificationType") String notificationType) {
        deleteKeyedNotification(notificationType, null);
    }

    @DELETE
    @Timed
    @Path("/{notificationType}/{notificationKey}")
    @ApiOperation(value = "Delete a notification by type and key")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "No such notification type.")
    })
    @AuditEvent(type = AuditEventTypes.SYSTEM_NOTIFICATION_DELETE)
    public void deleteKeyedNotification(@ApiParam(name = "notificationType") @PathParam("notificationType") String notificationType,
                                        @ApiParam(name = "notificationKey") @PathParam("notificationKey") @Nullable String notificationKey) {
        Notification.Type type;
        checkPermission(RestPermissions.NOTIFICATIONS_DELETE, notificationType);
        try {
            type = Notification.Type.valueOf(notificationType.toUpperCase(Locale.ENGLISH));
        } catch (IllegalArgumentException e) {
            LOG.warn("No such notification type: [" + notificationType + "]");
            throw new BadRequestException(e);
        }

        notificationService.destroyAllByTypeAndKey(type, notificationKey);
    }
}
