/*
 * Copyright (C) 2020 Graylog, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Server Side Public License, version 1,
 * as published by MongoDB, Inc.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * Server Side Public License for more details.
 *
 * You should have received a copy of the Server Side Public License
 * along with this program. If not, see
 * <http://www.mongodb.com/licensing/server-side-public-license>.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/resources/ipfix_journal.proto

package org.graylog.integrations.ipfix;

import com.google.protobuf.RepeatedFieldBuilderV3;

import java.util.List;

public final class IpfixJournal {
    private IpfixJournal() {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(
            com.google.protobuf.ExtensionRegistry registry) {
        registerAllExtensions(
                (com.google.protobuf.ExtensionRegistryLite) registry);
    }

    public interface RawIpfixOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.graylog.plugins.ipfix.RawIpfix)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */
        int getTemplatesCount();

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */
        boolean containsTemplates(
                int key);

        /**
         * Use {@link #getTemplatesMap()} instead.
         */
        @Deprecated
        java.util.Map<Integer, com.google.protobuf.ByteString>
        getTemplates();

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */
        java.util.Map<Integer, com.google.protobuf.ByteString>
        getTemplatesMap();

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */

        com.google.protobuf.ByteString getTemplatesOrDefault(
                int key,
                com.google.protobuf.ByteString defaultValue);

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */

        com.google.protobuf.ByteString getTemplatesOrThrow(
                int key);

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */
        int getOptionTemplatesCount();

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */
        boolean containsOptionTemplates(
                int key);

        /**
         * Use {@link #getOptionTemplatesMap()} instead.
         */
        @Deprecated
        java.util.Map<Integer, com.google.protobuf.ByteString>
        getOptionTemplates();

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */
        java.util.Map<Integer, com.google.protobuf.ByteString>
        getOptionTemplatesMap();

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */

        com.google.protobuf.ByteString getOptionTemplatesOrDefault(
                int key,
                com.google.protobuf.ByteString defaultValue);

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */

        com.google.protobuf.ByteString getOptionTemplatesOrThrow(
                int key);

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        java.util.List<org.graylog.integrations.ipfix.IpfixJournal.DataSet>
        getDataSetsList();

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        org.graylog.integrations.ipfix.IpfixJournal.DataSet getDataSets(int index);

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        int getDataSetsCount();

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        java.util.List<? extends org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder>
        getDataSetsOrBuilderList();

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder getDataSetsOrBuilder(
                int index);
    }

    /**
     * Protobuf type {@code org.graylog.plugins.ipfix.RawIpfix}
     */
    public static final class RawIpfix extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.graylog.plugins.ipfix.RawIpfix)
            RawIpfixOrBuilder {
        // Use RawIpfix.newBuilder() to construct.
        private RawIpfix(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private RawIpfix() {
            dataSets_ = java.util.Collections.emptyList();
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private RawIpfix(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                                   extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                templates_ = com.google.protobuf.MapField.newMapField(
                                        TemplatesDefaultEntryHolder.defaultEntry);
                                mutable_bitField0_ |= 0x00000001;
                            }
                            com.google.protobuf.MapEntry<Integer, com.google.protobuf.ByteString>
                                    templates = input.readMessage(
                                    TemplatesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                            templates_.getMutableMap().put(templates.getKey(), templates.getValue());
                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                optionTemplates_ = com.google.protobuf.MapField.newMapField(
                                        OptionTemplatesDefaultEntryHolder.defaultEntry);
                                mutable_bitField0_ |= 0x00000002;
                            }
                            com.google.protobuf.MapEntry<Integer, com.google.protobuf.ByteString>
                                    optionTemplates = input.readMessage(
                                    OptionTemplatesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                            optionTemplates_.getMutableMap().put(optionTemplates.getKey(), optionTemplates.getValue());
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                dataSets_ = new java.util.ArrayList<org.graylog.integrations.ipfix.IpfixJournal.DataSet>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            dataSets_.add(
                                    input.readMessage(org.graylog.integrations.ipfix.IpfixJournal.DataSet.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    dataSets_ = java.util.Collections.unmodifiableList(dataSets_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor;
        }

        @SuppressWarnings({"rawtypes"})
        protected com.google.protobuf.MapField internalGetMapField(
                int number) {
            switch (number) {
                case 1:
                    return internalGetTemplates();
                case 2:
                    return internalGetOptionTemplates();
                default:
                    throw new RuntimeException(
                            "Invalid map field number: " + number);
            }
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_RawIpfix_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.graylog.integrations.ipfix.IpfixJournal.RawIpfix.class, org.graylog.integrations.ipfix.IpfixJournal.RawIpfix.Builder.class);
        }

        public static final int TEMPLATES_FIELD_NUMBER = 1;

        private static final class TemplatesDefaultEntryHolder {
            static final com.google.protobuf.MapEntry<
                    Integer, com.google.protobuf.ByteString> defaultEntry =
                    com.google.protobuf.MapEntry
                            .<Integer, com.google.protobuf.ByteString>newDefaultInstance(
                                    org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_RawIpfix_TemplatesEntry_descriptor,
                                    com.google.protobuf.WireFormat.FieldType.UINT32,
                                    0,
                                    com.google.protobuf.WireFormat.FieldType.BYTES,
                                    com.google.protobuf.ByteString.EMPTY);
        }

        private com.google.protobuf.MapField<
                Integer, com.google.protobuf.ByteString> templates_;

        private com.google.protobuf.MapField<Integer, com.google.protobuf.ByteString>
        internalGetTemplates() {
            if (templates_ == null) {
                return com.google.protobuf.MapField.emptyMapField(
                        TemplatesDefaultEntryHolder.defaultEntry);
            }
            return templates_;
        }

        public int getTemplatesCount() {
            return internalGetTemplates().getMap().size();
        }

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */

        public boolean containsTemplates(
                int key) {

            return internalGetTemplates().getMap().containsKey(key);
        }

        /**
         * Use {@link #getTemplatesMap()} instead.
         */
        @Deprecated
        public java.util.Map<Integer, com.google.protobuf.ByteString> getTemplates() {
            return getTemplatesMap();
        }

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */

        public java.util.Map<Integer, com.google.protobuf.ByteString> getTemplatesMap() {
            return internalGetTemplates().getMap();
        }

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */

        public com.google.protobuf.ByteString getTemplatesOrDefault(
                int key,
                com.google.protobuf.ByteString defaultValue) {

            java.util.Map<Integer, com.google.protobuf.ByteString> map =
                    internalGetTemplates().getMap();
            return map.containsKey(key) ? map.get(key) : defaultValue;
        }

        /**
         * <pre>
         * all applicable templates that are referenced by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
         */

        public com.google.protobuf.ByteString getTemplatesOrThrow(
                int key) {

            java.util.Map<Integer, com.google.protobuf.ByteString> map =
                    internalGetTemplates().getMap();
            if (!map.containsKey(key)) {
                throw new IllegalArgumentException();
            }
            return map.get(key);
        }

        public static final int OPTIONTEMPLATES_FIELD_NUMBER = 2;

        private static final class OptionTemplatesDefaultEntryHolder {
            static final com.google.protobuf.MapEntry<
                    Integer, com.google.protobuf.ByteString> defaultEntry =
                    com.google.protobuf.MapEntry
                            .<Integer, com.google.protobuf.ByteString>newDefaultInstance(
                                    org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_RawIpfix_OptionTemplatesEntry_descriptor,
                                    com.google.protobuf.WireFormat.FieldType.UINT32,
                                    0,
                                    com.google.protobuf.WireFormat.FieldType.BYTES,
                                    com.google.protobuf.ByteString.EMPTY);
        }

        private com.google.protobuf.MapField<
                Integer, com.google.protobuf.ByteString> optionTemplates_;

        private com.google.protobuf.MapField<Integer, com.google.protobuf.ByteString>
        internalGetOptionTemplates() {
            if (optionTemplates_ == null) {
                return com.google.protobuf.MapField.emptyMapField(
                        OptionTemplatesDefaultEntryHolder.defaultEntry);
            }
            return optionTemplates_;
        }

        public int getOptionTemplatesCount() {
            return internalGetOptionTemplates().getMap().size();
        }

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */

        public boolean containsOptionTemplates(
                int key) {

            return internalGetOptionTemplates().getMap().containsKey(key);
        }

        /**
         * Use {@link #getOptionTemplatesMap()} instead.
         */
        @Deprecated
        public java.util.Map<Integer, com.google.protobuf.ByteString> getOptionTemplates() {
            return getOptionTemplatesMap();
        }

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */

        public java.util.Map<Integer, com.google.protobuf.ByteString> getOptionTemplatesMap() {
            return internalGetOptionTemplates().getMap();
        }

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */

        public com.google.protobuf.ByteString getOptionTemplatesOrDefault(
                int key,
                com.google.protobuf.ByteString defaultValue) {

            java.util.Map<Integer, com.google.protobuf.ByteString> map =
                    internalGetOptionTemplates().getMap();
            return map.containsKey(key) ? map.get(key) : defaultValue;
        }

        /**
         * <pre>
         * all applicable options templates that are references by the data sets
         * </pre>
         *
         * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
         */

        public com.google.protobuf.ByteString getOptionTemplatesOrThrow(
                int key) {

            java.util.Map<Integer, com.google.protobuf.ByteString> map =
                    internalGetOptionTemplates().getMap();
            if (!map.containsKey(key)) {
                throw new IllegalArgumentException();
            }
            return map.get(key);
        }

        public static final int DATASETS_FIELD_NUMBER = 3;
        private List<DataSet> dataSets_;

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        public java.util.List<org.graylog.integrations.ipfix.IpfixJournal.DataSet> getDataSetsList() {
            return dataSets_;
        }

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        public java.util.List<? extends org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder>
        getDataSetsOrBuilderList() {
            return dataSets_;
        }

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        public int getDataSetsCount() {
            return dataSets_.size();
        }

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        public org.graylog.integrations.ipfix.IpfixJournal.DataSet getDataSets(int index) {
            return dataSets_.get(index);
        }

        /**
         * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
         */
        public org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder getDataSetsOrBuilder(
                int index) {
            return dataSets_.get(index);
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            for (int i = 0; i < getDataSetsCount(); i++) {
                if (!getDataSets(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            for (java.util.Map.Entry<Integer, com.google.protobuf.ByteString> entry
                    : internalGetTemplates().getMap().entrySet()) {
                com.google.protobuf.MapEntry<Integer, com.google.protobuf.ByteString>
                        templates = TemplatesDefaultEntryHolder.defaultEntry.newBuilderForType()
                                                                            .setKey(entry.getKey())
                                                                            .setValue(entry.getValue())
                                                                            .build();
                output.writeMessage(1, templates);
            }
            for (java.util.Map.Entry<Integer, com.google.protobuf.ByteString> entry
                    : internalGetOptionTemplates().getMap().entrySet()) {
                com.google.protobuf.MapEntry<Integer, com.google.protobuf.ByteString>
                        optionTemplates = OptionTemplatesDefaultEntryHolder.defaultEntry.newBuilderForType()
                                                                                        .setKey(entry.getKey())
                                                                                        .setValue(entry.getValue())
                                                                                        .build();
                output.writeMessage(2, optionTemplates);
            }
            for (int i = 0; i < dataSets_.size(); i++) {
                output.writeMessage(3, dataSets_.get(i));
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            for (java.util.Map.Entry<Integer, com.google.protobuf.ByteString> entry
                    : internalGetTemplates().getMap().entrySet()) {
                com.google.protobuf.MapEntry<Integer, com.google.protobuf.ByteString>
                        templates = TemplatesDefaultEntryHolder.defaultEntry.newBuilderForType()
                                                                            .setKey(entry.getKey())
                                                                            .setValue(entry.getValue())
                                                                            .build();
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(1, templates);
            }
            for (java.util.Map.Entry<Integer, com.google.protobuf.ByteString> entry
                    : internalGetOptionTemplates().getMap().entrySet()) {
                com.google.protobuf.MapEntry<Integer, com.google.protobuf.ByteString>
                        optionTemplates = OptionTemplatesDefaultEntryHolder.defaultEntry.newBuilderForType()
                                                                                        .setKey(entry.getKey())
                                                                                        .setValue(entry.getValue())
                                                                                        .build();
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(2, optionTemplates);
            }
            for (int i = 0; i < dataSets_.size(); i++) {
                size += com.google.protobuf.CodedOutputStream
                        .computeMessageSize(3, dataSets_.get(i));
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.graylog.integrations.ipfix.IpfixJournal.RawIpfix)) {
                return super.equals(obj);
            }
            org.graylog.integrations.ipfix.IpfixJournal.RawIpfix other = (org.graylog.integrations.ipfix.IpfixJournal.RawIpfix) obj;

            boolean result = true;
            result = result && internalGetTemplates().equals(
                    other.internalGetTemplates());
            result = result && internalGetOptionTemplates().equals(
                    other.internalGetOptionTemplates());
            result = result && getDataSetsList()
                    .equals(other.getDataSetsList());
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptorForType().hashCode();
            if (!internalGetTemplates().getMap().isEmpty()) {
                hash = (37 * hash) + TEMPLATES_FIELD_NUMBER;
                hash = (53 * hash) + internalGetTemplates().hashCode();
            }
            if (!internalGetOptionTemplates().getMap().isEmpty()) {
                hash = (37 * hash) + OPTIONTEMPLATES_FIELD_NUMBER;
                hash = (53 * hash) + internalGetOptionTemplates().hashCode();
            }
            if (getDataSetsCount() > 0) {
                hash = (37 * hash) + DATASETS_FIELD_NUMBER;
                hash = (53 * hash) + getDataSetsList().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.graylog.integrations.ipfix.IpfixJournal.RawIpfix prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.graylog.plugins.ipfix.RawIpfix}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.graylog.plugins.ipfix.RawIpfix)
                org.graylog.integrations.ipfix.IpfixJournal.RawIpfixOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor;
            }

            @SuppressWarnings({"rawtypes"})
            protected com.google.protobuf.MapField internalGetMapField(
                    int number) {
                switch (number) {
                    case 1:
                        return internalGetTemplates();
                    case 2:
                        return internalGetOptionTemplates();
                    default:
                        throw new RuntimeException(
                                "Invalid map field number: " + number);
                }
            }

            @SuppressWarnings({"rawtypes"})
            protected com.google.protobuf.MapField internalGetMutableMapField(
                    int number) {
                switch (number) {
                    case 1:
                        return internalGetMutableTemplates();
                    case 2:
                        return internalGetMutableOptionTemplates();
                    default:
                        throw new RuntimeException(
                                "Invalid map field number: " + number);
                }
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_RawIpfix_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.graylog.integrations.ipfix.IpfixJournal.RawIpfix.class, org.graylog.integrations.ipfix.IpfixJournal.RawIpfix.Builder.class);
            }

            // Construct using org.graylog.plugins.ipfix.IpfixJournal.RawIpfix.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                    getDataSetsFieldBuilder();
                }
            }

            public Builder clear() {
                super.clear();
                internalGetMutableTemplates().clear();
                internalGetMutableOptionTemplates().clear();
                if (dataSetsBuilder_ == null) {
                    dataSets_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                } else {
                    dataSetsBuilder_.clear();
                }
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor;
            }

            public org.graylog.integrations.ipfix.IpfixJournal.RawIpfix getDefaultInstanceForType() {
                return org.graylog.integrations.ipfix.IpfixJournal.RawIpfix.getDefaultInstance();
            }

            public RawIpfix build() {
                org.graylog.integrations.ipfix.IpfixJournal.RawIpfix result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.graylog.integrations.ipfix.IpfixJournal.RawIpfix buildPartial() {
                org.graylog.integrations.ipfix.IpfixJournal.RawIpfix result = new org.graylog.integrations.ipfix.IpfixJournal.RawIpfix(this);
                int from_bitField0_ = bitField0_;
                result.templates_ = internalGetTemplates();
                result.templates_.makeImmutable();
                result.optionTemplates_ = internalGetOptionTemplates();
                result.optionTemplates_.makeImmutable();
                if (dataSetsBuilder_ == null) {
                    if (((bitField0_ & 0x00000004) == 0x00000004)) {
                        dataSets_ = java.util.Collections.unmodifiableList(dataSets_);
                        bitField0_ = (bitField0_ & ~0x00000004);
                    }
                    result.dataSets_ = dataSets_;
                } else {
                    result.dataSets_ = dataSetsBuilder_.build();
                }
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.graylog.integrations.ipfix.IpfixJournal.RawIpfix) {
                    return mergeFrom((org.graylog.integrations.ipfix.IpfixJournal.RawIpfix) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.graylog.integrations.ipfix.IpfixJournal.RawIpfix other) {
                if (other == org.graylog.integrations.ipfix.IpfixJournal.RawIpfix.getDefaultInstance()) return this;
                internalGetMutableTemplates().mergeFrom(
                        other.internalGetTemplates());
                internalGetMutableOptionTemplates().mergeFrom(
                        other.internalGetOptionTemplates());
                if (dataSetsBuilder_ == null) {
                    if (!other.dataSets_.isEmpty()) {
                        if (dataSets_.isEmpty()) {
                            dataSets_ = other.dataSets_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                        } else {
                            ensureDataSetsIsMutable();
                            dataSets_.addAll(other.dataSets_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.dataSets_.isEmpty()) {
                        if (dataSetsBuilder_.isEmpty()) {
                            dataSetsBuilder_.dispose();
                            dataSetsBuilder_ = null;
                            dataSets_ = other.dataSets_;
                            bitField0_ = (bitField0_ & ~0x00000004);
                            dataSetsBuilder_ =
                                    com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                            getDataSetsFieldBuilder() : null;
                        } else {
                            dataSetsBuilder_.addAllMessages(other.dataSets_);
                        }
                    }
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                for (int i = 0; i < getDataSetsCount(); i++) {
                    if (!getDataSets(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.graylog.integrations.ipfix.IpfixJournal.RawIpfix parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.graylog.integrations.ipfix.IpfixJournal.RawIpfix) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private com.google.protobuf.MapField<
                    Integer, com.google.protobuf.ByteString> templates_;

            private com.google.protobuf.MapField<Integer, com.google.protobuf.ByteString>
            internalGetTemplates() {
                if (templates_ == null) {
                    return com.google.protobuf.MapField.emptyMapField(
                            TemplatesDefaultEntryHolder.defaultEntry);
                }
                return templates_;
            }

            private com.google.protobuf.MapField<Integer, com.google.protobuf.ByteString>
            internalGetMutableTemplates() {
                onChanged();
                ;
                if (templates_ == null) {
                    templates_ = com.google.protobuf.MapField.newMapField(
                            TemplatesDefaultEntryHolder.defaultEntry);
                }
                if (!templates_.isMutable()) {
                    templates_ = templates_.copy();
                }
                return templates_;
            }

            public int getTemplatesCount() {
                return internalGetTemplates().getMap().size();
            }

            /**
             * <pre>
             * all applicable templates that are referenced by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
             */

            public boolean containsTemplates(
                    int key) {

                return internalGetTemplates().getMap().containsKey(key);
            }

            /**
             * Use {@link #getTemplatesMap()} instead.
             */
            @Deprecated
            public java.util.Map<Integer, com.google.protobuf.ByteString> getTemplates() {
                return getTemplatesMap();
            }

            /**
             * <pre>
             * all applicable templates that are referenced by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
             */

            public java.util.Map<Integer, com.google.protobuf.ByteString> getTemplatesMap() {
                return internalGetTemplates().getMap();
            }

            /**
             * <pre>
             * all applicable templates that are referenced by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
             */

            public com.google.protobuf.ByteString getTemplatesOrDefault(
                    int key,
                    com.google.protobuf.ByteString defaultValue) {

                java.util.Map<Integer, com.google.protobuf.ByteString> map =
                        internalGetTemplates().getMap();
                return map.containsKey(key) ? map.get(key) : defaultValue;
            }

            /**
             * <pre>
             * all applicable templates that are referenced by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
             */

            public com.google.protobuf.ByteString getTemplatesOrThrow(
                    int key) {

                java.util.Map<Integer, com.google.protobuf.ByteString> map =
                        internalGetTemplates().getMap();
                if (!map.containsKey(key)) {
                    throw new IllegalArgumentException();
                }
                return map.get(key);
            }

            public Builder clearTemplates() {
                getMutableTemplates().clear();
                return this;
            }

            /**
             * <pre>
             * all applicable templates that are referenced by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
             */

            public Builder removeTemplates(
                    int key) {

                getMutableTemplates().remove(key);
                return this;
            }

            /**
             * Use alternate mutation accessors instead.
             */
            @Deprecated
            public java.util.Map<Integer, com.google.protobuf.ByteString>
            getMutableTemplates() {
                return internalGetMutableTemplates().getMutableMap();
            }

            /**
             * <pre>
             * all applicable templates that are referenced by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
             */
            public Builder putTemplates(
                    int key,
                    com.google.protobuf.ByteString value) {

                if (value == null) {
                    throw new NullPointerException();
                }
                getMutableTemplates().put(key, value);
                return this;
            }

            /**
             * <pre>
             * all applicable templates that are referenced by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; templates = 1;</code>
             */

            public Builder putAllTemplates(
                    java.util.Map<Integer, com.google.protobuf.ByteString> values) {
                getMutableTemplates().putAll(values);
                return this;
            }

            private com.google.protobuf.MapField<
                    Integer, com.google.protobuf.ByteString> optionTemplates_;

            private com.google.protobuf.MapField<Integer, com.google.protobuf.ByteString>
            internalGetOptionTemplates() {
                if (optionTemplates_ == null) {
                    return com.google.protobuf.MapField.emptyMapField(
                            OptionTemplatesDefaultEntryHolder.defaultEntry);
                }
                return optionTemplates_;
            }

            private com.google.protobuf.MapField<Integer, com.google.protobuf.ByteString>
            internalGetMutableOptionTemplates() {
                onChanged();
                ;
                if (optionTemplates_ == null) {
                    optionTemplates_ = com.google.protobuf.MapField.newMapField(
                            OptionTemplatesDefaultEntryHolder.defaultEntry);
                }
                if (!optionTemplates_.isMutable()) {
                    optionTemplates_ = optionTemplates_.copy();
                }
                return optionTemplates_;
            }

            public int getOptionTemplatesCount() {
                return internalGetOptionTemplates().getMap().size();
            }

            /**
             * <pre>
             * all applicable options templates that are references by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
             */

            public boolean containsOptionTemplates(
                    int key) {

                return internalGetOptionTemplates().getMap().containsKey(key);
            }

            /**
             * Use {@link #getOptionTemplatesMap()} instead.
             */
            @Deprecated
            public java.util.Map<Integer, com.google.protobuf.ByteString> getOptionTemplates() {
                return getOptionTemplatesMap();
            }

            /**
             * <pre>
             * all applicable options templates that are references by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
             */

            public java.util.Map<Integer, com.google.protobuf.ByteString> getOptionTemplatesMap() {
                return internalGetOptionTemplates().getMap();
            }

            /**
             * <pre>
             * all applicable options templates that are references by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
             */

            public com.google.protobuf.ByteString getOptionTemplatesOrDefault(
                    int key,
                    com.google.protobuf.ByteString defaultValue) {

                java.util.Map<Integer, com.google.protobuf.ByteString> map =
                        internalGetOptionTemplates().getMap();
                return map.containsKey(key) ? map.get(key) : defaultValue;
            }

            /**
             * <pre>
             * all applicable options templates that are references by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
             */

            public com.google.protobuf.ByteString getOptionTemplatesOrThrow(
                    int key) {

                java.util.Map<Integer, com.google.protobuf.ByteString> map =
                        internalGetOptionTemplates().getMap();
                if (!map.containsKey(key)) {
                    throw new IllegalArgumentException();
                }
                return map.get(key);
            }

            public Builder clearOptionTemplates() {
                getMutableOptionTemplates().clear();
                return this;
            }

            /**
             * <pre>
             * all applicable options templates that are references by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
             */

            public Builder removeOptionTemplates(
                    int key) {

                getMutableOptionTemplates().remove(key);
                return this;
            }

            /**
             * Use alternate mutation accessors instead.
             */
            @Deprecated
            public java.util.Map<Integer, com.google.protobuf.ByteString>
            getMutableOptionTemplates() {
                return internalGetMutableOptionTemplates().getMutableMap();
            }

            /**
             * <pre>
             * all applicable options templates that are references by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
             */
            public Builder putOptionTemplates(
                    int key,
                    com.google.protobuf.ByteString value) {

                if (value == null) {
                    throw new NullPointerException();
                }
                getMutableOptionTemplates().put(key, value);
                return this;
            }

            /**
             * <pre>
             * all applicable options templates that are references by the data sets
             * </pre>
             *
             * <code>map&lt;uint32, bytes&gt; optionTemplates = 2;</code>
             */

            public Builder putAllOptionTemplates(
                    java.util.Map<Integer, com.google.protobuf.ByteString> values) {
                getMutableOptionTemplates().putAll(values);
                return this;
            }

            private java.util.List<org.graylog.integrations.ipfix.IpfixJournal.DataSet> dataSets_ =
                    java.util.Collections.emptyList();

            private void ensureDataSetsIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    dataSets_ = new java.util.ArrayList<org.graylog.integrations.ipfix.IpfixJournal.DataSet>(dataSets_);
                    bitField0_ |= 0x00000004;
                }
            }

            private RepeatedFieldBuilderV3<DataSet, DataSet.Builder, DataSetOrBuilder> dataSetsBuilder_;

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public java.util.List<org.graylog.integrations.ipfix.IpfixJournal.DataSet> getDataSetsList() {
                if (dataSetsBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(dataSets_);
                } else {
                    return dataSetsBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public int getDataSetsCount() {
                if (dataSetsBuilder_ == null) {
                    return dataSets_.size();
                } else {
                    return dataSetsBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public org.graylog.integrations.ipfix.IpfixJournal.DataSet getDataSets(int index) {
                if (dataSetsBuilder_ == null) {
                    return dataSets_.get(index);
                } else {
                    return dataSetsBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder setDataSets(
                    int index, org.graylog.integrations.ipfix.IpfixJournal.DataSet value) {
                if (dataSetsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureDataSetsIsMutable();
                    dataSets_.set(index, value);
                    onChanged();
                } else {
                    dataSetsBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder setDataSets(
                    int index, org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder builderForValue) {
                if (dataSetsBuilder_ == null) {
                    ensureDataSetsIsMutable();
                    dataSets_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    dataSetsBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder addDataSets(org.graylog.integrations.ipfix.IpfixJournal.DataSet value) {
                if (dataSetsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureDataSetsIsMutable();
                    dataSets_.add(value);
                    onChanged();
                } else {
                    dataSetsBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder addDataSets(
                    int index, org.graylog.integrations.ipfix.IpfixJournal.DataSet value) {
                if (dataSetsBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }
                    ensureDataSetsIsMutable();
                    dataSets_.add(index, value);
                    onChanged();
                } else {
                    dataSetsBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder addDataSets(
                    org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder builderForValue) {
                if (dataSetsBuilder_ == null) {
                    ensureDataSetsIsMutable();
                    dataSets_.add(builderForValue.build());
                    onChanged();
                } else {
                    dataSetsBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder addDataSets(
                    int index, org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder builderForValue) {
                if (dataSetsBuilder_ == null) {
                    ensureDataSetsIsMutable();
                    dataSets_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    dataSetsBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder addAllDataSets(
                    Iterable<? extends org.graylog.integrations.ipfix.IpfixJournal.DataSet> values) {
                if (dataSetsBuilder_ == null) {
                    ensureDataSetsIsMutable();
                    com.google.protobuf.AbstractMessageLite.Builder.addAll(
                            values, dataSets_);
                    onChanged();
                } else {
                    dataSetsBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder clearDataSets() {
                if (dataSetsBuilder_ == null) {
                    dataSets_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000004);
                    onChanged();
                } else {
                    dataSetsBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public Builder removeDataSets(int index) {
                if (dataSetsBuilder_ == null) {
                    ensureDataSetsIsMutable();
                    dataSets_.remove(index);
                    onChanged();
                } else {
                    dataSetsBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder getDataSetsBuilder(
                    int index) {
                return getDataSetsFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder getDataSetsOrBuilder(
                    int index) {
                if (dataSetsBuilder_ == null) {
                    return dataSets_.get(index);
                } else {
                    return dataSetsBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public java.util.List<? extends org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder>
            getDataSetsOrBuilderList() {
                if (dataSetsBuilder_ != null) {
                    return dataSetsBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(dataSets_);
                }
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder addDataSetsBuilder() {
                return getDataSetsFieldBuilder().addBuilder(
                        org.graylog.integrations.ipfix.IpfixJournal.DataSet.getDefaultInstance());
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder addDataSetsBuilder(
                    int index) {
                return getDataSetsFieldBuilder().addBuilder(
                        index, org.graylog.integrations.ipfix.IpfixJournal.DataSet.getDefaultInstance());
            }

            /**
             * <code>repeated .org.graylog.plugins.ipfix.DataSet dataSets = 3;</code>
             */
            public java.util.List<org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder>
            getDataSetsBuilderList() {
                return getDataSetsFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilderV3<DataSet, DataSet.Builder, org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder>
            getDataSetsFieldBuilder() {
                if (dataSetsBuilder_ == null) {
                    dataSetsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                            org.graylog.integrations.ipfix.IpfixJournal.DataSet, org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder, org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder>(
                            dataSets_,
                            ((bitField0_ & 0x00000004) == 0x00000004),
                            getParentForChildren(),
                            isClean());
                    dataSets_ = null;
                }
                return dataSetsBuilder_;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:org.graylog.plugins.ipfix.RawIpfix)
        }

        // @@protoc_insertion_point(class_scope:org.graylog.plugins.ipfix.RawIpfix)
        private static final org.graylog.integrations.ipfix.IpfixJournal.RawIpfix DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.graylog.integrations.ipfix.IpfixJournal.RawIpfix();
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.RawIpfix getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        @Deprecated
        public static final com.google.protobuf.Parser<RawIpfix>
                PARSER = new com.google.protobuf.AbstractParser<RawIpfix>() {
            public RawIpfix parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new RawIpfix(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<RawIpfix> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<RawIpfix> getParserForType() {
            return PARSER;
        }

        public org.graylog.integrations.ipfix.IpfixJournal.RawIpfix getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    public interface DataSetOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.graylog.plugins.ipfix.DataSet)
            com.google.protobuf.MessageOrBuilder {

        /**
         * <code>required uint64 timestampEpochSeconds = 1;</code>
         */
        boolean hasTimestampEpochSeconds();

        /**
         * <code>required uint64 timestampEpochSeconds = 1;</code>
         */
        long getTimestampEpochSeconds();

        /**
         * <code>required uint32 templateId = 2;</code>
         */
        boolean hasTemplateId();

        /**
         * <code>required uint32 templateId = 2;</code>
         */
        int getTemplateId();

        /**
         * <code>required bytes dataRecords = 3;</code>
         */
        boolean hasDataRecords();

        /**
         * <code>required bytes dataRecords = 3;</code>
         */
        com.google.protobuf.ByteString getDataRecords();
    }

    /**
     * Protobuf type {@code org.graylog.plugins.ipfix.DataSet}
     */
    public static final class DataSet extends
            com.google.protobuf.GeneratedMessageV3 implements
            // @@protoc_insertion_point(message_implements:org.graylog.plugins.ipfix.DataSet)
            DataSetOrBuilder {
        // Use DataSet.newBuilder() to construct.
        private DataSet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
            super(builder);
        }

        private DataSet() {
            timestampEpochSeconds_ = 0L;
            templateId_ = 0;
            dataRecords_ = com.google.protobuf.ByteString.EMPTY;
        }

        @Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
            return this.unknownFields;
        }

        private DataSet(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            this();
            int mutable_bitField0_ = 0;
            com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                    com.google.protobuf.UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields,
                                                   extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            timestampEpochSeconds_ = input.readUInt64();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            templateId_ = input.readUInt32();
                            break;
                        }
                        case 26: {
                            bitField0_ |= 0x00000004;
                            dataRecords_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(
                        e).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_DataSet_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_DataSet_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            org.graylog.integrations.ipfix.IpfixJournal.DataSet.class, org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder.class);
        }

        private int bitField0_;
        public static final int TIMESTAMPEPOCHSECONDS_FIELD_NUMBER = 1;
        private long timestampEpochSeconds_;

        /**
         * <code>required uint64 timestampEpochSeconds = 1;</code>
         */
        public boolean hasTimestampEpochSeconds() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required uint64 timestampEpochSeconds = 1;</code>
         */
        public long getTimestampEpochSeconds() {
            return timestampEpochSeconds_;
        }

        public static final int TEMPLATEID_FIELD_NUMBER = 2;
        private int templateId_;

        /**
         * <code>required uint32 templateId = 2;</code>
         */
        public boolean hasTemplateId() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required uint32 templateId = 2;</code>
         */
        public int getTemplateId() {
            return templateId_;
        }

        public static final int DATARECORDS_FIELD_NUMBER = 3;
        private com.google.protobuf.ByteString dataRecords_;

        /**
         * <code>required bytes dataRecords = 3;</code>
         */
        public boolean hasDataRecords() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required bytes dataRecords = 3;</code>
         */
        public com.google.protobuf.ByteString getDataRecords() {
            return dataRecords_;
        }

        private byte memoizedIsInitialized = -1;

        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasTimestampEpochSeconds()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasTemplateId()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDataRecords()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                throws java.io.IOException {
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt64(1, timestampEpochSeconds_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, templateId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeBytes(3, dataRecords_);
            }
            unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = memoizedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt64Size(1, timestampEpochSeconds_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeUInt32Size(2, templateId_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += com.google.protobuf.CodedOutputStream
                        .computeBytesSize(3, dataRecords_);
            }
            size += unknownFields.getSerializedSize();
            memoizedSize = size;
            return size;
        }

        private static final long serialVersionUID = 0L;

        @Override
        public boolean equals(final Object obj) {
            if (obj == this) {
                return true;
            }
            if (!(obj instanceof org.graylog.integrations.ipfix.IpfixJournal.DataSet)) {
                return super.equals(obj);
            }
            org.graylog.integrations.ipfix.IpfixJournal.DataSet other = (org.graylog.integrations.ipfix.IpfixJournal.DataSet) obj;

            boolean result = true;
            result = result && (hasTimestampEpochSeconds() == other.hasTimestampEpochSeconds());
            if (hasTimestampEpochSeconds()) {
                result = result && (getTimestampEpochSeconds()
                                    == other.getTimestampEpochSeconds());
            }
            result = result && (hasTemplateId() == other.hasTemplateId());
            if (hasTemplateId()) {
                result = result && (getTemplateId()
                                    == other.getTemplateId());
            }
            result = result && (hasDataRecords() == other.hasDataRecords());
            if (hasDataRecords()) {
                result = result && getDataRecords()
                        .equals(other.getDataRecords());
            }
            result = result && unknownFields.equals(other.unknownFields);
            return result;
        }

        @Override
        public int hashCode() {
            if (memoizedHashCode != 0) {
                return memoizedHashCode;
            }
            int hash = 41;
            hash = (19 * hash) + getDescriptorForType().hashCode();
            if (hasTimestampEpochSeconds()) {
                hash = (37 * hash) + TIMESTAMPEPOCHSECONDS_FIELD_NUMBER;
                hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
                        getTimestampEpochSeconds());
            }
            if (hasTemplateId()) {
                hash = (37 * hash) + TEMPLATEID_FIELD_NUMBER;
                hash = (53 * hash) + getTemplateId();
            }
            if (hasDataRecords()) {
                hash = (37 * hash) + DATARECORDS_FIELD_NUMBER;
                hash = (53 * hash) + getDataRecords().hashCode();
            }
            hash = (29 * hash) + unknownFields.hashCode();
            memoizedHashCode = hash;
            return hash;
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(
                com.google.protobuf.ByteString data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(
                com.google.protobuf.ByteString data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(byte[] data)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(
                byte[] data,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseDelimitedFrom(java.io.InputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseDelimitedFrom(
                java.io.InputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(
                com.google.protobuf.CodedInputStream input)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input);
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet parseFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            return com.google.protobuf.GeneratedMessageV3
                    .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(org.graylog.integrations.ipfix.IpfixJournal.DataSet prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE
                    ? new Builder() : new Builder().mergeFrom(this);
        }

        @Override
        protected Builder newBuilderForType(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code org.graylog.plugins.ipfix.DataSet}
         */
        public static final class Builder extends
                com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
                // @@protoc_insertion_point(builder_implements:org.graylog.plugins.ipfix.DataSet)
                org.graylog.integrations.ipfix.IpfixJournal.DataSetOrBuilder {
            public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
                return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_DataSet_descriptor;
            }

            protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
                return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_DataSet_fieldAccessorTable
                        .ensureFieldAccessorsInitialized(
                                org.graylog.integrations.ipfix.IpfixJournal.DataSet.class, org.graylog.integrations.ipfix.IpfixJournal.DataSet.Builder.class);
            }

            // Construct using org.graylog.plugins.ipfix.IpfixJournal.DataSet.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(
                    com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (com.google.protobuf.GeneratedMessageV3
                        .alwaysUseFieldBuilders) {
                }
            }

            public Builder clear() {
                super.clear();
                timestampEpochSeconds_ = 0L;
                bitField0_ = (bitField0_ & ~0x00000001);
                templateId_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                dataRecords_ = com.google.protobuf.ByteString.EMPTY;
                bitField0_ = (bitField0_ & ~0x00000004);
                return this;
            }

            public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
                return org.graylog.integrations.ipfix.IpfixJournal.internal_static_org_graylog_plugins_ipfix_DataSet_descriptor;
            }

            public org.graylog.integrations.ipfix.IpfixJournal.DataSet getDefaultInstanceForType() {
                return org.graylog.integrations.ipfix.IpfixJournal.DataSet.getDefaultInstance();
            }

            public DataSet build() {
                org.graylog.integrations.ipfix.IpfixJournal.DataSet result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            public org.graylog.integrations.ipfix.IpfixJournal.DataSet buildPartial() {
                org.graylog.integrations.ipfix.IpfixJournal.DataSet result = new org.graylog.integrations.ipfix.IpfixJournal.DataSet(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.timestampEpochSeconds_ = timestampEpochSeconds_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.templateId_ = templateId_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.dataRecords_ = dataRecords_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder) super.clone();
            }

            public Builder setField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.setField(field, value);
            }

            public Builder clearField(
                    com.google.protobuf.Descriptors.FieldDescriptor field) {
                return (Builder) super.clearField(field);
            }

            public Builder clearOneof(
                    com.google.protobuf.Descriptors.OneofDescriptor oneof) {
                return (Builder) super.clearOneof(oneof);
            }

            public Builder setRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    int index, Object value) {
                return (Builder) super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(
                    com.google.protobuf.Descriptors.FieldDescriptor field,
                    Object value) {
                return (Builder) super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(com.google.protobuf.Message other) {
                if (other instanceof org.graylog.integrations.ipfix.IpfixJournal.DataSet) {
                    return mergeFrom((org.graylog.integrations.ipfix.IpfixJournal.DataSet) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(org.graylog.integrations.ipfix.IpfixJournal.DataSet other) {
                if (other == org.graylog.integrations.ipfix.IpfixJournal.DataSet.getDefaultInstance()) return this;
                if (other.hasTimestampEpochSeconds()) {
                    setTimestampEpochSeconds(other.getTimestampEpochSeconds());
                }
                if (other.hasTemplateId()) {
                    setTemplateId(other.getTemplateId());
                }
                if (other.hasDataRecords()) {
                    setDataRecords(other.getDataRecords());
                }
                this.mergeUnknownFields(other.unknownFields);
                onChanged();
                return this;
            }

            public final boolean isInitialized() {
                if (!hasTimestampEpochSeconds()) {
                    return false;
                }
                if (!hasTemplateId()) {
                    return false;
                }
                if (!hasDataRecords()) {
                    return false;
                }
                return true;
            }

            public Builder mergeFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws java.io.IOException {
                org.graylog.integrations.ipfix.IpfixJournal.DataSet parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                    parsedMessage = (org.graylog.integrations.ipfix.IpfixJournal.DataSet) e.getUnfinishedMessage();
                    throw e.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private int bitField0_;

            private long timestampEpochSeconds_;

            /**
             * <code>required uint64 timestampEpochSeconds = 1;</code>
             */
            public boolean hasTimestampEpochSeconds() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required uint64 timestampEpochSeconds = 1;</code>
             */
            public long getTimestampEpochSeconds() {
                return timestampEpochSeconds_;
            }

            /**
             * <code>required uint64 timestampEpochSeconds = 1;</code>
             */
            public Builder setTimestampEpochSeconds(long value) {
                bitField0_ |= 0x00000001;
                timestampEpochSeconds_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint64 timestampEpochSeconds = 1;</code>
             */
            public Builder clearTimestampEpochSeconds() {
                bitField0_ = (bitField0_ & ~0x00000001);
                timestampEpochSeconds_ = 0L;
                onChanged();
                return this;
            }

            private int templateId_;

            /**
             * <code>required uint32 templateId = 2;</code>
             */
            public boolean hasTemplateId() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required uint32 templateId = 2;</code>
             */
            public int getTemplateId() {
                return templateId_;
            }

            /**
             * <code>required uint32 templateId = 2;</code>
             */
            public Builder setTemplateId(int value) {
                bitField0_ |= 0x00000002;
                templateId_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 templateId = 2;</code>
             */
            public Builder clearTemplateId() {
                bitField0_ = (bitField0_ & ~0x00000002);
                templateId_ = 0;
                onChanged();
                return this;
            }

            private com.google.protobuf.ByteString dataRecords_ = com.google.protobuf.ByteString.EMPTY;

            /**
             * <code>required bytes dataRecords = 3;</code>
             */
            public boolean hasDataRecords() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required bytes dataRecords = 3;</code>
             */
            public com.google.protobuf.ByteString getDataRecords() {
                return dataRecords_;
            }

            /**
             * <code>required bytes dataRecords = 3;</code>
             */
            public Builder setDataRecords(com.google.protobuf.ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000004;
                dataRecords_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required bytes dataRecords = 3;</code>
             */
            public Builder clearDataRecords() {
                bitField0_ = (bitField0_ & ~0x00000004);
                dataRecords_ = getDefaultInstance().getDataRecords();
                onChanged();
                return this;
            }

            public final Builder setUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(
                    final com.google.protobuf.UnknownFieldSet unknownFields) {
                return super.mergeUnknownFields(unknownFields);
            }


            // @@protoc_insertion_point(builder_scope:org.graylog.plugins.ipfix.DataSet)
        }

        // @@protoc_insertion_point(class_scope:org.graylog.plugins.ipfix.DataSet)
        private static final org.graylog.integrations.ipfix.IpfixJournal.DataSet DEFAULT_INSTANCE;

        static {
            DEFAULT_INSTANCE = new org.graylog.integrations.ipfix.IpfixJournal.DataSet();
        }

        public static org.graylog.integrations.ipfix.IpfixJournal.DataSet getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        @Deprecated
        public static final com.google.protobuf.Parser<DataSet>
                PARSER = new com.google.protobuf.AbstractParser<DataSet>() {
            public DataSet parsePartialFrom(
                    com.google.protobuf.CodedInputStream input,
                    com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                    throws com.google.protobuf.InvalidProtocolBufferException {
                return new DataSet(input, extensionRegistry);
            }
        };

        public static com.google.protobuf.Parser<DataSet> parser() {
            return PARSER;
        }

        @Override
        public com.google.protobuf.Parser<DataSet> getParserForType() {
            return PARSER;
        }

        public org.graylog.integrations.ipfix.IpfixJournal.DataSet getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

    }

    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_graylog_plugins_ipfix_RawIpfix_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_graylog_plugins_ipfix_RawIpfix_TemplatesEntry_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_graylog_plugins_ipfix_RawIpfix_TemplatesEntry_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_graylog_plugins_ipfix_RawIpfix_OptionTemplatesEntry_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_graylog_plugins_ipfix_RawIpfix_OptionTemplatesEntry_fieldAccessorTable;
    private static final com.google.protobuf.Descriptors.Descriptor
            internal_static_org_graylog_plugins_ipfix_DataSet_descriptor;
    private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internal_static_org_graylog_plugins_ipfix_DataSet_fieldAccessorTable;

    public static com.google.protobuf.Descriptors.FileDescriptor
    getDescriptor() {
        return descriptor;
    }

    private static com.google.protobuf.Descriptors.FileDescriptor
            descriptor;

    static {
        String[] descriptorData = {
                "\n&src/main/resources/ipfix_journal.proto" +
                "\022\031org.graylog.plugins.ipfix\"\304\002\n\010RawIpfix" +
                "\022E\n\ttemplates\030\001 \003(\01322.org.graylog.plugin" +
                "s.ipfix.RawIpfix.TemplatesEntry\022Q\n\017optio" +
                "nTemplates\030\002 \003(\01328.org.graylog.plugins.i" +
                "pfix.RawIpfix.OptionTemplatesEntry\0224\n\010da" +
                "taSets\030\003 \003(\0132\".org.graylog.plugins.ipfix" +
                ".DataSet\0320\n\016TemplatesEntry\022\013\n\003key\030\001 \001(\r\022" +
                "\r\n\005value\030\002 \001(\014:\0028\001\0326\n\024OptionTemplatesEnt" +
                "ry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\014:\0028\001\"Q\n\007Da",
                "taSet\022\035\n\025timestampEpochSeconds\030\001 \002(\004\022\022\n\n" +
                "templateId\030\002 \002(\r\022\023\n\013dataRecords\030\003 \002(\014B)\n" +
                "\031org.graylog.plugins.ipfixB\014IpfixJournal"
        };
        com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
                new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
                    public com.google.protobuf.ExtensionRegistry assignDescriptors(
                            com.google.protobuf.Descriptors.FileDescriptor root) {
                        descriptor = root;
                        return null;
                    }
                };
        com.google.protobuf.Descriptors.FileDescriptor
                .internalBuildGeneratedFileFrom(descriptorData,
                                                new com.google.protobuf.Descriptors.FileDescriptor[]{
                                                }, assigner);
        internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor =
                getDescriptor().getMessageTypes().get(0);
        internal_static_org_graylog_plugins_ipfix_RawIpfix_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor,
                new String[]{"Templates", "OptionTemplates", "DataSets",});
        internal_static_org_graylog_plugins_ipfix_RawIpfix_TemplatesEntry_descriptor =
                internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor.getNestedTypes().get(0);
        internal_static_org_graylog_plugins_ipfix_RawIpfix_TemplatesEntry_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_graylog_plugins_ipfix_RawIpfix_TemplatesEntry_descriptor,
                new String[]{"Key", "Value",});
        internal_static_org_graylog_plugins_ipfix_RawIpfix_OptionTemplatesEntry_descriptor =
                internal_static_org_graylog_plugins_ipfix_RawIpfix_descriptor.getNestedTypes().get(1);
        internal_static_org_graylog_plugins_ipfix_RawIpfix_OptionTemplatesEntry_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_graylog_plugins_ipfix_RawIpfix_OptionTemplatesEntry_descriptor,
                new String[]{"Key", "Value",});
        internal_static_org_graylog_plugins_ipfix_DataSet_descriptor =
                getDescriptor().getMessageTypes().get(1);
        internal_static_org_graylog_plugins_ipfix_DataSet_fieldAccessorTable = new
                com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
                internal_static_org_graylog_plugins_ipfix_DataSet_descriptor,
                new String[]{"TimestampEpochSeconds", "TemplateId", "DataRecords",});
    }

    // @@protoc_insertion_point(outer_class_scope)
}
